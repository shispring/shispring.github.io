<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Anolis OS 8安装中文字符集</title>
    <url>/2024/08/28/Anolis-OS-8%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E9%9B%86/</url>
    <content><![CDATA[<h2 id="1-查看当前系统字符集"><a href="#1-查看当前系统字符集" class="headerlink" title="1 查看当前系统字符集"></a>1 查看当前系统字符集</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看环境字符集</span></span><br><span class="line">locale</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看平台所有字符集</span></span><br><span class="line">locale -a</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$LANG</span></span><br><span class="line">en_US.UTF-8</span><br></pre></td></tr></table></figure>

<h2 id="2-安装字符集"><a href="#2-安装字符集" class="headerlink" title="2 安装字符集"></a>2 安装字符集</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装字符集</span></span><br><span class="line">yum install -y glibc-common</span><br><span class="line">yum install -y langpacks-zh_CN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改/etc/locale.conf文件</span></span><br><span class="line"><span class="built_in">cat</span> /etc/locale.conf</span><br><span class="line">en_US.UTF-8</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;s#^LANG=.*#LANG=&quot;zh_CN.utf8&quot;#&#x27;</span> /etc/locale.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/locale.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看新的字符集</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$LANG</span></span><br><span class="line">zh_CN.UTF-8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>CA签发证书</title>
    <url>/2024/10/18/CA%E7%AD%BE%E5%8F%91%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<p>CA（Certificate Authority），翻译过来就叫作证书颁发机构。用于实现数字证书的管理，包括证书颁发、吊销、续期等。PKI（Registration Authority ），翻译过来叫作注册机构，负责接收请求并验证实体的身份，然后指示 CA 为其颁发或撤销证书。CA和PKI的关系：PKI 是一个更大的框架或系统，而 CA 是 PKI 中的一个核心组件。</p>
<h2 id="1、安装openSSL"><a href="#1、安装openSSL" class="headerlink" title="1、安装openSSL"></a>1、安装openSSL</h2><h2 id="2、创建目录"><a href="#2、创建目录" class="headerlink" title="2、创建目录"></a>2、创建目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /etc/pki/CA</span><br><span class="line"><span class="built_in">mkdir</span> /etc/pki/CA</span><br><span class="line"><span class="built_in">mkdir</span> /etc/pki/CA/&#123;certs,crl,newcerts,private,csr&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#certs目录：用于统一存放CA签发的证书</span></span><br><span class="line"><span class="comment">#crl目录：用于存放一个证书吊销文件，这个文件的内容记录了吊销证书的信息</span></span><br><span class="line"><span class="comment">#newcerts目录：这个目录存放的是刚创建的证书</span></span><br><span class="line"><span class="comment">#private：存放的是CA的私钥文件</span></span><br><span class="line"><span class="comment">#csr:单独给客户的证书请求文件创建了一个目录，用于保存客户端传输过来的CSR文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意这个文件初始时一定要为空，不然后期没法颁发证书</span></span><br><span class="line"><span class="built_in">touch</span>  /etc/pki/CA/index.txt</span><br><span class="line"><span class="built_in">echo</span> 01 &gt; /etc/pki/CA/serial</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件说明：</span></span><br><span class="line"><span class="comment">#index.txt文件: 是OpenSSL用来跟踪哪些证书已经被签署的数据库。对于一个新的CA，index.txt应该是一个空文件，如果这个文件非空，签发证书的时候会失败。</span></span><br><span class="line"><span class="comment">#serial文件：存放颁发证书的编号的文件，每当签发新证书时，OpenSSL会读取这个文件中的值作为其序列号，并增加该值以供下次使用，所以需要给他赋初值。</span></span><br></pre></td></tr></table></figure>

<h2 id="3、编辑配置文件"><a href="#3、编辑配置文件" class="headerlink" title="3、编辑配置文件"></a>3、编辑配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过 openssl version -d 来查找OpenSSL的相关文件</span></span><br><span class="line">openssl version -d</span><br><span class="line"><span class="built_in">ls</span> /etc/pki/tls</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> /etc/pki/tls/openssl.cnf /etc/pki/tls/openssl.cnf.back</span><br></pre></td></tr></table></figure>

<ul>
<li>vim &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;openssl.cnf</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># [ ca ]指定默认的 CA 配置区段，因为可能会存在多个 CA 配置区段，用于不同的目的或者不同的证书策略</span></span><br><span class="line">[ ca ]</span><br><span class="line"><span class="comment"># 定义默认的CA设置部分名称</span></span><br><span class="line">default_ca = CA_default</span><br><span class="line"></span><br><span class="line"><span class="comment"># [ CA_default ] 定义了关于证书颁发机构(CA)的默认设置和相关文件路径。</span></span><br><span class="line">[ CA_default ]</span><br><span class="line"><span class="comment"># 定义CA的主目录。</span></span><br><span class="line"><span class="built_in">dir</span> = /etc/pki/CA</span><br><span class="line"><span class="comment"># 已签发的证书的存储位置</span></span><br><span class="line">certs = <span class="variable">$dir</span>/certs</span><br><span class="line"><span class="comment"># 新证书的默认存放位置</span></span><br><span class="line">new_certs_dir = <span class="variable">$dir</span>/newcerts</span><br><span class="line"><span class="comment">#  用于存储证书签发信息的数据库文件的位置</span></span><br><span class="line">database = <span class="variable">$dir</span>/index.txt</span><br><span class="line"><span class="comment"># CA的证书位置</span></span><br><span class="line">certificate = <span class="variable">$dir</span>/certs/cacert.pem</span><br><span class="line"><span class="comment"># CA的私钥位置</span></span><br><span class="line">private_key = <span class="variable">$dir</span>/private/cakey.key</span><br><span class="line"><span class="comment"># 存储当前证书序列号的文件位置</span></span><br><span class="line">serial = <span class="variable">$dir</span>/serial</span><br><span class="line"><span class="comment"># 默认证书有效期</span></span><br><span class="line">default_days = 3650</span><br><span class="line"><span class="comment"># 默认使用的消息摘要算</span></span><br><span class="line">default_md = sha256</span><br><span class="line"><span class="comment"># 决定是否保留从证书请求(CSR)中传入的Distinguished Name(DN)的顺序</span></span><br><span class="line">preserve = no</span><br><span class="line">default_crl_days = 7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 策略定义，确保以下部分存在</span></span><br><span class="line">policy = policy_match</span><br><span class="line"></span><br><span class="line">[ policy_match ]</span><br><span class="line">countryName            = match</span><br><span class="line">stateOrProvinceName    = optional</span><br><span class="line">organizationName       = match</span><br><span class="line">organizationalUnitName = optional</span><br><span class="line">commonName             = supplied</span><br><span class="line">emailAddress           = optional</span><br><span class="line"></span><br><span class="line"><span class="comment"># [ req ]定义了与生成证书请求文件（也称为Certificate Signing Request，简称CSR）相关的默认设置</span></span><br><span class="line">[ req ]</span><br><span class="line"><span class="comment"># 生成新私钥时使用的默认位数</span></span><br><span class="line">default_bits = 2048</span><br><span class="line"><span class="comment"># 是否在创建证书请求时提示用户输入详细信息</span></span><br><span class="line"><span class="comment"># no表示使用 openssl req 命令创建新的CSR或证书时，将不会被提示输入任何DN字段，会使用 [ dn ] 部分提供的默认值。</span></span><br><span class="line">prompt = no</span><br><span class="line"><span class="comment"># 用于证书请求的默认消息摘要算法</span></span><br><span class="line">default_md = sha256</span><br><span class="line"><span class="comment"># 告诉OpenSSL使用配置文件中的[ dn ]部分作为CSR的默认字段值</span></span><br><span class="line">distinguished_name = dn</span><br><span class="line"></span><br><span class="line"><span class="comment"># [ dn ] 定义了默认的Distinguished Name（可分辨名称）属性和它们的值</span></span><br><span class="line"><span class="comment"># C：国家 ST：省 L：市 O：通常是一个公司或机构的全名 OU：组织内部的一个特定部门或单位</span></span><br><span class="line"><span class="comment"># CN：在 SSL/TLS 证书的上下文中通常表示证书意图保护的域名emailAddress：邮箱</span></span><br><span class="line">[ dn ]</span><br><span class="line">C = CN</span><br><span class="line">ST = BeiJing</span><br><span class="line">L = BeiJing</span><br><span class="line">O = xxx</span><br><span class="line">OU = xxx docker</span><br><span class="line">emailAddress = xxx@yyy.cn</span><br><span class="line">CN = yyy.cn</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4、自签名证书生成"><a href="#4、自签名证书生成" class="headerlink" title="4、自签名证书生成"></a>4、自签名证书生成</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先生成私钥</span></span><br><span class="line">openssl genpkey -algorithm RSA -out /etc/pki/CA/private/cakey.key</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据生成得私钥创建一个新的根证书,使用这个证书来签署其它得证书</span></span><br><span class="line">openssl req -key /etc/pki/CA/private/cakey.key -new -x509 -days 7300 -out /etc/pki/CA/certs/cacert.pem</span><br><span class="line"></span><br><span class="line">tree /etc/pki/CA</span><br></pre></td></tr></table></figure>

<h2 id="5、CA颁发证书"><a href="#5、CA颁发证书" class="headerlink" title="5、CA颁发证书"></a>5、CA颁发证书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先创建一个目录存放相关文件</span></span><br><span class="line"><span class="built_in">cd</span> &amp;&amp; <span class="built_in">mkdir</span> tom &amp;&amp; <span class="built_in">cd</span> tom</span><br><span class="line"></span><br><span class="line"><span class="comment">#一步到位生成私钥和CSR</span></span><br><span class="line">openssl req -new -keyout tom.key -out tom_req.csr -nodes</span><br><span class="line"><span class="comment">#生成私钥的时候会要求输入一个密码，不输入的话可能会提示error，可以通过 -nodes 参数来不输入密码</span></span><br><span class="line"><span class="comment">#一步到位生成私钥和CSR，-keyout clientkey.pem 选项生成一个新的私钥，然后根据生成的私钥创建证书请求文件</span></span><br><span class="line"><span class="comment">#在CA上生成的CSR，配置文件里面指定了请求者的标识信息（如：组织、位置、国家、域名等，所以这里没有提示输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝到csr路径</span></span><br><span class="line"><span class="built_in">cp</span> ./tom_req.csr /etc/pki/CA/csr/</span><br><span class="line"></span><br><span class="line"><span class="comment">#CA签发证书，通过 -bath参数实现签署证书时自动确认，如果初始化CA环境的时候，index.txt这个数据库文件不为空，那么此时签署证书不会成功，也不会有任何错误提示。</span></span><br><span class="line">openssl ca -batch -<span class="keyword">in</span> /etc/pki/CA/csr/tom_req.csr -out /etc/pki/CA/certs/tom.pem</span><br><span class="line"></span><br><span class="line">tree /etc/pki/CA</span><br><span class="line">/etc/pki/CA</span><br><span class="line">├── certs</span><br><span class="line">│   ├── cacert.pem</span><br><span class="line">│   ├── tom1.pem</span><br><span class="line">│   └── tom.pem</span><br><span class="line">├── crl</span><br><span class="line">│   └── crl.pem</span><br><span class="line">├── csr</span><br><span class="line">│   └── tom_req.csr</span><br><span class="line">├── index.txt</span><br><span class="line">├── index.txt.attr</span><br><span class="line">├── index.txt.attr.old</span><br><span class="line">├── index.txt.old</span><br><span class="line">├── newcerts</span><br><span class="line">│   ├── 01.pem</span><br><span class="line">├── private</span><br><span class="line">│   └── cakey.key</span><br><span class="line">├── serial</span><br><span class="line">└── serial.old</span><br><span class="line"></span><br><span class="line"><span class="comment">#idnex.txt文件用于存储CA签发的所有证书，一行代表一个证书。</span></span><br><span class="line"><span class="comment">#该文件包含了index.txt文件的一些属性，unique_subject = yes表示在index.txt数据库中的每个主题应该是唯一的，即不允许有两个具有相同主题的证书</span></span><br><span class="line"><span class="comment">#index.txt.old存放上一个证书的数据库信息</span></span><br><span class="line"><span class="comment">#serial.old该文件存放上一个证书的编号信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查阅证书内容</span></span><br><span class="line">openssl req -noout -text -<span class="keyword">in</span> /etc/pki/CA/certs/tom.pem</span><br></pre></td></tr></table></figure>

<h2 id="6、注销证书"><a href="#6、注销证书" class="headerlink" title="6、注销证书"></a>6、注销证书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#吊销证书</span></span><br><span class="line">openssl ca -revoke /etc/pki/CA/certs/tom.pem</span><br><span class="line"><span class="comment">#吊销后，需要重新生成 CRL 文件：</span></span><br><span class="line">openssl ca -gencrl -out /etc/pki/CA/crl/crl.pem</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">openssl crl -<span class="keyword">in</span> /etc/pki/CA/crl/crl.pem -text -noout</span><br><span class="line"></span><br><span class="line">openssl verify -crl_check -CAfile /etc/pki/CA/certs/cacert.pem -CRLfile /etc/pki/CA/crl/crl.pem /etc/pki/CA/certs/tom.pem</span><br><span class="line"><span class="comment">#说明</span></span><br><span class="line">•	-crl_check：启用 CRL 检查。</span><br><span class="line">•	-CAfile：指定 CA 根证书。</span><br><span class="line">•	-CRLfile：指定 CRL 文件。</span><br></pre></td></tr></table></figure>

<h2 id="常见后缀"><a href="#常见后缀" class="headerlink" title="常见后缀"></a>常见后缀</h2><ul>
<li>.key：一般私钥就以 .key 结尾</li>
<li>.pem：新生成的证书一般以 .pem 结尾。pem是 Privacy Enhanced Mail 的缩写，是一种文件格式，可以包含任何类型的证书或密钥。这种格式的文件类容是BASE64编码显示的，并在开始和结束时由”—–BEGIN…”和”—–END…”标记包围</li>
<li>.csr：证书请求文件使用csr结尾，csr是Certificate Signing Request的缩写</li>
<li>.crl：这是CA用于列出已被撤销的证书的文件常用的后缀，是Certificate Revocation List的缩写</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>DNS缓存时间TTL</title>
    <url>/2024/10/12/DNS%E7%BC%93%E5%AD%98%E6%97%B6%E9%97%B4TTL/</url>
    <content><![CDATA[<p>在计算机网络中，<strong>DNS（域名系统）缓存</strong>用于加速域名解析过程，减少重复查询，提高访问速度。<strong>本地 DNS 缓存时间</strong>主要取决于以下几个因素：</p>
<ol>
<li><strong>DNS 记录的 TTL（生存时间）</strong>：<ul>
<li><strong>TTL（Time-To-Live）</strong> 是 DNS 记录中指定的一个时间值，表示该记录在缓存中可以存储的最长时间。TTL 的单位通常是秒。</li>
<li>例如，TTL 为 <code>3600</code> 秒（即 1 小时），表示该 DNS 记录在缓存中有效期为 1 小时。</li>
</ul>
</li>
<li><strong>本地 DNS 解析器的缓存策略</strong>：<ul>
<li>不同操作系统和 DNS 解析器（如 <code>systemd-resolved</code>、<code>dnsmasq</code>、<code>nscd</code> 等）可能有自己的缓存策略，可能会设置最小或最大 TTL 值，以确保缓存的灵活性和安全性。</li>
</ul>
</li>
</ol>
<h2 id="1-本地-DNS-缓存时间的常见范围"><a href="#1-本地-DNS-缓存时间的常见范围" class="headerlink" title="1. 本地 DNS 缓存时间的常见范围"></a><strong>1. 本地 DNS 缓存时间的常见范围</strong></h2><ul>
<li><strong>短 TTL</strong>：如 30 秒至 5 分钟，适用于频繁更新的记录。</li>
<li><strong>中等 TTL</strong>：如 5 分钟至 1 小时，适用于大多数动态变化的记录。</li>
<li><strong>长 TTL</strong>：如 1 小时至 24 小时，适用于较为稳定的记录。</li>
</ul>
<h2 id="2-如何查看和配置本地-DNS-缓存时间"><a href="#2-如何查看和配置本地-DNS-缓存时间" class="headerlink" title="2. 如何查看和配置本地 DNS 缓存时间"></a><strong>2. 如何查看和配置本地 DNS 缓存时间</strong></h2><p>不同操作系统和 DNS 解析器有不同的方法来查看和配置本地 DNS 缓存时间。以下是常见操作系统和解析器的具体步骤：</p>
<h3 id="a-Linux-系统"><a href="#a-Linux-系统" class="headerlink" title="a. Linux 系统"></a><strong>a. Linux 系统</strong></h3><p><strong>查看 DNS 缓存内容和 TTL：</strong></p>
<ul>
<li>具体方法取决于所使用的 DNS 缓存服务。</li>
</ul>
<ol>
<li><p>**使用 <code>systemd-resolved</code>**：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#systemctl start systemd-resolved</span></span><br><span class="line">systemd-resolve --statistics</span><br></pre></td></tr></table></figure>
<ul>
<li>查看缓存统计信息。</li>
</ul>
</li>
<li><p><strong>使用 <code>nscd</code>（Name Service Cache Daemon）</strong>：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#yum install -y nscd</span></span><br><span class="line">nscd -g</span><br></pre></td></tr></table></figure>
<ul>
<li>查看缓存信息。</li>
</ul>
</li>
<li><p>**使用 <code>dnsmasq</code>**：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status dnsmasq</span><br><span class="line">dnsmasq --<span class="built_in">test</span>  <span class="comment"># 检查配置</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>清除 DNS 缓存：</strong></p>
<ol>
<li><p><strong>systemd-resolved</strong>：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemd-resolve --flush-caches</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>nscd</strong>：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart nscd</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>dnsmasq</strong>：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart dnsmasq</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>配置 DNS 客户端缓存策略：</strong></p>
<ol>
<li><p><strong>systemd-resolved</strong>：</p>
<ul>
<li>配置文件位于 <code>/etc/systemd/resolved.conf</code>。</li>
<li>可设置 <code>Cache</code> 相关参数，但通常遵循 DNS 记录的 TTL。</li>
</ul>
</li>
<li><p><strong>nscd</strong>：</p>
<ul>
<li>配置文件位于 <code>/etc/nscd.conf</code>。</li>
<li>可设置 <code>positive-time-to-live</code> 和 <code>negative-time-to-live</code>。</li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/nscd.conf</span><br></pre></td></tr></table></figure>
<p> 示例配置：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enable-cache hosts yes</span><br><span class="line">positive-time-to-live hosts 3600</span><br><span class="line">negative-time-to-live hosts 20</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>dnsmasq</strong>：</p>
<ul>
<li>配置文件位于 <code>/etc/dnsmasq.conf</code>。</li>
<li>可设置 <code>min-cache-ttl</code> 和 <code>max-cache-ttl</code>。</li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/dnsmasq.conf</span><br></pre></td></tr></table></figure>
<p> 示例配置：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">min-cache-ttl=60</span><br><span class="line">max-cache-ttl=3600</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="3-确认-DNS-缓存时间"><a href="#3-确认-DNS-缓存时间" class="headerlink" title="3. 确认 DNS 缓存时间"></a><strong>3. 确认 DNS 缓存时间</strong></h2><p><strong>查看特定 DNS 记录的 TTL：</strong></p>
<p>使用 <code>dig</code> 命令可以查看 DNS 记录的 TTL 值。<br>在 Anolis OS 8 上安装 dig 命令通常通过安装 bind-utils 包来实现<br>yum install bind-utils -y </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dig example.com</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">example.com.     3600    IN      A       93.184.216.34</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>上述输出中，<code>3600</code> 表示该 DNS 记录的 TTL 为 3600 秒（1 小时）。</li>
</ul>
<p><strong>综合判断缓存时间：</strong></p>
<ul>
<li>本地 DNS 缓存时间通常不会超过 DNS 记录本身的 TTL。</li>
<li>某些解析器可能会调整实际缓存时间，如设置最小 TTL 或最大 TTL。</li>
</ul>
<h2 id="4-实际案例演示"><a href="#4-实际案例演示" class="headerlink" title="4. 实际案例演示"></a><strong>4. 实际案例演示</strong></h2><p>以下是一个在 Linux 系统上使用 <code>systemd-resolved</code> 配置和查看 DNS 缓存时间的示例：</p>
<p><strong>查看当前 DNS 缓存统计：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemd-resolve --statistics</span><br></pre></td></tr></table></figure>

<p>输出示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Global</span><br><span class="line">         LLMNR setting: yes</span><br><span class="line">  MulticastDNS setting: no</span><br><span class="line">    DNSOverTLS setting: no</span><br><span class="line">        DNSSEC setting: no</span><br><span class="line">      DNSSEC supported: no</span><br><span class="line"></span><br><span class="line">Per-Link Statistics</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>清除 DNS 缓存：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemd-resolve --flush-caches</span><br></pre></td></tr></table></figure>

<p><strong>查看某个域名的 TTL：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dig example.com +nocmd +noall +answer</span><br></pre></td></tr></table></figure>

<p>输出示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example.com.     3600    IN      A       93.184.216.34</span><br></pre></td></tr></table></figure>

<h2 id="5-最佳实践"><a href="#5-最佳实践" class="headerlink" title="5. 最佳实践"></a><strong>5. 最佳实践</strong></h2><ol>
<li><strong>合理设置 DNS 记录的 TTL</strong>：<ul>
<li>根据应用需求和域名更新频率，合理设置 TTL。较低的 TTL 适用于频繁变动的记录，较高的 TTL 则适用于稳定的记录。</li>
</ul>
</li>
<li><strong>优化本地 DNS 解析器的缓存策略</strong>：<ul>
<li>根据网络环境和应用需求，调整本地解析器的最小和最大缓存时间，平衡缓存效率与更新灵活性。</li>
</ul>
</li>
<li><strong>定期清理 DNS 缓存</strong>：<ul>
<li>在进行 DNS 变更后，及时清理本地 DNS 缓存，确保新配置生效。</li>
</ul>
</li>
<li><strong>监控 DNS 解析性能</strong>：<ul>
<li>使用监控工具（如 Prometheus、Grafana）监控 DNS 解析的性能和缓存命中率，优化 DNS 配置。</li>
</ul>
</li>
<li><strong>使用可靠的 DNS 解析器</strong>：<ul>
<li>选择性能稳定、支持高级功能（如 DNSSEC、负载均衡）的 DNS 解析器，提升网络稳定性和安全性。</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Debian系统更新安装源</title>
    <url>/2024/09/26/Debian%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0%E5%AE%89%E8%A3%85%E6%BA%90/</url>
    <content><![CDATA[<h2 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">#注意查看系统的版本</span><br><span class="line">cat /etc/os-release</span><br><span class="line"><span class="variable constant_">PRETTY_NAME</span>=<span class="string">&quot;Debian GNU/Linux 11 (bullseye)&quot;</span></span><br><span class="line"><span class="variable constant_">NAME</span>=<span class="string">&quot;Debian GNU/Linux&quot;</span></span><br><span class="line"><span class="variable constant_">VERSION_ID</span>=<span class="string">&quot;11&quot;</span></span><br><span class="line"><span class="variable constant_">VERSION</span>=<span class="string">&quot;11 (bullseye)&quot;</span></span><br><span class="line"><span class="variable constant_">VERSION_CODENAME</span>=bullseye</span><br></pre></td></tr></table></figure>

<h2 id="变更apt源"><a href="#变更apt源" class="headerlink" title="变更apt源"></a>变更apt源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 11版本</span></span><br><span class="line"><span class="comment">#https://developer.aliyun.com/mirror/debian?spm=a2c6h.13651102.0.0.4bc81b11TwGuai</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span></span><br><span class="line"><span class="string">deb-src https://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/debian-security/ bullseye-security main</span></span><br><span class="line"><span class="string">deb-src https://mirrors.aliyun.com/debian-security/ bullseye-security main</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span></span><br><span class="line"><span class="string">deb-src https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span></span><br><span class="line"><span class="string">deb-src https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#12版本</span></span><br><span class="line"><span class="comment">#https://wph.im/272.html</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/debian/ bookworm main non-free non-free-firmware contrib</span></span><br><span class="line"><span class="string">deb-src https://mirrors.aliyun.com/debian/ bookworm main non-free non-free-firmware contrib</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/debian-security/ bookworm-security main</span></span><br><span class="line"><span class="string">deb-src https://mirrors.aliyun.com/debian-security/ bookworm-security main</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/debian/ bookworm-updates main non-free non-free-firmware contrib</span></span><br><span class="line"><span class="string">deb-src https://mirrors.aliyun.com/debian/ bookworm-updates main non-free non-free-firmware contrib</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/debian/ bookworm-backports main non-free non-free-firmware contrib</span></span><br><span class="line"><span class="string">deb-src https://mirrors.aliyun.com/debian/ bookworm-backports main non-free non-free-firmware contrib</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行更新</span></span><br><span class="line">apt update &amp;&amp; apt upgrade</span><br></pre></td></tr></table></figure>

<h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装top、ps、pstree、ping、ss</span></span><br><span class="line">apt-get install -y  ethtool htop net-tools telnet inetutils-ping procps psmisc iproute2</span><br><span class="line"></span><br><span class="line"><span class="comment">#ss 命令</span></span><br><span class="line">ss -tlp</span><br><span class="line">ss -t -a </span><br><span class="line">ss -lp | grep 3306</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>OpenSSL 支持的密钥类型和格式</title>
    <url>/2024/10/18/OpenSSL-%E6%94%AF%E6%8C%81%E7%9A%84%E5%AF%86%E9%92%A5%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>OpenSSL 密钥类型与格式对比表</strong></p>
<p><strong>1. 密钥类型对比</strong></p>
<table>
<thead>
<tr>
<th><strong>密钥类型</strong></th>
<th><strong>算法描述</strong></th>
<th><strong>典型应用场景</strong></th>
<th><strong>生成命令示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>RSA</strong></td>
<td>基于大整数分解，常见的非对称加密算法</td>
<td>HTTPS、TLS&#x2F;SSL 证书、SSH、公钥加密</td>
<td>openssl genrsa -out rsa_key.pem 2048</td>
</tr>
<tr>
<td><strong>ECC</strong></td>
<td>椭圆曲线密码学，短密钥更高效</td>
<td>IoT、移动设备、TLS 1.3</td>
<td>openssl ecparam -genkey -name prime256v1 -out ec_key.pem</td>
</tr>
<tr>
<td><strong>DSA</strong></td>
<td>基于离散对数的数字签名算法</td>
<td>数字签名（DNSSEC 等）</td>
<td>openssl dsaparam -genkey 2048 -out dsa_key.pem</td>
</tr>
<tr>
<td><strong>DH</strong></td>
<td>Diffie-Hellman 算法，用于密钥交换</td>
<td>VPN、IPsec 加密通道</td>
<td>openssl dhparam -out dh_key.pem 2048</td>
</tr>
<tr>
<td><strong>ED25519</strong></td>
<td>高效的椭圆曲线签名算法（无须参数生成）</td>
<td>SSH、TLS 1.3、轻量级签名</td>
<td>openssl genpkey -algorithm ED25519 -out ed25519_key.pem</td>
</tr>
<tr>
<td><strong>X25519</strong></td>
<td>专用于密钥交换的现代椭圆曲线算法</td>
<td>TLS 1.3 密钥交换、ECDH</td>
<td>openssl genpkey -algorithm X25519 -out x25519_key.pem</td>
</tr>
<tr>
<td><strong>GOST</strong></td>
<td>俄罗斯国家标准算法</td>
<td>加密通信和签名（如 GOST SSL 证书）</td>
<td>需 GOST 扩展支持</td>
</tr>
<tr>
<td><strong>SM2</strong></td>
<td>中国国家标准（基于 ECC）</td>
<td>国密协议（如银行和政府应用）</td>
<td>openssl genpkey -algorithm SM2 -out sm2_key.pem</td>
</tr>
</tbody></table>
<p><strong>2. 密钥格式对比</strong></p>
<table>
<thead>
<tr>
<th><strong>格式</strong></th>
<th><strong>描述</strong></th>
<th><strong>典型应用场景</strong></th>
<th><strong>加密支持</strong></th>
<th><strong>转换命令示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>PEM</strong></td>
<td>Base64 编码，文本格式，以 —–BEGIN 开头</td>
<td>TLS&#x2F;SSL 证书、服务器私钥存储</td>
<td>支持</td>
<td>openssl rsa -in rsa_key.pem -out private_key.pem -outform PEM</td>
</tr>
<tr>
<td><strong>DER</strong></td>
<td>二进制格式，适合嵌入式系统</td>
<td>嵌入式系统、低级通信传输</td>
<td>不支持</td>
<td>openssl rsa -in rsa_key.pem -out private_key.der -outform DER</td>
</tr>
<tr>
<td><strong>PKCS#8</strong></td>
<td>私钥标准格式，支持多种算法（如 RSA、ECC）</td>
<td>服务器密钥存储、跨平台交换</td>
<td>支持</td>
<td>openssl pkcs8 -topk8 -in rsa_key.pem -out pkcs8_key.pem</td>
</tr>
<tr>
<td><strong>PKCS#12</strong></td>
<td>包含证书链和私钥的打包格式（.p12&#x2F;.pfx）</td>
<td>客户端证书、VPN、S&#x2F;MIME</td>
<td>支持</td>
<td>openssl pkcs12 -export -out cert.p12 -inkey ec_key.pem -in cert.pem</td>
</tr>
<tr>
<td><strong>OpenSSH</strong></td>
<td>专用于 SSH 的密钥格式</td>
<td>SSH 登录和密钥交换</td>
<td>支持</td>
<td>ssh-keygen -t ed25519 -f ~&#x2F;.ssh&#x2F;id_ed25519</td>
</tr>
<tr>
<td><strong>JWK</strong></td>
<td>JSON Web Key，用于 Web 应用密钥存储和传输</td>
<td>OAuth2、JWT 加密</td>
<td>支持</td>
<td>使用专用库生成</td>
</tr>
</tbody></table>
<p><strong>3. 应用场景推荐</strong></p>
<table>
<thead>
<tr>
<th><strong>场景</strong></th>
<th><strong>推荐密钥类型</strong></th>
<th><strong>推荐格式</strong></th>
<th><strong>命令示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Web 服务器（Nginx&#x2F;Apache）</strong></td>
<td>RSA 或 ECC</td>
<td>PEM、PKCS#8</td>
<td>openssl pkcs8 -topk8 -in rsa_key.pem -out server_key.pem</td>
</tr>
<tr>
<td><strong>IoT 设备和移动端</strong></td>
<td>ECC（prime256v1）</td>
<td>PKCS#8</td>
<td>openssl ecparam -genkey -name prime256v1 -out ec_key.pem</td>
</tr>
<tr>
<td><strong>VPN 客户端证书</strong></td>
<td>RSA 或 ECC</td>
<td>PKCS#12</td>
<td>openssl pkcs12 -export -out vpn_cert.p12 -inkey ec_key.pem -in cert.pem</td>
</tr>
<tr>
<td><strong>SSH 登录</strong></td>
<td>ED25519 或 RSA</td>
<td>OpenSSH</td>
<td>ssh-keygen -t ed25519 -f ~&#x2F;.ssh&#x2F;id_ed25519</td>
</tr>
<tr>
<td><strong>TLS 1.3 密钥交换</strong></td>
<td>X25519</td>
<td>PKCS#8</td>
<td>openssl genpkey -algorithm X25519 -out x25519_key.pem</td>
</tr>
<tr>
<td><strong>国密应用（SM2 签名）</strong></td>
<td>SM2</td>
<td>PKCS#8</td>
<td>openssl genpkey -algorithm SM2 -out sm2_key.pem</td>
</tr>
</tbody></table>
<p><strong>4. 实现案例</strong></p>
<p><strong>1. 生成 RSA 密钥并转换为 PKCS#8 格式</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out rsa_key.pem 2048</span><br><span class="line"></span><br><span class="line">openssl pkcs8 -topk8 -<span class="keyword">in</span> rsa_key.pem -out rsa_key_pkcs8.pem -nocrypt</span><br></pre></td></tr></table></figure>

<p><strong>2. 生成 ECC 私钥并打包为 PKCS#12</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl ecparam -genkey -name prime256v1 -out ec_key.pem</span><br><span class="line"></span><br><span class="line">openssl req -new -x509 -key ec_key.pem -out ec_cert.pem -days 365</span><br><span class="line"></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -out ec_cert.p12 -inkey ec_key.pem -<span class="keyword">in</span> ec_cert.pem</span><br></pre></td></tr></table></figure>

<p><strong>3. 生成 ED25519 密钥用于 SSH</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519</span><br></pre></td></tr></table></figure>

<p><strong>5. 总结与建议</strong></p>
<p>•	<strong>RSA</strong>：经典且兼容性好，适合 Web 服务器和通用加密应用。</p>
<p>•	<strong>ECC</strong>：更高效、密钥短，适用于 IoT 和现代 TLS。</p>
<p>•	<strong>ED25519&#x2F;X25519</strong>：轻量级和高性能，推荐用于 SSH 和 TLS 1.3。</p>
<p>•	<strong>SM2&#x2F;GOST</strong>：满足特定国家或行业的加密标准。</p>
<p>•	<strong>PKCS#8 与 PKCS#12</strong>：PKCS#8 适合服务器端私钥存储，PKCS#12 常用于客户端证书传输。</p>
<p>选择合适的密钥类型与格式可以在 <strong>安全性、性能、兼容性</strong> 之间取得良好的平衡。</p>
]]></content>
      <categories>
        <category>openssl</category>
      </categories>
  </entry>
  <entry>
    <title>Pod状态及原因</title>
    <url>/2024/10/14/Pod%E7%8A%B6%E6%80%81%E5%8F%8A%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[<p>以下是 Kubernetes <strong>Pod 各种状态</strong>及其<strong>原因分析</strong>的详细总结：</p>
<hr>
<h3 id="1-Pending"><a href="#1-Pending" class="headerlink" title="1. Pending"></a><strong>1. Pending</strong></h3><p><strong>解释</strong>：Pod 被成功创建，但其中的一个或多个容器尚未启动。<br><strong>可能原因</strong>：</p>
<ul>
<li>没有足够的资源（CPU、内存）调度到合适的节点。  </li>
<li>存在节点污点，Pod 无法容忍（Taints and Tolerations）。  </li>
<li>镜像下载缓慢或失败（如网络问题或镜像仓库不可用）。  </li>
<li>存在 PVC（Persistent Volume Claim）绑定问题。</li>
</ul>
<hr>
<h3 id="2-Running"><a href="#2-Running" class="headerlink" title="2. Running"></a><strong>2. Running</strong></h3><p><strong>解释</strong>：Pod 中的所有容器已启动并正在运行。<br><strong>可能原因</strong>：</p>
<ul>
<li>一切正常，Pod 正在按预期工作。  </li>
<li>若部分容器不断重启，则可能与健康检查失败有关（检查 Liveness 和 Readiness Probes）。</li>
</ul>
<hr>
<h3 id="3-CrashLoopBackOff"><a href="#3-CrashLoopBackOff" class="headerlink" title="3. CrashLoopBackOff"></a><strong>3. CrashLoopBackOff</strong></h3><p><strong>解释</strong>：容器在启动后不断崩溃，Kubelet 正在尝试重启它。<br><strong>可能原因</strong>：</p>
<ul>
<li>应用程序的错误配置或依赖缺失导致容器崩溃。  </li>
<li>容器中的应用程序无法正确初始化（可能因为端口占用或数据库连接失败）。  </li>
<li>Liveness Probe 检查失败导致 Kubelet 不断重启容器。</li>
</ul>
<hr>
<h3 id="4-ImagePullBackOff"><a href="#4-ImagePullBackOff" class="headerlink" title="4. ImagePullBackOff"></a><strong>4. ImagePullBackOff</strong></h3><p><strong>解释</strong>：Kubernetes 无法拉取容器镜像，正在等待重试。<br><strong>可能原因</strong>：</p>
<ul>
<li>镜像名或版本标记（tag）错误。  </li>
<li>镜像仓库不可访问（网络问题或仓库服务中断）。  </li>
<li>私有镜像仓库的认证失败（未正确配置 Secret）。</li>
</ul>
<hr>
<h3 id="5-ErrImagePull"><a href="#5-ErrImagePull" class="headerlink" title="5. ErrImagePull"></a><strong>5. ErrImagePull</strong></h3><p><strong>解释</strong>：尝试拉取镜像时发生错误。<br><strong>可能原因</strong>：</p>
<ul>
<li>镜像不存在于指定的仓库中。  </li>
<li>镜像仓库地址错误或不可访问。  </li>
<li>网络问题导致拉取失败。</li>
</ul>
<hr>
<h3 id="6-ErrImageNeverPull"><a href="#6-ErrImageNeverPull" class="headerlink" title="6. ErrImageNeverPull"></a><strong>6. ErrImageNeverPull</strong></h3><p><strong>解释</strong>：镜像策略被设置为 <code>ImagePullPolicy: Never</code>，但镜像在本地不存在。<br><strong>可能原因</strong>：</p>
<ul>
<li>配置错误导致 Kubernetes 无法从本地找到镜像。  </li>
<li>需要将拉取策略设置为 <code>IfNotPresent</code> 或 <code>Always</code>。</li>
</ul>
<hr>
<h3 id="7-Completed"><a href="#7-Completed" class="headerlink" title="7. Completed"></a><strong>7. Completed</strong></h3><p><strong>解释</strong>：Pod 中的所有容器正常终止，且没有重启策略（适用于 <strong>Job</strong> 和 <strong>CronJob</strong>）。<br><strong>可能原因</strong>：</p>
<ul>
<li>容器执行的任务已完成，Pod 正常退出。  </li>
<li>Job 或 CronJob 工作负载按计划执行结束。</li>
</ul>
<hr>
<h3 id="8-Terminating"><a href="#8-Terminating" class="headerlink" title="8. Terminating"></a><strong>8. Terminating</strong></h3><p><strong>解释</strong>：Pod 正在终止，但未在规定时间内结束。<br><strong>可能原因</strong>：</p>
<ul>
<li>Pod 中的进程未响应 SIGTERM 信号。  </li>
<li>容器内进程未正确设置退出钩子（如未处理 terminationGracePeriodSeconds）。  </li>
<li>挂载的 Volume 无法及时卸载。</li>
</ul>
<hr>
<h3 id="9-Unknown"><a href="#9-Unknown" class="headerlink" title="9. Unknown"></a><strong>9. Unknown</strong></h3><p><strong>解释</strong>：Pod 的状态无法从 API 服务器获取。<br><strong>可能原因</strong>：</p>
<ul>
<li>节点可能与 API 服务器失去连接（网络问题或节点崩溃）。  </li>
<li>etcd 数据库不稳定，导致状态获取失败。</li>
</ul>
<hr>
<h3 id="10-Failed"><a href="#10-Failed" class="headerlink" title="10. Failed"></a><strong>10. Failed</strong></h3><p><strong>解释</strong>：Pod 中的所有容器都已终止，并且至少有一个容器以非 0 状态码退出。<br><strong>可能原因</strong>：</p>
<ul>
<li>容器内的应用程序发生崩溃。  </li>
<li>必要的依赖服务（如数据库或 API）不可用。  </li>
<li>Liveness Probe 检查失败后被 Kubernetes 终止。</li>
</ul>
<hr>
<h3 id="11-NodeAffinity-PodAffinity-Unsatisfied"><a href="#11-NodeAffinity-PodAffinity-Unsatisfied" class="headerlink" title="11. NodeAffinity&#x2F;PodAffinity Unsatisfied"></a><strong>11. NodeAffinity&#x2F;PodAffinity Unsatisfied</strong></h3><p><strong>解释</strong>：由于节点亲和性或 Pod 亲和性规则，Pod 无法被调度到任何节点上。<br><strong>可能原因</strong>：</p>
<ul>
<li>设置了严格的 NodeAffinity 或 PodAffinity，无法匹配任何可用节点。  </li>
<li>调度策略配置不当。</li>
</ul>
<hr>
<h3 id="12-OOMKilled-Out-of-Memory-Killed"><a href="#12-OOMKilled-Out-of-Memory-Killed" class="headerlink" title="12. OOMKilled (Out of Memory Killed)"></a><strong>12. OOMKilled (Out of Memory Killed)</strong></h3><p><strong>解释</strong>：由于容器超出分配的内存限制，被操作系统的 OOM（Out Of Memory）杀死。<br><strong>可能原因</strong>：</p>
<ul>
<li>容器请求的内存不足以满足其应用的需求。  </li>
<li>负载过高导致内存泄漏或突发增长。  </li>
<li>需要调整 <code>requests.memory</code> 和 <code>limits.memory</code>。</li>
</ul>
<hr>
<h3 id="13-Evicted"><a href="#13-Evicted" class="headerlink" title="13. Evicted"></a><strong>13. Evicted</strong></h3><p><strong>解释</strong>：由于节点资源不足，Pod 被驱逐（Eviction）。<br><strong>可能原因</strong>：</p>
<ul>
<li>节点内存、CPU 等资源不足。  </li>
<li>节点磁盘压力高导致驱逐。  </li>
<li>调度策略驱逐低优先级 Pod 以释放资源。</li>
</ul>
<hr>
<h3 id="14-ContainerCreating"><a href="#14-ContainerCreating" class="headerlink" title="14. ContainerCreating"></a><strong>14. ContainerCreating</strong></h3><p><strong>解释</strong>：Pod 的容器正在创建中，但尚未启动。<br><strong>可能原因</strong>：</p>
<ul>
<li>拉取镜像耗时较长。  </li>
<li>卷（Volume）未能及时挂载。  </li>
<li>网络插件问题导致容器未能启动。</li>
</ul>
<hr>
<h3 id="15-NotReady"><a href="#15-NotReady" class="headerlink" title="15. NotReady"></a><strong>15. NotReady</strong></h3><p><strong>解释</strong>：Pod 尚未准备好接受流量（Readiness Probe 失败）。<br><strong>可能原因</strong>：</p>
<ul>
<li>容器内的服务未能正常启动。  </li>
<li>Readiness Probe 配置不当或探测路径错误。  </li>
<li>依赖的外部服务未启动或不可访问。</li>
</ul>
<hr>
<h3 id="16-Waiting"><a href="#16-Waiting" class="headerlink" title="16. Waiting"></a><strong>16. Waiting</strong></h3><p><strong>解释</strong>：容器由于某些原因正在等待，并未真正运行。<br><strong>可能原因</strong>：</p>
<ul>
<li>等待 Volume 挂载或镜像拉取完成。  </li>
<li>等待依赖资源（如 ConfigMap 或 Secret）。  </li>
<li>等待调度器将其分配到节点上。</li>
</ul>
<hr>
<h2 id="总结与最佳实践"><a href="#总结与最佳实践" class="headerlink" title="总结与最佳实践"></a><strong>总结与最佳实践</strong></h2><ul>
<li><strong>监控和告警</strong>：使用监控工具（如 Prometheus 和 Grafana）实时监控 Pod 状态，及时发现问题。  </li>
<li><strong>日志分析</strong>：查看 Pod 和容器的日志来分析具体原因（<code>kubectl logs &lt;pod-name&gt;</code>）。  </li>
<li><strong>资源规划</strong>：合理设置 Pod 的资源请求和限制（requests&#x2F;limits），避免 OOM 和驱逐问题。  </li>
<li><strong>健康检查配置</strong>：配置合适的 Liveness 和 Readiness Probe，确保 Pod 正常运行和流量切换。  </li>
<li><strong>滚动升级策略</strong>：使用 Deployment 的滚动升级策略（RollingUpdate），避免大规模 Pod 重启。</li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>ab、wrk、wrk2使用</title>
    <url>/2024/11/01/ab%E3%80%81wrk%E3%80%81wrk2%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="使用脚本"><a href="#使用脚本" class="headerlink" title="使用脚本"></a>使用脚本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#安装ab、wrk或者wrk2工具</span><br><span class="line">#ab安装：</span><br><span class="line">#yum install -y httpd-utils</span><br><span class="line">#</span><br><span class="line">#wrk使用源码安装:</span><br><span class="line">#git clone git@github.com:wg/wrk.git --&gt; 解压---&gt; make --&gt; cp wrk /usr/local/bin</span><br><span class="line">#</span><br><span class="line">#wrk2使用</span><br><span class="line">#https://github.com/giltene/wrk2</span><br><span class="line">##注意安装：yum install -y openssl-devel</span><br><span class="line">#git clone git@github.com:giltene/wrk2.git --&gt; 解压---&gt; make --&gt; mv wrk wrk2 ---&gt;cp wrk2 /usr/local/bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ab test config</span><br><span class="line">AB_CONCURRENT_REQUESTS=1000</span><br><span class="line">AB_TIME_OUT=180</span><br><span class="line">AB_TOTAL_REQUESTS=1000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#wrk test config</span><br><span class="line">WRK_THREADS=48</span><br><span class="line">WRK_CONCURRENT_REQUEST=48</span><br><span class="line">WRK_DURATION=180</span><br><span class="line">WRK2_REQUEST_QPS=18500</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ingress-nginx info</span><br><span class="line">NAMESPACE=&quot;ingress-nginx&quot;</span><br><span class="line">DEPLOYMENT_NAME=&quot;ingress-nginx-controller&quot;</span><br><span class="line"></span><br><span class="line">HEADER=&quot;\&quot;host:xxx.xxx.xxx.com\&quot;&quot;</span><br><span class="line">podIP=`kubectl get pods -n ingress-nginx -o yaml | grep &quot;podIP:&quot; | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">URL=&quot;http://$podIP:80/&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#检查是否安装了相关命令</span><br><span class="line">require_command=(ab kubectl)</span><br><span class="line">checkRequireCMD()</span><br><span class="line">&#123;</span><br><span class="line">    for cmd in $&#123;require_command[@]&#125;; do</span><br><span class="line">        if command -v $cmd &gt; /dev/null 2&gt;&amp;1; then</span><br><span class="line">            yellowPrint &quot;$cmd is available&quot;</span><br><span class="line">        else</span><br><span class="line">            redPrint &quot;exec failed! $cmd command is not installed, please install! &quot;</span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k8sInfo()</span><br><span class="line">&#123;</span><br><span class="line">	greenPrint &quot;k8s node info: &quot;</span><br><span class="line">	kubectl get nodes -o custom-columns=&quot;NODE:.metadata.name,CPU:.status.capacity.cpu,MEMORY:.status.capacity.memory,ALLOCATABLE_CPU:.status.allocatable.cpu,ALLOCATABLE_MEMORY:.status.allocatable.memory&quot;</span><br><span class="line"></span><br><span class="line">	yellowPrint &quot;ingress nginx controller pod info:&quot;</span><br><span class="line">	kubectl get pods -n $NAMESPACE -o custom-columns=&quot;NAME:.metadata.name,CPU_REQUEST:.spec.containers[*].resources.requests.cpu,MEM_REQUEST:.spec.containers[*].resources.requests.memory,CPU_LIMIT:.spec.containers[*].resources.limits.cpu,MEM_LIMIT:.spec.containers[*].resources.limits.memory&quot;</span><br><span class="line"></span><br><span class="line">	yellowPrint &quot;pod network info:&quot;</span><br><span class="line">	kubectl get pods -n $NAMESPACE -o custom-columns=&quot;POD:.metadata.name,HOST_NETWORK:.spec.hostNetwork,POD_IP:.status.podIP,HOST_IP:.status.hostIP&quot;</span><br><span class="line"></span><br><span class="line">	yellowPrint &quot;current localhost ip:&quot;</span><br><span class="line">	hostname -i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ab test</span><br><span class="line">abBenchTest()</span><br><span class="line">&#123;</span><br><span class="line">	for times in &#123;1..3&#125;; do</span><br><span class="line">		greenPrint &quot;times: $times --- ab -c $AB_CONCURRENT_REQUESTS -t $AB_TIME_OUT -n $AB_TOTAL_REQUESTS  -H $HEADER $URL&quot;</span><br><span class="line">		ab -c $AB_CONCURRENT_REQUESTS -t $AB_TIME_OUT -n $AB_TOTAL_REQUESTS  -H $HEADER $URL</span><br><span class="line">		greenPrint &quot;sleep 1s ...&quot;</span><br><span class="line">		sleep 1</span><br><span class="line">	done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wrkTest()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	for times in &#123;1..3&#125;; do</span><br><span class="line">		greenPrint &quot;times: $times --- wrk -t $WRK_THREADS -c $WRK_CONCURRENT_REQUEST -d $WRK_DURATION --latency -H $HEADER $URL&quot;</span><br><span class="line">		wrk -t $WRK_THREADS -c $WRK_CONCURRENT_REQUEST -d $WRK_DURATION --latency -H $HEADER $URL</span><br><span class="line">	done</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wrk2Test()</span><br><span class="line">&#123;</span><br><span class="line">	for times in &#123;1..3&#125;; do</span><br><span class="line">		greenPrint &quot;times: $times --- wrk2 -t $WRK_THREADS -c $WRK_CONCURRENT_REQUEST -d $WRK_DURATION -R $WRK2_REQUEST_QPS --latency -H $HEADER $URL&quot;</span><br><span class="line">		wrk2 -t $WRK_THREADS -c $WRK_CONCURRENT_REQUEST -d $WRK_DURATION -R $WRK2_REQUEST_QPS --latency -H $HEADER $URL</span><br><span class="line">	done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义颜色代码</span><br><span class="line">RED=&#x27;\033[0;31m&#x27;</span><br><span class="line">GREEN=&#x27;\033[0;32m&#x27;</span><br><span class="line">YELLOW=&#x27;\033[0;33m&#x27;</span><br><span class="line">BLUE=&#x27;\033[0;34m&#x27;</span><br><span class="line">NC=&#x27;\033[0m&#x27; # 无颜色</span><br><span class="line"></span><br><span class="line"># 红色打印函数</span><br><span class="line">redPrint()</span><br><span class="line">&#123;</span><br><span class="line">    echo -e &quot;$&#123;RED&#125;$1$&#123;NC&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 绿色打印函数</span><br><span class="line">greenPrint()</span><br><span class="line">&#123;</span><br><span class="line">    echo -e &quot;$&#123;GREEN&#125;$1$&#123;NC&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 黄色打印函数</span><br><span class="line">yellowPrint()</span><br><span class="line">&#123;</span><br><span class="line">    echo -e &quot;$&#123;YELLOW&#125;$1$&#123;NC&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 蓝色打印函数</span><br><span class="line">bluePrint()</span><br><span class="line">&#123;</span><br><span class="line">    echo -e &quot;$&#123;BLUE&#125;$1$&#123;NC&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">selectAction()</span><br><span class="line">&#123;</span><br><span class="line">    # 提示信息</span><br><span class="line">    notice=&quot;$&#123;RED&#125;请根据以下步骤执行相关功能：$&#123;NC&#125;&quot;</span><br><span class="line">    # 主程序</span><br><span class="line">    echo -e &quot;$notice&quot;</span><br><span class="line"></span><br><span class="line">    PS3=&quot;请选择步骤编号: &quot;</span><br><span class="line"></span><br><span class="line">    options=(</span><br><span class="line">    &quot; -- 使用ab测试&quot;</span><br><span class="line">    &quot; -- 使用wrk测试&quot;</span><br><span class="line">    &quot; -- 使用wrk2测试&quot;</span><br><span class="line">    &quot; -- 退出&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">    select opt in &quot;$&#123;options[@]&#125;&quot;</span><br><span class="line">    do</span><br><span class="line">        case $REPLY in</span><br><span class="line">            1)</span><br><span class="line">				greenPrint &quot;检查必要的压测工具：&quot;</span><br><span class="line">				checkRequireCMD</span><br><span class="line">				greenPrint &quot;k8s集群信息：&quot;</span><br><span class="line">				k8sInfo</span><br><span class="line"></span><br><span class="line">				abBenchTest</span><br><span class="line">				break;;</span><br><span class="line">            2)</span><br><span class="line">				greenPrint &quot;检查必要的压测工具：&quot;</span><br><span class="line">				checkRequireCMD</span><br><span class="line">				greenPrint &quot;k8s集群信息：&quot;</span><br><span class="line">				k8sInfo</span><br><span class="line"></span><br><span class="line">				wrkTest</span><br><span class="line"></span><br><span class="line">				break;;</span><br><span class="line">			 3)</span><br><span class="line">				greenPrint &quot;检查必要的压测工具：&quot;</span><br><span class="line">				checkRequireCMD</span><br><span class="line">				greenPrint &quot;k8s集群信息：&quot;</span><br><span class="line">				k8sInfo</span><br><span class="line"></span><br><span class="line">				wrk2Test</span><br><span class="line"></span><br><span class="line">				break;;</span><br><span class="line"></span><br><span class="line">			4)</span><br><span class="line">			    echo &quot;退出&quot;</span><br><span class="line">			    break;;</span><br><span class="line">			*)</span><br><span class="line">			    echo &quot;无效的选择，请输入 1 到 4 之间的数字。&quot;</span><br><span class="line">			    break;;</span><br><span class="line">        esac</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">selectAction</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>controller暴露metrics到prometheus接收数据的过程</title>
    <url>/2024/12/19/controller%E6%9A%B4%E9%9C%B2metrics%E5%88%B0prometheus%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><h3 id="①-controller暴露指标地址"><a href="#①-controller暴露指标地址" class="headerlink" title="① controller暴露指标地址"></a>① controller暴露指标地址</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主机ip：10.16.217.100</span><br><span class="line">curl http://10.16.217.100:8080/metrics | grep layer</span><br><span class="line">或者</span><br><span class="line">curl http://localhost:8080/metrics | grep layer</span><br></pre></td></tr></table></figure>
<h3 id="②-prometheus-yaml"><a href="#②-prometheus-yaml" class="headerlink" title="② prometheus.yaml"></a>② prometheus.yaml</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval: 15s </span><br><span class="line">  external_labels:</span><br><span class="line">    monitor: &#x27;codelab-monitor&#x27;</span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;prometheus&#x27;</span><br><span class="line">    scrape_interval: 5s</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&#x27;10.16.217.100:8080&#x27;]</span><br></pre></td></tr></table></figure>
<h3 id="③-docker-compose-启动prometheus容器与grafana"><a href="#③-docker-compose-启动prometheus容器与grafana" class="headerlink" title="③ docker-compose 启动prometheus容器与grafana"></a>③ docker-compose 启动prometheus容器与grafana</h3><ul>
<li>启动：docker-compose -f .&#x2F;docker-compose.yaml up -d</li>
<li>重启：docker-compose -f .&#x2F;docker-compose.yaml restart</li>
<li>查看：docker-compose -f .&#x2F;docker-compose.yaml ps</li>
<li>停止：docker-compose -f .&#x2F;docker-compose.yaml down<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3.8&#x27;</span><br><span class="line">services:</span><br><span class="line">  prometheus:</span><br><span class="line">    image: prom/prometheus</span><br><span class="line">    container_name: prometheus</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;9090:9090&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./prometheus.yml:/etc/prometheus/prometheus.yml</span><br><span class="line"></span><br><span class="line">  grafana:</span><br><span class="line">    image: grafana/grafana</span><br><span class="line">    container_name: grafana</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3000:3000&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="验证数据采集"><a href="#验证数据采集" class="headerlink" title="验证数据采集"></a>验证数据采集</h2><h3 id="1-验证-Prometheus-是否抓取到目标的指标"><a href="#1-验证-Prometheus-是否抓取到目标的指标" class="headerlink" title="1. 验证 Prometheus 是否抓取到目标的指标"></a><strong>1. 验证 Prometheus 是否抓取到目标的指标</strong></h3><ol>
<li><p><strong>检查 Prometheus 的 Targets 页面</strong></p>
<ul>
<li>在浏览器中访问 <code>http://localhost:9090/targets</code>。</li>
<li>找到名为 <code>prometheus</code> 的抓取任务。</li>
<li>检查 <code>State</code> 是否为 <code>UP</code>：<ul>
<li>如果是 <code>UP</code>，说明 Prometheus 成功抓取了目标地址的指标。</li>
<li>如果是 <code>DOWN</code>，说明 Prometheus 无法访问目标地址（可能是网络或配置问题）。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>查看 Prometheus 是否抓取到目标的指标</strong></p>
<ul>
<li>在 Prometheus 的 Query 页面（<code>http://localhost:9090/graph</code>）运行以下查询：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">up&#123;job=&quot;prometheus&quot;&#125;</span><br></pre></td></tr></table></figure></li>
<li>返回值为 <code>1</code> 表示 Prometheus 能正常访问目标。</li>
<li>如果返回值为 <code>0</code>，需要检查目标地址是否正确，或者 Prometheus 是否能够访问 <code>10.16.217.100:8080</code>。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="2-验证目标是否暴露了-layer-数据"><a href="#2-验证目标是否暴露了-layer-数据" class="headerlink" title="2. 验证目标是否暴露了 layer 数据"></a><strong>2. 验证目标是否暴露了 <code>layer</code> 数据</strong></h3><ol>
<li><p><strong>直接访问目标的 <code>/metrics</code></strong></p>
<ul>
<li>在容器外部运行：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://10.16.217.100:8080/metrics | grep layer</span><br></pre></td></tr></table></figure></li>
<li>确保目标地址上有 <code>layer</code> 相关的数据。</li>
<li>如果这里没有 <code>layer</code> 数据，说明目标程序没有暴露相关指标，问题在目标程序。</li>
</ul>
</li>
<li><p><strong>验证 Prometheus 抓取的原始数据</strong></p>
<ul>
<li>在 Prometheus 的 Query 页面运行以下查询：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;job=&quot;prometheus&quot;&#125;</span><br></pre></td></tr></table></figure></li>
<li>这会列出 Prometheus 从目标抓取的所有指标。</li>
<li>检查是否有与 <code>layer</code> 相关的指标。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="3-检查-Docker-容器的网络配置"><a href="#3-检查-Docker-容器的网络配置" class="headerlink" title="3. 检查 Docker 容器的网络配置"></a><strong>3. 检查 Docker 容器的网络配置</strong></h3><ol>
<li><p><strong>验证容器是否能访问目标地址</strong></p>
<ul>
<li>进入 Prometheus 容器：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container_id&gt; sh</span><br></pre></td></tr></table></figure></li>
<li>在容器内部运行：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://10.16.217.100:8080/metrics | grep layer</span><br></pre></td></tr></table></figure></li>
<li>如果没有返回数据，可能是 Docker 容器的网络配置问题：<ul>
<li>确保 Docker 容器和主机在同一网络中。</li>
<li>如果目标是本地服务，尝试使用 <code>host.docker.internal</code> 替代 IP 地址。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>使用 <code>host</code> 网络模式</strong></p>
<ul>
<li>如果目标服务运行在主机上，可以使用 Docker 的 <code>host</code> 网络模式：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> --network host -v /root/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus</span><br></pre></td></tr></table></figure></li>
<li>这会让容器直接使用主机网络，避免网络隔离问题。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="4-检查-Prometheus-配置文件是否正确"><a href="#4-检查-Prometheus-配置文件是否正确" class="headerlink" title="4. 检查 Prometheus 配置文件是否正确"></a><strong>4. 检查 Prometheus 配置文件是否正确</strong></h3><ol>
<li><p><strong>验证配置文件语法</strong></p>
<ul>
<li>使用 <code>promtool</code> 检查配置文件：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#wget https://github.com/prometheus/prometheus/releases/download/v3.0.1/prometheus-3.0.1.linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment">#tar zxvf prometheus-3.0.1.linux-amd64.tar.gz -C /usr/local</span></span><br><span class="line"></span><br><span class="line">promtool check config /root/prometheus/prometheus.yml</span><br></pre></td></tr></table></figure></li>
<li>确保配置文件没有语法错误。</li>
</ul>
</li>
<li><p><strong>验证 <code>scrape_configs</code> 的目标地址</strong></p>
<ul>
<li>确保 <code>10.16.217.100:8080</code> 是正确的目标地址。</li>
<li>如果目标服务运行在本地主机，尝试使用 <code>localhost:8080</code> 替代 IP 地址。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="5-检查-Prometheus-抓取日志"><a href="#5-检查-Prometheus-抓取日志" class="headerlink" title="5. 检查 Prometheus 抓取日志"></a><strong>5. 检查 Prometheus 抓取日志</strong></h3><p>Prometheus 会记录抓取目标时的日志信息，可以通过以下方式查看：</p>
<ol>
<li><p><strong>访问 Prometheus 的日志页面</strong></p>
<ul>
<li>在 Prometheus Web 界面中访问 <code>http://localhost:9090/status</code>。</li>
<li>检查是否有与抓取目标相关的错误日志。</li>
</ul>
</li>
<li><p><strong>查看容器日志</strong></p>
<ul>
<li>运行以下命令查看 Prometheus 容器的日志：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs &lt;container_id&gt;</span><br></pre></td></tr></table></figure></li>
<li>检查是否有关于 <code>10.16.217.100:8080</code> 的抓取错误。</li>
</ul>
</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>expect跳转tips</title>
    <url>/2024/12/16/expect%E8%B7%B3%E8%BD%ACtips/</url>
    <content><![CDATA[<h2 id="一、单次跳转"><a href="#一、单次跳转" class="headerlink" title="一、单次跳转"></a>一、单次跳转</h2><ul>
<li>① shell脚本拼凑登录信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/opt/homebrew/bin/bash</span><br><span class="line">###---------------###</span><br><span class="line">#mac安装新版本bash: 支持declare -A xxx</span><br><span class="line">#brew install bash</span><br><span class="line">#</span><br><span class="line">###---------------###</span><br><span class="line"></span><br><span class="line"># 全局变量</span><br><span class="line">PORT=&quot;22&quot;</span><br><span class="line">USER=&quot;xxx&quot;</span><br><span class="line">PASSWORD=&quot;xxx&quot;</span><br><span class="line"></span><br><span class="line"># ANSI 转义码定义颜色</span><br><span class="line">RESET=&quot;\033[0m&quot;</span><br><span class="line">RED=&quot;\033[31m&quot;</span><br><span class="line">GREEN=&quot;\033[32m&quot;</span><br><span class="line">YELLOW=&quot;\033[33m&quot;</span><br><span class="line"></span><br><span class="line"># 函数：打印日志（支持颜色）</span><br><span class="line">log_message() &#123;</span><br><span class="line">    local level=$1</span><br><span class="line">    local message=$2</span><br><span class="line">    local color</span><br><span class="line"></span><br><span class="line">    case $level in</span><br><span class="line">        INFO)</span><br><span class="line">            color=$GREEN</span><br><span class="line">            ;;</span><br><span class="line">        WARN)</span><br><span class="line">            color=$YELLOW</span><br><span class="line">            ;;</span><br><span class="line">        ERROR)</span><br><span class="line">            color=$RED</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            color=$RESET</span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line"></span><br><span class="line">    echo -e &quot;$(date &#x27;+%Y-%m-%dT%H:%M:%S&#x27;) [$&#123;color&#125;$&#123;level&#125;$&#123;RESET&#125;] $message&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 函数：定义 IP 映射</span><br><span class="line">declare -A IP_MAP</span><br><span class="line">IP_MAP[&quot;dev_194&quot;]=&quot;10.xxx.xxx.194&quot;</span><br><span class="line">IP_MAP[&quot;jump_113&quot;]=&quot;10.xxx.xxx.113&quot;</span><br><span class="line"></span><br><span class="line"># 函数：获取 IP 地址</span><br><span class="line">get_ip() &#123;</span><br><span class="line">    local key=&quot;$&#123;1&#125;_$&#123;2&#125;&quot;</span><br><span class="line">    echo &quot;$&#123;IP_MAP[$key]&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 参数检查</span><br><span class="line">if [[ $# -lt 2 ]]; then</span><br><span class="line">    log_message &quot;ERROR&quot; &quot;Usage: $0 &lt;environment&gt; &lt;option&gt;&quot;</span><br><span class="line">    log_message &quot;INFO&quot; &quot;Examples: $0 dev 194&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 获取参数</span><br><span class="line">ENVIRONMENT=$1</span><br><span class="line">OPTION=$2</span><br><span class="line"></span><br><span class="line"># 获取目标 IP</span><br><span class="line">IP=$(get_ip &quot;$ENVIRONMENT&quot; &quot;$OPTION&quot;)</span><br><span class="line">echo $IP</span><br><span class="line">if [[ -z $IP ]]; then</span><br><span class="line">    log_message &quot;ERROR&quot; &quot;Invalid environment or option: $ENVIRONMENT $OPTION&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 调用 Expect 脚本</span><br><span class="line">log_message &quot;INFO&quot; &quot;Connecting to $IP with user $USER on port $PORT&quot;</span><br><span class="line"></span><br><span class="line">expect /Users/xxx/shell/expectLogin.exp &quot;$IP&quot; &quot;$PORT&quot; &quot;$USER&quot; &quot;$PASSWORD&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>② 配合的expectLogin.exp脚本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/expect</span><br><span class="line"></span><br><span class="line"># 获取参数</span><br><span class="line">set ip [lindex $argv 0]</span><br><span class="line">set port [lindex $argv 1]</span><br><span class="line">set user [lindex $argv 2]</span><br><span class="line">set password [lindex $argv 3]</span><br><span class="line"></span><br><span class="line"># 设置超时时间</span><br><span class="line">set timeout 10</span><br><span class="line"></span><br><span class="line"># 打印日志</span><br><span class="line">puts &quot;[clock format [clock seconds] -format %Y-%m-%dT%H:%M:%S] Connecting to $ip&quot;</span><br><span class="line"></span><br><span class="line"># 执行 SSH 登录</span><br><span class="line">spawn ssh -p $port $user@$ip</span><br><span class="line">expect &#123;</span><br><span class="line">    &quot;*yes/no&quot; &#123;</span><br><span class="line">        send &quot;yes\r&quot;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line">    &quot;*password:*&quot; &#123;</span><br><span class="line">        send &quot;$password\r&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    &quot;$&quot; &#123;</span><br><span class="line">	send &quot;\r&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 进入交互模式</span><br><span class="line">interact</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="两次跳转登录"><a href="#两次跳转登录" class="headerlink" title="两次跳转登录"></a>两次跳转登录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/expect</span><br><span class="line">#############################################</span><br><span class="line">#</span><br><span class="line">#脚本目的：从本地mac ---经跳板机---&gt; 跳到IDC主机</span><br><span class="line">#使用方法：</span><br><span class="line">#1、chmod +x jump.exp</span><br><span class="line">#2、可在.bash_profile 定义脚本别名 alias jump=&#x27;xxxx/jump.exp&#x27;</span><br><span class="line">#3、登录机器 jump &#123;hostname&#125;</span><br><span class="line">#############################################</span><br><span class="line"></span><br><span class="line">set port 22</span><br><span class="line">set user xxx</span><br><span class="line">set password xxx</span><br><span class="line">set jumper xxx</span><br><span class="line"></span><br><span class="line"># 定义登录主机名</span><br><span class="line">set hostname [lindex $argv 0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if &#123; $argc &lt; 1 &#125; &#123;</span><br><span class="line">    puts &quot;please input: jump &#123;hostname&#125; &quot;</span><br><span class="line">    exit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if &#123; $argc == 1 &#125; &#123;</span><br><span class="line"></span><br><span class="line">    # 关闭mac层连接的标准输出</span><br><span class="line">    log_user 0</span><br><span class="line"></span><br><span class="line">    #特殊处理主机,该主机配置了无密码登录，可以不再设置密码登录</span><br><span class="line">    if &#123;$hostname == $jumper&#125; &#123;</span><br><span class="line"></span><br><span class="line">        spawn ssh -p $port $user@$hostname</span><br><span class="line">        expect &#123;</span><br><span class="line">            &quot;*yes/no&quot; &#123; </span><br><span class="line">                send &quot;yes\r&quot;; exp_continue </span><br><span class="line">            &#125;</span><br><span class="line">            &quot;*password:*&quot; &#123; </span><br><span class="line">                send &quot;$password\r;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            &quot;$&quot; &#123;</span><br><span class="line">                send &quot;\r;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        # spawn 是 expect 环境的内部命令，它主要的功能是给 ssh 运行进程加个壳，用来传递交互指令。</span><br><span class="line">        spawn ssh -p $port $user@$jumper</span><br><span class="line"></span><br><span class="line">        # expect 也是 expect 环境的一个内部命令，用来判断上一个指令输入之后的得到输出结果是否包含 &quot;&quot; 双引号里的字符串，-re 表示通过正则来匹配。</span><br><span class="line">        # 如果是第一次登录，会出现 &quot;yes/no&quot; 的字符串，就发送（send）指令 &quot;yes\r&quot;，然后继续（exp_continue）。</span><br><span class="line">        expect &#123;</span><br><span class="line">            &quot;*yes/no&quot; &#123;    send &quot;yes\r&quot;; exp_continue &#125;</span><br><span class="line">            &quot;*password:*&quot; &#123;   send &quot;$password\r;&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 关闭mac层连接的标准输出</span><br><span class="line">        log_user 0</span><br><span class="line"></span><br><span class="line">        expect &quot;@&quot; &#123; send &quot;ssh -p $port $user@$hostname\r&quot;&#125;</span><br><span class="line">        expect &#123;</span><br><span class="line">            &quot;*yes/no&quot; &#123;    send &quot;yes\r&quot;; exp_continue &#125;</span><br><span class="line">            &quot;*password*&quot; &#123;   send &quot;$password\r;&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #保持交互状态，把控制权交给控制台。</span><br><span class="line">    interact</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>go tips</title>
    <url>/2022/04/27/go-tips/</url>
    <content><![CDATA[<h2 id="go基本类型"><a href="#go基本类型" class="headerlink" title="go基本类型"></a>go基本类型</h2><ol>
<li>基本类型：<ul>
<li>整型（int&#x2F;uint&#x2F;int8&#x2F;uint8&#x2F;int16&#x2F;uint16&#x2F;int32&#x2F;uint32&#x2F;int64&#x2F;uint64&#x2F;byte&#x2F;rune等）</li>
<li>浮点数（float32&#x2F;float64）</li>
<li>复数类型（complex64&#x2F;complex128）</li>
<li>字符串（string）</li>
</ul>
</li>
<li>复合类型（又叫聚合类型）：数组和结构体类型。</li>
<li>引用类型：切片（slice）、map、channel、指针。</li>
<li>接口类型：如error。</li>
</ol>
<h2 id="比较"><a href="#比较" class="headerlink" title="&#x3D;&#x3D; 比较"></a>&#x3D;&#x3D; 比较</h2><p><strong>&#x3D;&#x3D;操作最重要的一个前提是：两个操作数类型必须相同！类型必须相同！类型必须相同!</strong></p>
<p>关于引用类型，有两个比较特殊的规定：</p>
<ul>
<li>切片之间不允许比较。切片只能与nil值比较。</li>
<li>map之间不允许比较。map只能与nil值比较。</li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>helm使用教程</title>
    <url>/2024/11/07/helm%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#helm与k8s版本兼容匹配：https://helm.sh/zh/docs/topics/version_skew/</span></span><br><span class="line">wget https://get.helm.sh/helm-v3.15.3-linux-amd64.tar.gz</span><br><span class="line">tar  zxvf helm-v3.15.3-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> linux-amd64/helm /usr/local/bin/</span><br><span class="line">helm version</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除Helm使用时关于kubernetes文件的警告</span></span><br><span class="line"><span class="built_in">chmod</span> g-rw /root/.kube/config</span><br><span class="line"><span class="built_in">chmod</span> o-r /root/.kube/config</span><br></pre></td></tr></table></figure>

<h2 id="缓存路径"><a href="#缓存路径" class="headerlink" title="缓存路径"></a>缓存路径</h2><table>
<thead>
<tr>
<th>操作系统</th>
<th>缓存路径</th>
<th>配置路径</th>
<th>数据路径</th>
</tr>
</thead>
<tbody><tr>
<td>Linux</td>
<td><code>$HOME/.cache/helm</code></td>
<td><code>$HOME/.config/helm</code></td>
<td><code>$HOME/.local/share/helm</code></td>
</tr>
<tr>
<td>macOS</td>
<td><code>$HOME/Library/Caches/helm</code></td>
<td><code>$HOME/Library/Preferences/helm</code></td>
<td><code>$HOME/Library/helm</code></td>
</tr>
<tr>
<td>Windows</td>
<td><code>%TEMP%\helm</code></td>
<td><code>%APPDATA%\helm</code></td>
<td><code>%APPDATA%\helm</code></td>
</tr>
</tbody></table>
<h2 id="添加仓库"><a href="#添加仓库" class="headerlink" title="添加仓库"></a>添加仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#常见仓库</span></span><br><span class="line">helm repo add bitnami <span class="string">&quot;https://helm-charts.itboon.top/bitnami&quot;</span></span><br><span class="line">helm repo add grafana <span class="string">&quot;https://helm-charts.itboon.top/grafana&quot;</span></span><br><span class="line">helm repo add prometheus-community <span class="string">&quot;https://helm-charts.itboon.top/prometheus-community&quot;</span></span><br><span class="line">helm repo add ingress-nginx <span class="string">&quot;https://helm-charts.itboon.top/ingress-nginx&quot;</span></span><br><span class="line">helm repo add aliyun  https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class="line"></span><br><span class="line">helm repo list</span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure>

<h2 id="搜索与下载"><a href="#搜索与下载" class="headerlink" title="搜索与下载"></a>搜索与下载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm search repo bitnami</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询nginx相关的包</span></span><br><span class="line">helm search repo  bitnami/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询版本</span></span><br><span class="line">helm search repo bitnami/nginx -l</span><br><span class="line"></span><br><span class="line">helm pull bitnami/nginx --version 18.1.7</span><br><span class="line"><span class="comment">#校验打包</span></span><br><span class="line">helm lint --strict nginx-18.1.7.tgz</span><br><span class="line">tar zxvf nginx-18.1.7.tgz</span><br><span class="line">tree -L 1 nginx</span><br><span class="line">nginx</span><br><span class="line">|-- Chart.lock</span><br><span class="line">|-- Chart.yaml</span><br><span class="line">|-- README.md</span><br><span class="line">|-- charts</span><br><span class="line">|-- templates</span><br><span class="line">|-- values.schema.json</span><br><span class="line">`-- values.yaml</span><br></pre></td></tr></table></figure>

<h3 id="编辑values-yaml-与Chart-yaml的镜像仓库"><a href="#编辑values-yaml-与Chart-yaml的镜像仓库" class="headerlink" title="编辑values.yaml 与Chart.yaml的镜像仓库"></a>编辑values.yaml 与Chart.yaml的镜像仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -rn <span class="string">&quot;image:&quot;</span></span><br><span class="line"><span class="comment">#cat Chart.yaml | grep &quot;image:&quot;</span></span><br><span class="line"><span class="comment">#将docker.io改为:swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io</span></span><br></pre></td></tr></table></figure>

<h3 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#渲染：测试模板渲染的内容但又不想安装任何实际应用时</span></span><br><span class="line"><span class="comment">#helm install webapp --debug --dry-run ./nginx</span></span><br><span class="line">helm install webapp . --<span class="built_in">set</span> service.type=NodePort -n chart-demo</span><br><span class="line"></span><br><span class="line">helm status webapp  -n chart-demo</span><br><span class="line"></span><br><span class="line">kubectl get all -n chart-demo</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印releases</span></span><br><span class="line">helm list -n chart-demo</span><br><span class="line"></span><br><span class="line">helm uninstall wabapp -n chart-demo</span><br></pre></td></tr></table></figure>

<h2 id="创建教程"><a href="#创建教程" class="headerlink" title="创建教程"></a>创建教程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#参数含义</span><br><span class="line">https://helm.sh/zh/docs/topics/charts/</span><br><span class="line"></span><br><span class="line">#创建与安装</span><br><span class="line">https://helm.sh/zh/docs/chart_template_guide/getting_started/</span><br></pre></td></tr></table></figure>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建</span><br><span class="line">helm create mychart</span><br><span class="line"></span><br><span class="line">#helm install full-coral ./mychart</span><br><span class="line"></span><br><span class="line">#查看生成的完整的YAML</span><br><span class="line">helm get manifest full-coral</span><br><span class="line"></span><br><span class="line">#卸载</span><br><span class="line">helm uninstall full-coral</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#想测试模板渲染的内容但又不想安装任何实际应用</span><br><span class="line">helm install --debug --dry-run goodly-guppy ./mychart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">helm install --dry-run --disable-openapi-validation moldy-jaguar ./mychart</span><br><span class="line"></span><br><span class="line">以下命令有助于调试：</span><br><span class="line"></span><br><span class="line">helm lint 是验证chart是否遵循最佳实践的首选工具。</span><br><span class="line">helm template --debug 在本地测试渲染chart模板。</span><br><span class="line">helm install --dry-run --debug：我们已经看到过这个技巧了，这是让服务器渲染模板的好方法，然后返回生成的清单文件。</span><br><span class="line">helm get manifest: 这是查看安装在服务器上的模板的好方法。</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Helm-针对集群的常用操作命令"><a href="#Helm-针对集群的常用操作命令" class="headerlink" title="Helm 针对集群的常用操作命令"></a>Helm 针对集群的常用操作命令</h3><h4 id="安装-Chart"><a href="#安装-Chart" class="headerlink" title="安装 Chart"></a><strong>安装 Chart</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm install &lt;release-name&gt; &lt;chart-path-or-name&gt; [options]</span><br></pre></td></tr></table></figure>
<ul>
<li>示例：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm install my-app ./my-chart</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="卸载-Chart"><a href="#卸载-Chart" class="headerlink" title="卸载 Chart"></a><strong>卸载 Chart</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm uninstall &lt;release-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>示例：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm uninstall my-app -n default</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="升级-Chart"><a href="#升级-Chart" class="headerlink" title="升级 Chart"></a><strong>升级 Chart</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm upgrade &lt;release-name&gt; &lt;chart-path-or-name&gt; [options]</span><br></pre></td></tr></table></figure>
<ul>
<li>示例：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm upgrade my-app ./my-chart</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="回滚到之前的版本"><a href="#回滚到之前的版本" class="headerlink" title="回滚到之前的版本"></a><strong>回滚到之前的版本</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm rollback &lt;release-name&gt; &lt;revision&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>示例：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm rollback my-app 2 -n default</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="查看-Release-历史"><a href="#查看-Release-历史" class="headerlink" title="查看 Release 历史"></a><strong>查看 Release 历史</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm <span class="built_in">history</span> &lt;release-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>示例：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm <span class="built_in">history</span> my-app -n default</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="测试-Chart"><a href="#测试-Chart" class="headerlink" title="测试 Chart"></a><strong>测试 Chart</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm <span class="built_in">test</span> &lt;release-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>示例：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm <span class="built_in">test</span> my-app -n default</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="渲染-Chart-模板"><a href="#渲染-Chart-模板" class="headerlink" title="渲染 Chart 模板"></a><strong>渲染 Chart 模板</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm template &lt;chart-path-or-name&gt; [options]</span><br></pre></td></tr></table></figure>
<ul>
<li>示例：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm template ./my-chart</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="调试安装或升级"><a href="#调试安装或升级" class="headerlink" title="调试安装或升级"></a><strong>调试安装或升级</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm install --debug --dry-run &lt;release-name&gt; &lt;chart-path-or-name&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>示例：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm install --debug --dry-run my-app ./my-chart</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="导出-Release-的配置"><a href="#导出-Release-的配置" class="headerlink" title="导出 Release 的配置"></a><strong>导出 Release 的配置</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm get values &lt;release-name&gt; -n &lt;namespace&gt; [options]</span><br></pre></td></tr></table></figure>
<ul>
<li>示例：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm get values my-app -n default</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="检查-Chart-的版本更新"><a href="#检查-Chart-的版本更新" class="headerlink" title="检查 Chart 的版本更新"></a><strong>检查 Chart 的版本更新</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm search repo &lt;chart-name&gt; --versions</span><br></pre></td></tr></table></figure>
<ul>
<li>示例：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm search repo nginx --versions</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="添加或更新-Chart-仓库"><a href="#添加或更新-Chart-仓库" class="headerlink" title="添加或更新 Chart 仓库"></a><strong>添加或更新 Chart 仓库</strong></h4><ul>
<li>添加仓库：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm repo add &lt;repo-name&gt; &lt;repo-url&gt;</span><br></pre></td></tr></table></figure></li>
<li>更新仓库：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm repo update</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="推荐-Helm-工作流"><a href="#推荐-Helm-工作流" class="headerlink" title="推荐 Helm 工作流"></a>推荐 Helm 工作流</h3><ol>
<li><p><strong>列出已安装的 Releases</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm list -A</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>检查某个 Release 的状态</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm status &lt;release-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>备份配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm get values &lt;release-name&gt; -n &lt;namespace&gt; &gt; backup.yaml</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>升级或回滚</strong></p>
<ul>
<li>升级：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm upgrade &lt;release-name&gt; &lt;chart-path-or-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure></li>
<li>回滚：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm rollback &lt;release-name&gt; &lt;revision&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>hexo建站</title>
    <url>/2021/11/05/hexo_env/</url>
    <content><![CDATA[<h2 id="一、nodejs-安装"><a href="#一、nodejs-安装" class="headerlink" title="一、nodejs 安装"></a>一、nodejs 安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官网: https://nodejs.org/en/</span><br></pre></td></tr></table></figure>

<h2 id="二、hexo安装"><a href="#二、hexo安装" class="headerlink" title="二、hexo安装"></a>二、hexo安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官网：https://hexo.io/zh-cn/</span><br><span class="line">1. npm install hexo-cli -g</span><br><span class="line">2. hexo init hexo  #初始化博客</span><br><span class="line">3. cd hexo</span><br><span class="line">4. hexo server   #启动服务</span><br><span class="line"></span><br><span class="line">#升级命令：</span><br><span class="line">npm update hexo-cli -g</span><br></pre></td></tr></table></figure>

<h2 id="三、生成文档"><a href="#三、生成文档" class="headerlink" title="三、生成文档"></a>三、生成文档</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. cd hexo</span><br><span class="line">2. hexo n myTest  # 建文章,同命令：hexo new myTest</span><br><span class="line">3. hexo g         #生成，同命令：hexo generate</span><br><span class="line">4. hexo s         #启动服务，可预览</span><br><span class="line"></span><br><span class="line">5. hexo d          #部署,需要配置github，hexo deploy</span><br></pre></td></tr></table></figure>

<h2 id="四、部署到github"><a href="#四、部署到github" class="headerlink" title="四、部署到github"></a>四、部署到github</h2><ul>
<li>部署文档：<a href="https://hexo.io/docs/one-command-deployment">https://hexo.io/docs/one-command-deployment</a></li>
<li>github新建项目：shispring.github.io</li>
<li>编辑配置文件：vim hexo&#x2F;_config.yaml<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:shispring/shispring.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li>
<li>npm install hexo-deployer-git –save</li>
<li>hexo g</li>
<li>hexo d</li>
</ul>
<h2 id="五、更换主题"><a href="#五、更换主题" class="headerlink" title="五、更换主题"></a>五、更换主题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">详情请查看：</span><br><span class="line">https://github.com/theme-next/hexo-theme-next</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>hpa pod计算</title>
    <url>/2024/10/21/hpa-pod%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<p>在 Kubernetes 中配置基于 CPU 利用率的 Horizontal Pod Autoscaler (HPA) 策略时，扩展的 Pod 数量根据以下公式计算：</p>
<h3 id="HPA-计算扩展-Pod-数量的公式："><a href="#HPA-计算扩展-Pod-数量的公式：" class="headerlink" title="HPA 计算扩展 Pod 数量的公式："></a>HPA 计算扩展 Pod 数量的公式：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desiredReplicas = ceil[currentReplicas * (currentMetricValue / targetMetricValue)]</span><br></pre></td></tr></table></figure>

<p>具体来说：</p>
<ol>
<li><strong>currentReplicas</strong>：当前正在运行的 Pod 数量。</li>
<li><strong>currentMetricValue</strong>：当前的 CPU 使用率，通常是所有 Pod 的 CPU 使用情况的平均值（例如 75%）。</li>
<li><strong>targetMetricValue</strong>：你在 HPA 配置中指定的目标 CPU 利用率（例如 65%）。</li>
</ol>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>假设：</p>
<ul>
<li>当前有 <strong>4 个 Pod</strong>。</li>
<li>目标 CPU 利用率为 **65%**。</li>
<li>当前的平均 CPU 利用率为 **80%**。</li>
</ul>
<p>计算公式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desiredReplicas = ceil[4 * (80 / 65)] = ceil[4 * 1.23] = ceil[4.92] = 5</span><br></pre></td></tr></table></figure>
<p>因此，HPA 将扩展至 <strong>5 个 Pod</strong>，以保证 CPU 利用率降到你设置的目标值附近。</p>
<h3 id="扩展和缩容过程："><a href="#扩展和缩容过程：" class="headerlink" title="扩展和缩容过程："></a>扩展和缩容过程：</h3><ul>
<li><strong>扩展</strong>：当当前的 CPU 使用率高于目标值时，HPA 会增加 Pod 数量。</li>
<li><strong>缩容</strong>：如果当前的 CPU 使用率低于目标值，HPA 会减少 Pod 数量，但缩容通常有冷却时间，避免频繁调整。</li>
</ul>
<h3 id="配置示例："><a href="#配置示例：" class="headerlink" title="配置示例："></a>配置示例：</h3><p>在 HPA 配置文件中，设置 <code>targetCPUUtilizationPercentage</code>，例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-hpa</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">my-deployment</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">metrics:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Resource</span></span><br><span class="line">    <span class="attr">resource:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cpu</span></span><br><span class="line">      <span class="attr">target:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">Utilization</span></span><br><span class="line">        <span class="attr">averageUtilization:</span> <span class="number">65</span>  <span class="comment"># 目标 CPU 利用率</span></span><br></pre></td></tr></table></figure>
<p>此配置将基于 CPU 利用率，动态调整 Pod 数量，使整体利用率保持在 65% 附近。</p>
<p>这种机制确保集群资源得到充分利用，同时避免单个 Pod 过载或资源浪费。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>http状态码</title>
    <url>/2024/08/30/http%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[<h2 id="HTTP状态码总结"><a href="#HTTP状态码总结" class="headerlink" title="HTTP状态码总结"></a>HTTP状态码总结</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">100：继续 客户端应当继续发送请求。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。</span><br><span class="line"></span><br><span class="line">101： 转换协议 在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采取类似措施。</span><br><span class="line"></span><br><span class="line">102：继续处理 由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</span><br><span class="line"></span><br><span class="line">200：请求成功 处理方式：获得响应的内容，进行处理</span><br><span class="line"></span><br><span class="line">201：请求完成，结果是创建了新资源。新创建资源的URI可在响应的实体中得到 处理方式：爬虫中不会遇到</span><br><span class="line"></span><br><span class="line">202：请求被接受，但处理尚未完成 处理方式：阻塞等待</span><br><span class="line"></span><br><span class="line">204：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。 处理方式：丢弃</span><br><span class="line"></span><br><span class="line">300：该状态码不被HTTP/1.0的应用程序直接使用， 只是作为3XX类型回应的默认解释。存在多个可用的被请求资源。 处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃</span><br><span class="line"></span><br><span class="line">301：请求到的资源都会分配一个永久的URL，这样就可以在将来通过该URL来访问此资源 处理方式：重定向到分配的URL</span><br><span class="line"></span><br><span class="line">302：请求到的资源在一个不同的URL处临时保存 处理方式：重定向到临时的URL</span><br><span class="line"></span><br><span class="line">304：请求的资源未更新 处理方式：丢弃</span><br><span class="line"></span><br><span class="line">400：非法请求 处理方式：丢弃</span><br><span class="line"></span><br><span class="line">401：未授权 处理方式：丢弃</span><br><span class="line"></span><br><span class="line">403：禁止 处理方式：丢弃</span><br><span class="line"></span><br><span class="line">404：没有找到 处理方式：丢弃</span><br><span class="line"></span><br><span class="line">500：服务器内部错误 服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现。</span><br><span class="line"></span><br><span class="line">501：服务器无法识别 服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</span><br><span class="line"></span><br><span class="line">502：错误网关 作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</span><br><span class="line"></span><br><span class="line">503：服务出错 由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>server</category>
      </categories>
  </entry>
  <entry>
    <title>informer 核心机制</title>
    <url>/2024/11/28/informer-%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>在 Kubernetes 的 <code>client-go</code> 中，Informer 的队列机制是控制器实现异步事件处理的核心部分。主要通过 <strong>工作队列 (WorkQueue)</strong> 实现，用于协调资源对象的事件处理，确保高效、可靠和去重的处理流程。</p>
<p>以下是 <code>client-go</code> 中工作队列的核心机制：</p>
<hr>
<h3 id="1-Queue-机制的核心组件"><a href="#1-Queue-机制的核心组件" class="headerlink" title="1. Queue 机制的核心组件"></a><strong>1. Queue 机制的核心组件</strong></h3><p><code>client-go</code> 的队列机制主要由以下组件组成：</p>
<ol>
<li><p><strong><code>WorkQueue</code> 接口</strong>  </p>
<ul>
<li><code>client-go</code> 提供了一种高效的事件队列实现：<code>rateLimitingQueue</code>。</li>
<li>常见接口包括：<code>Add</code>、<code>Get</code>、<code>Done</code>、<code>Forget</code> 和 <code>ShutDown</code>。</li>
</ul>
</li>
<li><p><strong><code>rateLimitingQueue</code></strong>  </p>
<ul>
<li>一种带速率限制的队列，用于在失败时控制重试的速率，防止频繁的事件触发导致资源占用过高。</li>
<li>内部通过 <code>DelayingQueue</code> 和 <code>DefaultControllerRateLimiter</code> 实现重试和延迟处理。</li>
</ul>
</li>
<li><p><strong>队列与同步机制</strong>  </p>
<ul>
<li><code>Informer</code> 监听到资源变化后，通过回调函数 (<code>AddEventHandler</code>) 将事件放入队列。</li>
<li>控制器从队列中读取事件并处理，每次处理后需调用 <code>Done</code> 标记完成。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="2-队列的处理逻辑"><a href="#2-队列的处理逻辑" class="headerlink" title="2. 队列的处理逻辑"></a><strong>2. 队列的处理逻辑</strong></h3><h4 id="核心流程："><a href="#核心流程：" class="headerlink" title="核心流程："></a>核心流程：</h4><ol>
<li><p><strong>资源事件入队</strong>：</p>
<ul>
<li>当 <code>Informer</code> 侦听到资源对象的 <code>Add</code>、<code>Update</code> 或 <code>Delete</code> 事件时，会通过回调将资源标识符（如名字或键）加入队列。</li>
<li>示例代码：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">queue.Add(objKey)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>事件出队并处理</strong>：</p>
<ul>
<li>控制器通过 <code>Get</code> 方法从队列取出事件，处理完成后调用 <code>Done</code>。</li>
<li>示例代码：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    obj, shutdown := queue.Get()</span><br><span class="line">    <span class="keyword">if</span> shutdown &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">    handleErr(err, obj)</span><br><span class="line">    queue.Done(obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>错误处理与重试</strong>：</p>
<ul>
<li>如果处理失败，可以调用 <code>AddRateLimited</code> 重新将事件入队，触发限速重试。</li>
<li>如果确定不再重试，调用 <code>Forget</code> 移除事件。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="3-核心功能特性"><a href="#3-核心功能特性" class="headerlink" title="3. 核心功能特性"></a><strong>3. 核心功能特性</strong></h3><ol>
<li><p><strong>去重</strong>：</p>
<ul>
<li>队列内对象使用唯一键（通常是 <code>namespace/name</code> 格式）标识，避免重复处理同一资源事件。</li>
</ul>
</li>
<li><p><strong>速率限制</strong>：</p>
<ul>
<li>内置的速率限制器（<code>RateLimiter</code>）控制失败重试的频率，防止集群压力过大。</li>
<li>常用速率限制器：<ul>
<li><code>BucketRateLimiter</code>: 令牌桶算法。</li>
<li><code>ItemExponentialFailureRateLimiter</code>: 指数增长重试间隔。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>延迟处理</strong>：</p>
<ul>
<li>支持延迟任务，适用于需要等待某些条件满足后再处理的场景。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="4-示例代码"><a href="#4-示例代码" class="headerlink" title="4. 示例代码"></a><strong>4. 示例代码</strong></h3><p>以下是使用 <code>WorkQueue</code> 的典型控制器实现：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">queue := workqueue.NewRateLimitingQueue(workqueue.DefaultControllerRateLimiter())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">enqueue</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    key, err := cache.MetaNamespaceKeyFunc(obj)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    queue.Add(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    obj, shutdown := queue.Get()</span><br><span class="line">    <span class="keyword">if</span> shutdown &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    key := obj.(<span class="type">string</span>) <span class="comment">// 处理对象的唯一标识符</span></span><br><span class="line">    err := syncHandler(key)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        queue.AddRateLimited(key)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        queue.Forget(key)</span><br><span class="line">    &#125;</span><br><span class="line">    queue.Done(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-参考文档"><a href="#5-参考文档" class="headerlink" title="5. 参考文档"></a><strong>5. 参考文档</strong></h3><ul>
<li><a href="https://github.com/kubernetes/client-go/tree/master/util/workqueue">client-go WorkQueue 实现</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>ingress-nginx开启旧版本TLS</title>
    <url>/2024/10/16/ingress-nginx%E5%BC%80%E5%90%AF%E6%97%A7%E7%89%88%E6%9C%ACTLS/</url>
    <content><![CDATA[<h2 id="1-创建工作负载"><a href="#1-创建工作负载" class="headerlink" title="1.创建工作负载"></a>1.创建工作负载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个deployment型的工作负载，端口使用nginx默认的80</span></span><br><span class="line">kubectl create deployment nginx-demo --image=swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/nginx:1.27.0 --port=80</span><br><span class="line"></span><br><span class="line"><span class="comment">#暴露服务端口</span></span><br><span class="line">kubectl expose deployment nginx-demo --port=80 --<span class="built_in">type</span>=ClusterIP</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个ingress规则</span></span><br><span class="line">kubectl create ingress nginx-demo --class=nginx --rule=<span class="string">&quot;test.qihoo.net/*=nginx-demo:80&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取ingress pod ip</span></span><br><span class="line"><span class="comment">#kubectl get pods -o=jsonpath=&#x27;&#123;@&#125;&#x27; | jq</span></span><br><span class="line">kubectl get pod -n ingress-nginx -o jsonpath=<span class="string">&quot;&#123;.items[*][&#x27;.status.hostIP&#x27;]&#125;&quot;</span></span><br><span class="line">11.33.162.177</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置host，保证请求经过ingress，</span></span><br><span class="line"><span class="built_in">cat</span> /etc/hosts</span><br><span class="line">11.33.162.177 test.qihoo.net</span><br></pre></td></tr></table></figure>

<h2 id="2-查看TLS支持版本"><a href="#2-查看TLS支持版本" class="headerlink" title="2.查看TLS支持版本"></a>2.查看TLS支持版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#请求后端服务</span></span><br><span class="line">curl -v http://test.qihoo.net</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用nmap或者openssl请求</span></span><br><span class="line">nmap --script ssl-enum-ciphers -p 443 test.qihoo.net</span><br><span class="line">nmap --script ssl-enum-ciphers -p 443 11.33.162.177</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">openssl s_client -connect test.qihoo.net:443 -tls1_1</span><br><span class="line">openssl s_client -connect test.qihoo.net:443 -tls1_2</span><br><span class="line">openssl s_client -connect test.qihoo.net:443 -tls1_3</span><br></pre></td></tr></table></figure>

<h2 id="3-编辑ingress-nginx-configmap配置"><a href="#3-编辑ingress-nginx-configmap配置" class="headerlink" title="3.编辑ingress-nginx configmap配置"></a>3.编辑ingress-nginx configmap配置</h2><ul>
<li><p>获取ingress-nginx的configmap，编辑配置</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取ingress-nginx 的configmap，编辑配置</span></span><br><span class="line">kubectl get cm -n ingress-nginx</span><br><span class="line">NAME                       DATA   AGE</span><br><span class="line">ingress-nginx-controller   3      47d</span><br><span class="line">kube-root-ca.crt           1      47d</span><br><span class="line">nginx-template             1      47d</span><br><span class="line"></span><br><span class="line">kubectl edit cm ingress-nginx-controller -n ingress-nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#data配置添加以下内容：</span></span><br><span class="line">ssl-ciphers: ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:@SECLEVEL=0</span><br><span class="line">ssl-protocols: TLSv1 TLSv1.1 TLSv1.2 TLSv1.3</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-再次请求查看支持的TLS版本"><a href="#4-再次请求查看支持的TLS版本" class="headerlink" title="4.再次请求查看支持的TLS版本"></a>4.再次请求查看支持的TLS版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap --script ssl-enum-ciphers -p 443 11.33.162.177</span><br><span class="line">或者</span><br><span class="line">nmap --script ssl-enum-ciphers -p 443 test.qihoo.net</span><br></pre></td></tr></table></figure>

<h2 id="5-参考文档"><a href="#5-参考文档" class="headerlink" title="5.参考文档"></a>5.参考文档</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/</span><br><span class="line"></span><br><span class="line">https://stackoverflow.com/questions/59371313/kubernetes-nginx-ingress-controller-activate-tlsv1-1</span><br><span class="line"></span><br><span class="line">https://help.aliyun.com/zh/ack/ack-managed-and-ack-dedicated/user-guide/nginx-ingress-faq</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>jq常见用法</title>
    <url>/2024/09/29/jq%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p><code>jq</code> 是一个非常强大的命令行 JSON 处理工具，它可以帮助您快速地查询、过滤、映射和转换 JSON 数据。</p>
<ol>
<li><p><strong>查看特定字段</strong>：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;.fieldName&#x27;</span><br></pre></td></tr></table></figure>
<p> 替换 <code>fieldName</code> 为您想要查询的字段名。</p>
</li>
<li><p><strong>查看数组中的特定元素</strong>：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;.fieldName[0]&#x27;  # 获取数组的第一个元素</span><br><span class="line">jq &#x27;.fieldName[-1]&#x27; # 获取数组的最后一个元素</span><br><span class="line">jq &#x27;.fieldName[]&#x27;   # 遍历数组的所有元素</span><br></pre></td></tr></table></figure>
<p> 数组索引从 0 开始。</p>
</li>
<li><p><strong>过滤数组元素</strong>：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;.fieldName[] | select(.condition)&#x27;</span><br></pre></td></tr></table></figure>
<p> 替换 <code>condition</code> 为过滤条件，例如 <code>.name == &quot;desiredName&quot;</code>。</p>
</li>
<li><p><strong>获取嵌套字段</strong>：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;.parentFieldName[].childFieldName&#x27;</span><br></pre></td></tr></table></figure>
<p> 如果 <code>parentFieldName</code> 是一个数组，这将获取每个元素的 <code>childFieldName</code> 字段。</p>
</li>
<li><p><strong>获取多个字段</strong>：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;&#123;field1, field2&#125;&#x27;</span><br></pre></td></tr></table></figure>
<p> 这将创建一个包含 <code>field1</code> 和 <code>field2</code> 的对象。</p>
</li>
<li><p><strong>提取键值对</strong>：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;to_entries[] | &#123;key, value&#125;&#x27;</span><br></pre></td></tr></table></figure>
<p> 将 JSON 对象转换为键值对数组。</p>
</li>
<li><p><strong>合并多个字段</strong>：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;.fieldName as $item ireduce . as $acc + &#123;($item): $item&#125; &#x27;</span><br></pre></td></tr></table></figure>
<p> 这将合并多个字段到一个对象中。</p>
</li>
<li><p><strong>格式化输出</strong>：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;.&#x27;  # 默认输出</span><br><span class="line">jq &#x27;.pretty&#x27;  # 格式化输出</span><br><span class="line">jq &#x27;.compact&#x27;  # 压缩输出</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>条件表达式</strong>：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;if .condition then &quot;true&quot; else &quot;false&quot; end&#x27;</span><br></pre></td></tr></table></figure>
<p> 使用条件表达式来输出不同的结果。</p>
</li>
<li><p><strong>数组操作</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;.arrayField + [newItem]&#x27;  # 添加新元素到数组</span><br><span class="line">jq &#x27;.arrayField - [index]&#x27;    # 从数组中删除元素</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>统计数组元素数量</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;.arrayField | length&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>排序数组</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;.arrayField | sort&#x27;  # 默认升序排序</span><br><span class="line">jq &#x27;.arrayField | sort_by(-&amp;value)&#x27;  # 降序排序</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>搜索和替换</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;.arrayField[] | select(.field == &quot;value&quot;) | .field = &quot;newValue&quot;&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>从 JSON 字符串中解析</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;.fromJSON&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>将 JSON 对象转换为数组</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jq &#x27;to_entries[] | .value&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用管道</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get pods --output=json | jq &#x27;.items[] | .metadata.name&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>实践</strong>：</p>
<pre><code>直接输出为完整的 JSON 格式
jq &#39;.[] | &#123;address: .address, weight: .weight&#125;&#39; &lt;&lt;&lt; &#39;[&#123;&quot;protocol_port&quot;:80,&quot;address&quot;:&quot;10.xxx&quot;,&quot;port_id&quot;:&quot;&quot;,&quot;weight&quot;:1&#125;,&#123;&quot;protocol_port&quot;:80,&quot;address&quot;:&quot;10.xxx&quot;,&quot;port_id&quot;:&quot;&quot;,&quot;weight&quot;:1&#125;]&#39;
#输出为表格格式：
jq -r &#39;.[] | [.address, .weight] | @tsv&#39; &lt;&lt;&lt; &#39;[&#123;&quot;protocol_port&quot;:80,&quot;address&quot;:&quot;10.xxx&quot;,&quot;port_id&quot;:&quot;&quot;,&quot;weight&quot;:1&#125;,&#123;&quot;protocol_port&quot;:80,&quot;address&quot;:&quot;10.xxx&quot;,&quot;port_id&quot;:&quot;&quot;,&quot;weight&quot;:1&#125;]&#39; | column -t
</code></pre>
<p>这将获取所有 pod 的名称。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s api server接口交互</title>
    <url>/2024/09/29/k8s-api-server%E6%8E%A5%E5%8F%A3%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<h3 id="查看api方法："><a href="#查看api方法：" class="headerlink" title="查看api方法："></a>查看api方法：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get --raw /</span><br><span class="line">kubectl get --raw /apis/apps/v1 | jq .resources[].name</span><br><span class="line"></span><br><span class="line">或者开启apiserver</span><br><span class="line">kubectl proxy --port=8080</span><br><span class="line"></span><br><span class="line">curl http://127.0.0.1:8080/apis/batch/v1</span><br></pre></td></tr></table></figure>

<h3 id="api结构及原理"><a href="#api结构及原理" class="headerlink" title="api结构及原理"></a>api结构及原理</h3><p><img src="https://github.com/shispring/shispring.github.io/blob/main/2024/08/28/Anolis-OS-8%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E9%9B%86/55.jpg?raw=true"><br><img src="https://github.com/shispring/shispring.github.io/blob/main/2024/08/28/Anolis-OS-8%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E9%9B%86/87.jpg?raw=true"></p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>k8s RBAC解释</title>
    <url>/2024/09/29/k8s-RBAC%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<h3 id="抽象概括"><a href="#抽象概括" class="headerlink" title="抽象概括"></a>抽象概括</h3><ul>
<li><strong>谁</strong> 是否可以对  <strong>什么东西</strong> 进行  <strong>怎么样</strong> 的访问操作。</li>
</ul>
<h3 id="RBAC模型"><a href="#RBAC模型" class="headerlink" title="RBAC模型"></a>RBAC模型</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">User（用户）：每个用户都有唯一的UID识别，并被授予不同的角色</span><br><span class="line">Role（角色）：不同角色具有不同的权限</span><br><span class="line">Permission（权限）：访问权限</span><br><span class="line">用户-角色映射：用户和角色之间的映射关系</span><br><span class="line">角色-权限映射：角色和权限之间的映射</span><br></pre></td></tr></table></figure>

<h3 id="RBAC-API-对象："><a href="#RBAC-API-对象：" class="headerlink" title="RBAC API 对象："></a>RBAC API 对象：</h3><ul>
<li><em>Role</em></li>
<li><em>ClusterRole</em></li>
<li><em>RoleBinding</em></li>
<li><em>ClusterRoleBinding</em>。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/shispring/shispring.github.io/refs/heads/main/2024/08/28/Anolis-OS-8%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E9%9B%86/91.jpg"></p>
<p><img src="https://raw.githubusercontent.com/shispring/shispring.github.io/refs/heads/main/2024/08/28/Anolis-OS-8%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E9%9B%86/05.jpg"></p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s apiserver 客户端认证方式</title>
    <url>/2024/09/30/k8s-apiserver-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>apiserver有三种级别的客户端认证方式<br>1、HTTPS证书认证：基于CA根证书签名的双向数字证书认证方式<br>2、HTTP Token认证：通过一个Token来识别合法用户<br>3、HTTP Base认证：通过用户名+密码的认证方式  </p>
<h1 id="HTTP-Token认证：通过一个Token来识别合法用户"><a href="#HTTP-Token认证：通过一个Token来识别合法用户" class="headerlink" title="HTTP Token认证：通过一个Token来识别合法用户"></a>HTTP Token认证：通过一个Token来识别合法用户</h1><p>1、创建可以访问api的用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建账号</span><br><span class="line">kubectl create serviceaccount curl-admin -n kube-system</span><br><span class="line"></span><br><span class="line"># 角色绑定</span><br><span class="line">kubectl create clusterrolebinding curl-admin --clusterrole=cluster-admin --serviceaccount=kube-system:curl-admin</span><br><span class="line"></span><br><span class="line"># 创建secret</span><br><span class="line">在 Kubernetes v1.25 及以后的版本中，创建 ServiceAccount 时不会自动生成关联的 Secret。你需要手动创建一个 Secret 并将其与 ServiceAccount 关联。</span><br><span class="line"></span><br><span class="line">kubectl apply -f - &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: curl-admin</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/service-account.name: &quot;curl-admin&quot;</span><br><span class="line">type: kubernetes.io/service-account-token</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看TOKEN</span><br><span class="line">kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk &#x27;/curl-admin/&#123;print $1&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p>2、设置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、获取TOKEN信息</span><br><span class="line"># kubectl describe secrets $(kubectl get secrets -n kube-system |grep admin |cut -f1 -d &#x27; &#x27;) -n kube-system |grep -E &#x27;^token&#x27; |cut -f2 -d&#x27;:&#x27;|tr -d &#x27;  &#x27;|tr -d &#x27; &#x27;</span><br><span class="line"></span><br><span class="line">2、定义TOKEN环境变量</span><br><span class="line"># TOKEN=$(kubectl describe secrets $(kubectl get secrets -n kube-system |grep admin |cut -f1 -d &#x27; &#x27;) -n kube-system |grep -E &#x27;^token&#x27; |cut -f2 -d&#x27;:&#x27;|tr -d &#x27;  &#x27;|tr -d &#x27; &#x27;)</span><br><span class="line"></span><br><span class="line">3、获取api-server地址，注意过滤集群信息</span><br><span class="line"># 单个集群</span><br><span class="line">kubectl config view |grep server|cut -f 2- -d &quot;:&quot; | tr -d &quot; &quot;</span><br><span class="line"></span><br><span class="line">#多个集群时</span><br><span class="line"># kubectl config view -o jsonpath=&#x27;&#123;&quot;Cluster name\tServer\n&quot;&#125;&#123;range .clusters[*]&#125;&#123;.name&#125;&#123;&quot;\t&quot;&#125;&#123;.cluster.server&#125;&#123;&quot;\n&quot;&#125;&#123;end&#125;&#x27;</span><br><span class="line"></span><br><span class="line"># kubectl config view -o jsonpath=&#x27;&#123;range .clusters[*]&#125;&#123;.name&#125;&#123;&quot;\t&quot;&#125;&#123;.cluster.server&#125;&#123;&quot;\n&quot;&#125;&#123;end&#125;&#x27; | grep &quot;test-cluster-xxx&quot; | awk &#x27;&#123;print $2&#125;&#x27;</span><br><span class="line"></span><br><span class="line">4、设置api-server地址环境变量</span><br><span class="line">#单个集群</span><br><span class="line"># APISERVER=$(kubectl config view |grep server|cut -f 2- -d &quot;:&quot; | tr -d &quot; &quot;)</span><br><span class="line"></span><br><span class="line">#多个集群</span><br><span class="line"># APISERVER=$(kubectl config view -o jsonpath=&#x27;&#123;range .clusters[*]&#125;&#123;.name&#125;&#123;&quot;\t&quot;&#125;&#123;.cluster.server&#125;&#123;&quot;\n&quot;&#125;&#123;end&#125;&#x27; | grep &quot;jpshi&quot; | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3、通过TOKEN方式访问api-server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># curl -H &quot;Authorization: Bearer $TOKEN&quot; $APISERVER/api  --insecure</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;APIVersions&quot;,</span><br><span class="line">  &quot;versions&quot;: [</span><br><span class="line">    &quot;v1&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;serverAddressByClientCIDRs&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;clientCIDR&quot;: &quot;0.0.0.0/0&quot;,</span><br><span class="line">      &quot;serverAddress&quot;: &quot;192.168.0.130:6443&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pod外访问</span><br><span class="line"># curl -H &quot;Authorization: Bearer $TOKEN&quot; $APISERVER  --insecure</span><br><span class="line">&#123;</span><br><span class="line">  &quot;paths&quot;: [</span><br><span class="line">    &quot;/api&quot;,</span><br><span class="line">    &quot;/api/v1&quot;,</span><br><span class="line">    &quot;/apis&quot;,</span><br><span class="line">    &quot;/apis/&quot;,</span><br><span class="line">    &quot;/apis/admissionregistration.k8s.io&quot;,</span><br><span class="line">    &quot;/apis/admissionregistration.k8s.io/v1beta1&quot;,</span><br><span class="line">    &quot;/apis/apiextensions.k8s.io&quot;,</span><br><span class="line">    &quot;/apis/apiextensions.k8s.io/v1beta1&quot;,</span><br><span class="line"> 	......</span><br><span class="line">    &quot;/version&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pod内访问</span><br><span class="line">$ TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)</span><br><span class="line">$ CACERT=/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">$ curl --cacert $CACERT --header &quot;Authorization: Bearer $TOKEN&quot;  https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT/api</span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;APIVersions&quot;,</span><br><span class="line">  &quot;versions&quot;: [</span><br><span class="line">    &quot;v1&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;serverAddressByClientCIDRs&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;clientCIDR&quot;: &quot;0.0.0.0/0&quot;,</span><br><span class="line">      &quot;serverAddress&quot;: &quot;10.0.1.149:443&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>k8s cordon drain taint</title>
    <url>/2024/09/04/k8s-cordon-drain-taint/</url>
    <content><![CDATA[<h3 id="cordon-标记节点不可调度"><a href="#cordon-标记节点不可调度" class="headerlink" title="cordon: 标记节点不可调度"></a>cordon: 标记节点不可调度</h3><ul>
<li>如果一个node被标记为cordon，新创建的pod不会被调度到此node上，已经调度上去的不会被移走。</li>
</ul>
<h3 id="drain-驱逐节点上的pod"><a href="#drain-驱逐节点上的pod" class="headerlink" title="drain: 驱逐节点上的pod"></a>drain: 驱逐节点上的pod</h3><ul>
<li>drain包含两种状态：cordon不可被调度，evicted驱逐当前节点所以pod</li>
</ul>
<h3 id="taint-设置节点的污点"><a href="#taint-设置节点的污点" class="headerlink" title="taint:设置节点的污点"></a>taint:设置节点的污点</h3><ul>
<li>污点的格式: key&#x3D;value:effect</li>
<li>key和value是污点的标签，可以自行拟定</li>
<li>effect描述污点的作用,effect支持如下三个选项:<br>PreferNoSchedule：尽量避免把pod调度到具有该污点的node上，除非没有其他节点可调度<br>NoSchedule:：不会把pod调度到具有该污点的node上，但不会影响当前node已存在的pod<br>NoExecute：不会把pod调度到具有该污点的node上，同时还会驱逐node上已存在的pod</li>
</ul>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置node不可调度</span></span><br><span class="line">kubectl cordon &lt;NODE&gt;</span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">kubectl  describe node &lt;NODE&gt; | grep Unschedulable</span><br><span class="line"></span><br><span class="line"><span class="comment">#drain停机维护</span></span><br><span class="line">kubectl cordon &lt;NODE&gt;</span><br><span class="line">kubectl drain &lt;NODE&gt; --ignore-daemonsets --delete-local-data --force --grace-period=0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl drain node-1 --grace-period=60 --<span class="built_in">timeout</span>=10m --ignore-daemonsets --delete-local-data</span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">•	--grace-period=60：每个 Pod 有 60 秒的优雅关闭时间。</span><br><span class="line">•	--<span class="built_in">timeout</span>=10m：整个驱逐操作最多等待 10 分钟。</span><br><span class="line">•	--ignore-daemonsets：忽略 DaemonSet 管理的 Pod，不会尝试驱逐它们。</span><br><span class="line">•	--delete-local-data：强制删除使用本地存储的数据，即使 Pod 使用了本地卷。</span><br><span class="line"></span><br><span class="line"><span class="comment">#uncordon恢复节点可调度</span></span><br><span class="line">kubectl uncordon &lt;NODE&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置污点,指定标签为dedicated=special-user,策略为NoSchedule</span></span><br><span class="line">kubectl taint nodes &lt;NODE&gt; dedicated=special-user:NoSchedule</span><br><span class="line"><span class="comment">#移除key为dedicated的NoSchedule污点</span></span><br><span class="line">kubectl taint nodes &lt;NODE&gt; dedicated:NoSchedule-</span><br><span class="line"><span class="comment">#移除key为dedicated的所有污点</span></span><br><span class="line">kubectl taint nodes &lt;NODE&gt; dedicated-</span><br><span class="line"><span class="comment">#设置&lt;NODE&gt;污点,策略为NoExecute</span></span><br><span class="line">kubectl taint nodes &lt;NODE&gt; dedicated=special-user:NoExecute</span><br><span class="line"><span class="comment">#注意一点,不要混淆节点不可调度,节点上存在污点节点仍然是可以调度的,只要pod中存在容忍即可调度到&lt;NODE&gt;节点</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>k8s event controller工作原理</title>
    <url>/2024/12/08/k8s-event-controller%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>在 Kubernetes 中，Event Controller 是集群内部的一部分，用于管理事件资源（Event 对象）。它的主要职责是监听、存储和处理集群中的事件，这些事件是 Kubernetes 中其他组件和用户操作的结果。</p>
<ol>
<li>Event 的定义与来源</li>
</ol>
<p>Event 是 Kubernetes 中的一个核心资源，表示集群中发生的一个操作或状态变更。每个 Event 都是一个短期的记录，包含以下信息：<br>    •	涉及的对象（involvedObject）：与事件相关的资源（Pod、Node、Deployment 等）。<br>    •	类型：事件类型是 Normal（正常）或 Warning（警告）。<br>    •	原因：事件的简短描述（如 BackOff、Scheduled）。<br>    •	消息：事件的详细信息。<br>    •	时间戳：事件发生的时间。<br>    •	事件源：触发事件的组件（如 kubelet、scheduler、controller-manager 等）。</p>
<ol start="2">
<li>Event Controller 的作用</li>
</ol>
<p>Event Controller 的核心功能是：<br>    •	监听事件源：通过 API Server 监控事件的发生（使用 Kubernetes 的 Watch 机制）。<br>    •	记录事件：将事件持久化存储到 etcd 中。<br>    •	清理旧事件：定期清理超出 TTL（默认 1 小时）的事件，确保事件系统不会无限制地占用资源。</p>
<p>事件驱动机制的工作原理</p>
<p>Kubernetes 是基于 事件驱动模型 的，这体现在以下几个方面：</p>
<ol>
<li>事件的传播与通知</li>
</ol>
<p>事件是通过 Watch&#x2F;Informer 机制传播的：<br>    •	组件监听 API Server：Kubernetes 中的 Controller（如 Deployment Controller、Node Controller）通过 Watch 机制实时监听资源对象的变更。<br>    •	产生事件：当资源对象状态发生变化时，组件会向 API Server 报告事件。例如，Pod 被调度到一个节点后，Scheduler 会产生一个事件 Scheduled。<br>    •	事件流转：事件被写入 API Server，Event Controller 和其他监听组件（如自定义 Controller）会收到通知。</p>
<ol start="2">
<li>事件类型<br> •	Normal 事件：表示系统的正常行为，例如 Pod 被成功调度。<br> •	Warning 事件：表示可能的异常情况，例如 Pod 无法拉取镜像或节点不可用。</li>
</ol>
<p>Event Controller 对 CRD 自定义 Controller 的影响</p>
<ol>
<li>事件触发 CRD Controller 的动作<br> •	Informer 的事件驱动机制：CRD 自定义 Controller 使用 Kubernetes 提供的 Informer 来监听 CRD 对象的创建、更新和删除事件。Informer 会从 API Server 获取事件并调用相应的处理逻辑。<br> •	队列机制：事件触发后，CRD Controller 通常将事件加入队列（如 workqueue），并异步执行对应的操作。</li>
</ol>
<p>例如：<br>    •	用户创建一个自定义资源（CRD 实例）。<br>    •	Informer 监听到该事件，并将事件加入工作队列。<br>    •	自定义 Controller 的 Reconcile Loop 被触发，执行相应的逻辑。</p>
<ol start="2">
<li><p>使用事件进行调试与可观察性<br> •	CRD 自定义 Controller 通常会创建 Event 对象记录操作结果（如更新资源状态）。<br> •	这些事件便于管理员调试和观察 CRD Controller 的行为。</p>
</li>
<li><p>事件的级联影响<br> •	自定义 Controller 的行为可能引发新的事件。例如，Controller 更新一个 Pod 的 Label，会触发 Deployment Controller 产生新事件 Updated.</p>
</li>
</ol>
<p>事件对系统整体的影响<br>    1.	调度与控制的基础：<br>    •	Scheduler 监听 Pod 的创建事件来决定调度策略。<br>    •	Deployment Controller 监听 Pod 的状态事件来决定扩容或重建策略。<br>    2.	系统状态的监控与追踪：<br>    •	事件为集群提供了一个透明的状态变更历史。<br>    •	运维人员可以通过 kubectl describe 查看事件记录。<br>    3.	问题的根因分析：<br>    •	事件链可以帮助快速定位问题。例如，Pod 创建失败的原因通常可以通过查看相关的事件找到。</p>
<p>实践中如何生成和使用事件<br>    1.	生成自定义事件<br>自定义 Controller 可以通过 Kubernetes 提供的 EventRecorder 接口生成事件：</p>
<p>eventRecorder.Event(resource, “Warning”, “CustomReason”, “Custom message”)</p>
<pre><code>2.	监控事件
</code></pre>
<p>通过 kubectl 查看事件：</p>
<p>kubectl get events –all-namespaces</p>
<pre><code>3.	分析与排查问题

•	Warning 事件通常是问题的直接表现。
•	结合事件时间顺序，可以追踪操作的完整链路。
</code></pre>
<p>通过事件驱动机制，Kubernetes 提供了强大的异步处理能力和可观察性，能够支撑复杂的分布式系统操作逻辑。自定义的 CRD Controller 充分利用这一机制，可以实现动态、灵活的资源管理和协调。</p>
]]></content>
  </entry>
  <entry>
    <title>k8s node not ready 排查</title>
    <url>/2024/09/26/k8s-node-not-ready-%E6%8E%92%E6%9F%A5/</url>
    <content><![CDATA[<h3 id="1-节点-NotReady-的原因"><a href="#1-节点-NotReady-的原因" class="headerlink" title="1. 节点 NotReady 的原因"></a>1. 节点 NotReady 的原因</h3><ol>
<li><p><strong>Kubelet 失败</strong>：</p>
<ul>
<li>Kubelet 进程未启动或崩溃，导致节点无法向 API 服务器报告其状态。</li>
</ul>
</li>
<li><p><strong>网络问题</strong>：</p>
<ul>
<li>节点与控制平面之间的网络连接不畅，无法与 API 服务器通信。</li>
</ul>
</li>
<li><p><strong>资源不足</strong>：</p>
<ul>
<li>节点上的 CPU、内存、磁盘等资源耗尽，导致无法正常调度 Pod 或处理请求。</li>
</ul>
</li>
<li><p><strong>Docker 或容器运行时问题</strong>：</p>
<ul>
<li>容器运行时（如 Docker、containerd）故障，无法启动或管理 Pod。</li>
</ul>
</li>
<li><p><strong>节点条件不满足</strong>：</p>
<ul>
<li>节点可能因为 DiskPressure、MemoryPressure 或 PIDPressure 等条件被标记为 NotReady。</li>
</ul>
</li>
<li><p><strong>防火墙或安全组配置</strong>：</p>
<ul>
<li>网络策略、iptables 或云平台的安全组阻止了与控制平面的通信。</li>
</ul>
</li>
</ol>
<h3 id="2-补救措施"><a href="#2-补救措施" class="headerlink" title="2. 补救措施"></a>2. 补救措施</h3><p>如果节点长时间处于 NotReady 状态，可以采取以下措施：</p>
<ol>
<li><p><strong>检查 Kubelet 日志</strong>：</p>
<ul>
<li>查看 Kubelet 日志，了解其是否正常启动，是否有错误信息。</li>
<li>使用命令：<code>journalctl -u kubelet</code> 或 <code>kubectl logs -n kube-system &lt;kubelet-pod-name&gt;</code>。</li>
<li>Kubelet 通常是以 daemonset 的形式运行在每个节点上。要查看集群中 Kubelet Pod 的列表，可以使用以下命令：kubectl get pods -n kube-system -l k8s-app&#x3D;kubelet。</li>
</ul>
</li>
<li><p><strong>检查资源状态</strong>：</p>
<ul>
<li>使用命令 <code>kubectl describe node &lt;node-name&gt;</code> 查看节点状态和条件，确定是否由于资源压力导致 NotReady。</li>
</ul>
</li>
<li><p><strong>重启 Kubelet</strong>：</p>
<ul>
<li>如果 Kubelet 出现问题，尝试重启该服务：<code>sudo systemctl restart kubelet</code>。</li>
</ul>
</li>
<li><p><strong>检查网络连接</strong>：</p>
<ul>
<li>确认节点与 API 服务器的网络连接正常，使用 <code>ping</code> 或 <code>curl</code> 测试连接。</li>
</ul>
</li>
<li><p><strong>清理资源</strong>：</p>
<ul>
<li>如果是资源不足，考虑清理不必要的 Pod，或增加节点的资源（CPU、内存）。</li>
</ul>
</li>
<li><p><strong>检查防火墙和安全组</strong>：</p>
<ul>
<li>确保防火墙规则或安全组配置允许节点与控制平面之间的通信。</li>
</ul>
</li>
<li><p><strong>驱动更新或重新安装</strong>：</p>
<ul>
<li>检查 Docker 或容器运行时的版本和配置，如果存在问题，考虑更新或重新安装。</li>
</ul>
</li>
<li><p><strong>使用 cordon 和 drain</strong>：</p>
<ul>
<li>如果节点不能恢复，使用 <code>kubectl cordon &lt;node-name&gt;</code> 阻止新的 Pod 调度到该节点，使用 <code>kubectl drain &lt;node-name&gt;</code> 将现有 Pod 移走，进行故障排查或维护。</li>
<li>cordon命令目的：将节点标记为不可调度，防止新的 Pod 被调度到该节点上。</li>
<li>drain命令目的：迁移节点上的所有 Pod，除了 DaemonSet 管理的 Pod。kubectl drain <node-name> –ignore-daemonsets –delete-emptydir-data</li>
</ul>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>节点状态为 NotReady 的原因可能涉及 Kubelet、资源、网络等多方面的问题。通过检查日志、资源状态和网络连接等方式，可以快速定位问题并采取相应的补救措施，确保集群的健康和可用性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get ds -n kube-system</span><br><span class="line">kubectl get pods -n kube-system -l k8s-app=kubelet</span><br><span class="line"></span><br><span class="line">kubectl describe node &lt;node-name&gt;  -n kube-system | grep -A 10 Conditions</span><br><span class="line">kubectl describe node &lt;node-name&gt;  -n kube-system | grep -A 10 Events</span><br><span class="line">kubectl describe pod &lt;kubelet-pod-name&gt; -n kube-system | grep Events -A  10</span><br><span class="line"></span><br><span class="line">kubectl cordon node01</span><br><span class="line">kubectl drain node01 --ignore-daemonsets --delete-emptydir-data</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>k8s operator 开发事项</title>
    <url>/2024/10/15/k8s-operator-%E5%BC%80%E5%8F%91%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="Kubernetes-相关-API-包介绍"><a href="#Kubernetes-相关-API-包介绍" class="headerlink" title="Kubernetes 相关 API 包介绍"></a><strong>Kubernetes 相关 API 包介绍</strong></h2><h3 id="1-k8s-io-apimachinery-pkg-apis-meta-v1"><a href="#1-k8s-io-apimachinery-pkg-apis-meta-v1" class="headerlink" title="1. k8s.io&#x2F;apimachinery&#x2F;pkg&#x2F;apis&#x2F;meta&#x2F;v1"></a>1. <strong>k8s.io&#x2F;apimachinery&#x2F;pkg&#x2F;apis&#x2F;meta&#x2F;v1</strong></h3><ul>
<li><strong>功能</strong>：提供处理 Kubernetes 元数据的类型和函数。</li>
<li><strong>常用场景</strong>：<ul>
<li>创建、更新、删除 Kubernetes 资源时所需的元数据类型（如 <code>ObjectMeta</code>）。</li>
<li>时间戳、Label 选择器等辅助类型。</li>
</ul>
</li>
</ul>
<h3 id="2-k8s-io-api"><a href="#2-k8s-io-api" class="headerlink" title="2. k8s.io&#x2F;api"></a>2. <strong>k8s.io&#x2F;api</strong></h3><ul>
<li><strong>用途</strong>：定义 Kubernetes 各个 API 资源的 Go 语言结构体，按 API 组分类。</li>
<li><strong>关键模块</strong>：<ul>
<li><strong>core&#x2F;v1</strong>：核心资源（Pods、Services、ConfigMaps、Secrets）。</li>
<li><strong>apps&#x2F;v1</strong>：管理工作负载（Deployments、StatefulSets、DaemonSets）。</li>
<li><strong>batch&#x2F;v1</strong>：任务调度相关资源（Jobs、CronJobs）。</li>
<li><strong>networking&#x2F;v1</strong>：网络资源（Ingress、NetworkPolicy）。</li>
<li><strong>autoscaling&#x2F;v1、v2</strong>：自动扩缩容（HorizontalPodAutoscaler）。</li>
<li><strong>rbac&#x2F;v1</strong>：访问控制（Role、ClusterRole、RoleBinding）。</li>
</ul>
</li>
</ul>
<h3 id="3-k8s-io-client-go"><a href="#3-k8s-io-client-go" class="headerlink" title="3. k8s.io&#x2F;client-go"></a>3. <strong>k8s.io&#x2F;client-go</strong></h3><h4 id="k8s-io-client-go-kubernetes"><a href="#k8s-io-client-go-kubernetes" class="headerlink" title="k8s.io&#x2F;client-go&#x2F;kubernetes"></a><strong>k8s.io&#x2F;client-go&#x2F;kubernetes</strong></h4><ul>
<li><strong>功能</strong>：提供便捷的 API 接口用于管理和操作 Kubernetes 资源。<ul>
<li>封装与 Kubernetes API 的交互，支持资源 CRUD 操作。</li>
<li>支持身份认证和上下文管理。</li>
<li>提供事件、日志和资源监控支持。</li>
</ul>
</li>
</ul>
<h4 id="k8s-io-client-go-tools"><a href="#k8s-io-client-go-tools" class="headerlink" title="k8s.io&#x2F;client-go&#x2F;tools"></a><strong>k8s.io&#x2F;client-go&#x2F;tools</strong></h4><ul>
<li><strong>工具包</strong>：简化开发的辅助工具。<ul>
<li><strong>cache</strong>：Informer 缓存机制，提高 API 性能。</li>
<li><strong>clientcmd</strong>：解析 kubeconfig 文件，支持多集群配置。</li>
<li><strong>record</strong>：记录事件到 Kubernetes 系统。</li>
<li><strong>leaderelection</strong>：实现分布式系统中的领导选举。</li>
</ul>
</li>
</ul>
<h4 id="k8s-io-client-go-util"><a href="#k8s-io-client-go-util" class="headerlink" title="k8s.io&#x2F;client-go&#x2F;util"></a><strong>k8s.io&#x2F;client-go&#x2F;util</strong></h4><ul>
<li><strong>实用工具</strong>：<ul>
<li><strong>retry</strong>：实现指数退避的重试机制，处理临时错误。</li>
<li><strong>wait</strong>：等待某个条件满足的机制。</li>
<li><strong>homedir</strong>：获取用户主目录的路径，方便查找 kubeconfig。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="Kubernetes-Operator-开发最佳实践"><a href="#Kubernetes-Operator-开发最佳实践" class="headerlink" title="Kubernetes Operator 开发最佳实践"></a><strong>Kubernetes Operator 开发最佳实践</strong></h2><h3 id="1-使用-Informers-和-Listers"><a href="#1-使用-Informers-和-Listers" class="headerlink" title="1. 使用 Informers 和 Listers"></a>1. <strong>使用 Informers 和 Listers</strong></h3><ul>
<li><strong>原因</strong>：减少与 API 服务器的直接交互，避免请求限额问题。</li>
<li><strong>做法</strong>：使用 Informers 缓存资源状态，提升性能。</li>
</ul>
<h3 id="2-实现幂等的-Reconcile-方法"><a href="#2-实现幂等的-Reconcile-方法" class="headerlink" title="2. 实现幂等的 Reconcile 方法"></a>2. <strong>实现幂等的 Reconcile 方法</strong></h3><ul>
<li><strong>原因</strong>：Reconcile 方法可能被多次调用，确保其幂等性避免状态不一致。</li>
<li><strong>实践</strong>：<ul>
<li>获取当前资源状态，与期望状态对比并更新。</li>
<li>避免在 Reconcile 中执行随机任务或不可重复操作。</li>
</ul>
</li>
</ul>
<h3 id="3-错误处理和重试机制"><a href="#3-错误处理和重试机制" class="headerlink" title="3. 错误处理和重试机制"></a>3. <strong>错误处理和重试机制</strong></h3><ul>
<li><strong>原因</strong>：应对 API 服务器不可用或资源冲突。</li>
<li><strong>做法</strong>：<ul>
<li>使用 <code>retry.RetryOnConflict</code> 处理资源冲突。</li>
<li>记录不可恢复的错误，触发告警或采取补救措施。</li>
</ul>
</li>
</ul>
<h3 id="4-使用-Finalizers-进行资源清理"><a href="#4-使用-Finalizers-进行资源清理" class="headerlink" title="4. 使用 Finalizers 进行资源清理"></a>4. <strong>使用 Finalizers 进行资源清理</strong></h3><ul>
<li><strong>作用</strong>：确保删除自定义资源前完成必要的清理（如删除外部资源）。</li>
</ul>
<h3 id="5-遵循最小权限原则-RBAC"><a href="#5-遵循最小权限原则-RBAC" class="headerlink" title="5. 遵循最小权限原则 (RBAC)"></a>5. <strong>遵循最小权限原则 (RBAC)</strong></h3><ul>
<li><strong>原因</strong>：减少安全风险，避免权限滥用。</li>
<li><strong>做法</strong>：<ul>
<li>仅授予必要的权限。</li>
<li>定期审查 RBAC 配置。</li>
</ul>
</li>
</ul>
<h3 id="6-使用-Context-管理请求"><a href="#6-使用-Context-管理请求" class="headerlink" title="6. 使用 Context 管理请求"></a>6. <strong>使用 Context 管理请求</strong></h3><ul>
<li><strong>原因</strong>：确保请求超时和取消逻辑的一致性。</li>
</ul>
<h3 id="7-日志记录与监控"><a href="#7-日志记录与监控" class="headerlink" title="7. 日志记录与监控"></a>7. <strong>日志记录与监控</strong></h3><ul>
<li><strong>做法</strong>：<ul>
<li>使用结构化日志（如 <code>logr</code>）。</li>
<li>集成 Prometheus 暴露监控指标。</li>
</ul>
</li>
</ul>
<h3 id="8-全面的测试覆盖"><a href="#8-全面的测试覆盖" class="headerlink" title="8. 全面的测试覆盖"></a>8. <strong>全面的测试覆盖</strong></h3><ul>
<li><strong>单元测试</strong>：测试 Reconcile 的逻辑和处理流程。</li>
<li><strong>集成测试</strong>：使用 <code>envtest</code> 模拟 Kubernetes 环境。</li>
<li><strong>端到端测试</strong>：在实际集群上验证控制器行为。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>k8s operator开发步骤</title>
    <url>/2024/09/25/k8s-operator%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<h3 id="安装kubebuilder"><a href="#安装kubebuilder" class="headerlink" title="安装kubebuilder"></a>安装kubebuilder</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -L -o kubebuilder &lt;https://go.kubebuilder.io/dl/latest/$&gt;(go env GOOS)/$(go env GOARCH)</span><br><span class="line">chmod +x kubebuilder &amp;&amp; mv kubebuilder /usr/local/bin/</span><br></pre></td></tr></table></figure>

<h3 id="1-创建脚手架工程"><a href="#1-创建脚手架工程" class="headerlink" title="1. 创建脚手架工程"></a><strong>1. 创建脚手架工程</strong></h3><ul>
<li><code>kubebuilder init --domain edas.io</code><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">kubebuilder init 命令参数:</span><br><span class="line">-domain：指定 <span class="variable constant_">CRD</span> 的域名，通常使用组织或项目的域名，确保 <span class="variable constant_">CRD</span> 名称唯一。</span><br><span class="line">-repo：指定 <span class="title class_">Go</span> 模块的路径，通常是 <span class="title class_">GitHub</span> 上的路径，用于代码组织。</span><br><span class="line">-version：指定使用的 <span class="title class_">Kubernetes</span> <span class="variable constant_">API</span> 版本，默认为 v1。</span><br><span class="line">-make-symlinks：创建指向 <span class="variable constant_">API</span> 和 <span class="title class_">Controller</span> 代码的符号链接，便于管理。</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-创建-API"><a href="#2-创建-API" class="headerlink" title="2. 创建 API"></a><strong>2. 创建 API</strong></h3><ul>
<li><code>kubebuilder create api --group apps --version v1alpha1 --kind Application</code></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">kubebuilder create api 命令参数:</span><br><span class="line">-group：指定 <span class="variable constant_">API</span> 组名，用于区分不同的资源。</span><br><span class="line">-version：指定 <span class="variable constant_">API</span> 版本，通常为 v1 或其他。</span><br><span class="line">-kind：指定自定义资源的类型名称，通常采用大写驼峰命名法。</span><br><span class="line">-resource：是否创建 <span class="variable constant_">CRD</span> 资源，默认为是。</span><br><span class="line">-controller：是否创建控制器，默认为是。</span><br><span class="line">-controller：可以不添加任何参数，系统会提示输入基本配置。</span><br></pre></td></tr></table></figure>

<h3 id="3-定义-CRD"><a href="#3-定义-CRD" class="headerlink" title="3. 定义 CRD"></a><strong>3. 定义 CRD</strong></h3><ul>
<li><code>make manifests</code> 命令生成 CRD 文件，便于在集群中应用。</li>
</ul>
<h3 id="4-编写-Controller-逻辑"><a href="#4-编写-Controller-逻辑" class="headerlink" title="4. 编写 Controller 逻辑"></a><strong>4. 编写 Controller 逻辑</strong></h3><ul>
<li>编辑生成的控制器代码，添加业务逻辑，处理自定义资源的增、删、改、查等操作。</li>
</ul>
<h3 id="5-构建和部署-Operator"><a href="#5-构建和部署-Operator" class="headerlink" title="5.构建和部署 Operator"></a><strong>5.构建和部署 Operator</strong></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">make docker-build # 构建镜像</span><br><span class="line">make docker-push # 推送镜像</span><br><span class="line">make deploy：安装controller到k8s （make undeploy：删除controller）</span><br><span class="line"></span><br><span class="line">#或者：</span><br><span class="line">#安装<span class="variable constant_">CRD</span>到k8s，可以先手动安装（make uninstall：删除<span class="variable constant_">CRD</span>）</span><br><span class="line">make install </span><br><span class="line"></span><br><span class="line">kubectl get crd</span><br></pre></td></tr></table></figure>

<h3 id="6-测试和验证："><a href="#6-测试和验证：" class="headerlink" title="6.测试和验证："></a><strong>6.测试和验证</strong>：</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 启动controller</span><br><span class="line">make run</span><br></pre></td></tr></table></figure>

<h3 id="7-卸载CRD："><a href="#7-卸载CRD：" class="headerlink" title="7.卸载CRD："></a><strong>7.卸载CRD</strong>：</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 卸载crd</span><br><span class="line">make uninstall</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>开发流程包括项目初始化、API 创建、控制器实现、生成 CRD、构建和部署，最后进行测试和验证。<br>参考文档：<br><a href="https://podsbook.com/posts/kubernetes/operator">https://podsbook.com/posts/kubernetes/operator</a><br><a href="https://www.rushui.net/posts/kubebuilder-demo-simple">https://www.rushui.net/posts/kubebuilder-demo-simple</a></p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>k8s patch 用法</title>
    <url>/2024/10/29/k8s-patch-%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p><code>kubectl patch</code> 的 <code>--type=&#39;json&#39;</code> 方式是一种非常灵活的 JSON Patch 操作，可以实现 添加、删除、更新多个字段 的功能。以下是具体的操作方式和案例：</p>
<hr>
<h3 id="JSON-Patch-的基本结构"><a href="#JSON-Patch-的基本结构" class="headerlink" title="JSON Patch 的基本结构"></a>JSON Patch 的基本结构</h3><p>JSON Patch 遵循 <a href="https://tools.ietf.org/html/rfc6902">RFC 6902</a> 标准。常用操作有：  </p>
<ul>
<li><code>add</code>：向指定路径添加新字段。</li>
<li><code>remove</code>：删除指定路径的字段。</li>
<li><code>replace</code>：更新已有字段的值。</li>
<li><code>copy</code>：复制一个字段到另一个位置。</li>
<li><code>move</code>：移动字段。</li>
<li><code>test</code>：用于断言字段是否存在，常用于保证安全更新。</li>
</ul>
<hr>
<h3 id="1-更新已有字段的值（replace）"><a href="#1-更新已有字段的值（replace）" class="headerlink" title="1. 更新已有字段的值（replace）"></a>1. 更新已有字段的值（<code>replace</code>）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl patch cm ingress-nginx-controller -n ingress-nginx --<span class="built_in">type</span>=<span class="string">&#x27;json&#x27;</span> \</span><br><span class="line">-p=<span class="string">&#x27;[&#123;&quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;/data/ssl-protocols&quot;, &quot;value&quot;: &quot;TLSv1.2 TLSv1.3&quot;&#125;]&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>op: &quot;replace&quot;</code>：替换现有字段值。</li>
<li><code>path: &quot;/data/ssl-protocols&quot;</code>：要更新的字段路径。</li>
<li><code>value</code>：新的值。</li>
</ul>
<hr>
<h3 id="2-添加多个新字段（add）"><a href="#2-添加多个新字段（add）" class="headerlink" title="2. 添加多个新字段（add）"></a>2. 添加多个新字段（<code>add</code>）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl patch cm ingress-nginx-controller -n ingress-nginx --<span class="built_in">type</span>=<span class="string">&#x27;json&#x27;</span> \</span><br><span class="line">-p=<span class="string">&#x27;[</span></span><br><span class="line"><span class="string">  &#123;&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/data/ssl-protocols&quot;, &quot;value&quot;: &quot;TLSv1 TLSv1.1 TLSv1.2 TLSv1.3&quot;&#125;,</span></span><br><span class="line"><span class="string">  &#123;&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/data/ssl-ciphers&quot;, &quot;value&quot;: &quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:@SECLEVEL=0&quot;&#125;</span></span><br><span class="line"><span class="string">]&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>op: &quot;add&quot;</code>：为 ConfigMap 增加新的键值对。</li>
<li>多个字段用数组表示，每个 JSON Patch 操作为一个对象。</li>
</ul>
<hr>
<h3 id="3-删除多个字段（remove）"><a href="#3-删除多个字段（remove）" class="headerlink" title="3. 删除多个字段（remove）"></a>3. 删除多个字段（<code>remove</code>）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl patch cm ingress-nginx-controller -n ingress-nginx --<span class="built_in">type</span>=<span class="string">&#x27;json&#x27;</span> \</span><br><span class="line">-p=<span class="string">&#x27;[</span></span><br><span class="line"><span class="string">  &#123;&quot;op&quot;: &quot;remove&quot;, &quot;path&quot;: &quot;/data/ssl-protocols&quot;&#125;,</span></span><br><span class="line"><span class="string">  &#123;&quot;op&quot;: &quot;remove&quot;, &quot;path&quot;: &quot;/data/ssl-ciphers&quot;&#125;</span></span><br><span class="line"><span class="string">]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查主机port占用</span></span><br><span class="line">kubectl get deploy ingress-nginx-controller -n ingress-nginx -o jsonpath=<span class="string">&#x27;&#123;.spec.template.spec.containers[0].ports&#125;&#x27;</span> | jq</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除主机port</span></span><br><span class="line">kubectl patch deploy ingress-nginx-controller -n ingress-nginx \</span><br><span class="line">--<span class="built_in">type</span>=<span class="string">&#x27;json&#x27;</span> \</span><br><span class="line">-p=<span class="string">&#x27;[</span></span><br><span class="line"><span class="string">  &#123;&quot;op&quot;: &quot;remove&quot;, &quot;path&quot;: &quot;/spec/template/spec/containers/0/ports/0/hostPort&quot;&#125;,</span></span><br><span class="line"><span class="string">  &#123;&quot;op&quot;: &quot;remove&quot;, &quot;path&quot;: &quot;/spec/template/spec/containers/0/ports/1/hostPort&quot;&#125;,</span></span><br><span class="line"><span class="string">  &#123;&quot;op&quot;: &quot;remove&quot;, &quot;path&quot;: &quot;/spec/template/spec/containers/0/ports/2/hostPort&quot;&#125;</span></span><br><span class="line"><span class="string">]&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><code>op: &quot;remove&quot;</code>：删除指定字段。</li>
<li>如果字段不存在，会报错，可以先用 <code>kubectl get</code> 检查字段。</li>
</ul>
<hr>
<h3 id="4-复制字段（copy）"><a href="#4-复制字段（copy）" class="headerlink" title="4. 复制字段（copy）"></a>4. 复制字段（<code>copy</code>）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl patch cm ingress-nginx-controller -n ingress-nginx --<span class="built_in">type</span>=<span class="string">&#x27;json&#x27;</span> \</span><br><span class="line">-p=<span class="string">&#x27;[&#123;&quot;op&quot;: &quot;copy&quot;, &quot;from&quot;: &quot;/data/ssl-protocols&quot;, &quot;path&quot;: &quot;/data/backup-ssl-protocols&quot;&#125;]&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>op: &quot;copy&quot;</code>：从 <code>/data/ssl-protocols</code> 复制值到 <code>/data/backup-ssl-protocols</code>。</li>
</ul>
<hr>
<h3 id="5-条件测试字段（test）并更新"><a href="#5-条件测试字段（test）并更新" class="headerlink" title="5. 条件测试字段（test）并更新"></a>5. 条件测试字段（<code>test</code>）并更新</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl patch cm ingress-nginx-controller -n ingress-nginx --<span class="built_in">type</span>=<span class="string">&#x27;json&#x27;</span> \</span><br><span class="line">-p=<span class="string">&#x27;[</span></span><br><span class="line"><span class="string">  &#123;&quot;op&quot;: &quot;test&quot;, &quot;path&quot;: &quot;/data/ssl-protocols&quot;, &quot;value&quot;: &quot;TLSv1 TLSv1.2&quot;&#125;,</span></span><br><span class="line"><span class="string">  &#123;&quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;/data/ssl-protocols&quot;, &quot;value&quot;: &quot;TLSv1.2 TLSv1.3&quot;&#125;</span></span><br><span class="line"><span class="string">]&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>op: &quot;test&quot;</code>：检查 <code>ssl-protocols</code> 的值是否匹配。如果不匹配，则不会执行替换操作。</li>
</ul>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用 <code>--type=&#39;json&#39;</code> 进行 PATCH 操作非常灵活，特别适合批量修改配置。  </p>
<ul>
<li><code>add</code>：新增字段。</li>
<li><code>replace</code>：更新现有字段。</li>
<li><code>remove</code>：删除不需要的字段。</li>
<li><code>copy</code> 和 <code>move</code>：在 JSON 中重构结构。</li>
<li><code>test</code>：用于确保一致性，避免不正确的更新。</li>
</ul>
<p>这些操作特别适合集群自动化运维和精细化的配置变更。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>k8s service account demo</title>
    <url>/2024/09/09/k8s-service-account-demo/</url>
    <content><![CDATA[<p>在 Kubernetes 中使用 Service Account（SA）时，可以通过配置自定义的 Service Account 来实现对集群资源的访问权限。下面是一个创建 Service Account 并配置其访问集群资源的案例。</p>
<h3 id="步骤-1：创建-Service-Account"><a href="#步骤-1：创建-Service-Account" class="headerlink" title="步骤 1：创建 Service Account"></a>步骤 1：创建 Service Account</h3><p>首先，创建一个 Service Account。例如，命名为 <code>custom-sa</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create serviceaccount custom-sa</span><br></pre></td></tr></table></figure>

<p>这将会在当前命名空间中创建一个名为 <code>custom-sa</code> 的 Service Account。在 Kubernetes 1.24 及之后的版本中，Service Account 不再默认生成 Secret。为 Service Account 手动创建 Secret：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">custom-sa-secret</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/service-account.name:</span> <span class="string">&quot;custom-sa&quot;</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">kubernetes.io/service-account-token</span></span><br></pre></td></tr></table></figure>
<p>然后应用该 YAML 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f custom-sa-secret.yaml</span><br></pre></td></tr></table></figure>
<p>确认 Secret 被绑定： 使用以下命令查看 Service Account 是否绑定了 Secret：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl describe sa custom-sa</span><br></pre></td></tr></table></figure>
<p>确认 secrets 部分列出了 custom-sa-secret。</p>
<h3 id="步骤-2：创建-Role-或-ClusterRole"><a href="#步骤-2：创建-Role-或-ClusterRole" class="headerlink" title="步骤 2：创建 Role 或 ClusterRole"></a>步骤 2：创建 Role 或 ClusterRole</h3><p><strong>Role</strong> 用于定义在指定命名空间中的权限，而 <strong>ClusterRole</strong> 用于集群范围的权限。根据需要，你可以创建一个 <code>Role</code> 或 <code>ClusterRole</code>。</p>
<h4 id="创建-Role（针对某一命名空间的权限）："><a href="#创建-Role（针对某一命名空间的权限）：" class="headerlink" title="创建 Role（针对某一命名空间的权限）："></a>创建 Role（针对某一命名空间的权限）：</h4><p>假设你想为该 Service Account 赋予在某个命名空间中读取 Pods 的权限，你可以这样创建一个 <code>Role</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-reader</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]  <span class="comment"># &quot;&quot; 代表 core API group</span></span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;list&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>保存为 <code>role.yaml</code> 文件后，执行以下命令来应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f role.yaml</span><br></pre></td></tr></table></figure>

<h4 id="创建-ClusterRole（全集群范围的权限）："><a href="#创建-ClusterRole（全集群范围的权限）：" class="headerlink" title="创建 ClusterRole（全集群范围的权限）："></a>创建 ClusterRole（全集群范围的权限）：</h4><p>如果你想授予集群范围的权限，可以创建一个 <code>ClusterRole</code>。例如，授予读取集群中所有命名空间下 Pods 的权限：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-pod-reader</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;list&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>保存为 <code>clusterrole.yaml</code>，然后执行以下命令来应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f clusterrole.yaml</span><br></pre></td></tr></table></figure>

<h3 id="步骤-3：绑定-Role-或-ClusterRole-到-Service-Account"><a href="#步骤-3：绑定-Role-或-ClusterRole-到-Service-Account" class="headerlink" title="步骤 3：绑定 Role 或 ClusterRole 到 Service Account"></a>步骤 3：绑定 Role 或 ClusterRole 到 Service Account</h3><p>为了使 Service Account 具有访问权限，必须将其与 <code>Role</code> 或 <code>ClusterRole</code> 绑定。</p>
<h4 id="绑定-Role："><a href="#绑定-Role：" class="headerlink" title="绑定 Role："></a>绑定 Role：</h4><p>如果你创建了 <code>Role</code>，使用以下 <code>RoleBinding</code> 将 <code>custom-sa</code> 与 <code>Role</code> 绑定：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">read-pods-binding</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">custom-sa</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-reader</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>

<p>应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f rolebinding.yaml</span><br></pre></td></tr></table></figure>

<h4 id="绑定-ClusterRole："><a href="#绑定-ClusterRole：" class="headerlink" title="绑定 ClusterRole："></a>绑定 ClusterRole：</h4><p>如果你使用的是 <code>ClusterRole</code>，可以通过 <code>ClusterRoleBinding</code> 进行绑定：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">read-pods-cluster-binding</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">custom-sa</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-pod-reader</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>

<p>应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f clusterrolebinding.yaml</span><br></pre></td></tr></table></figure>

<h3 id="步骤-4：创建-Kubeconfig-文件"><a href="#步骤-4：创建-Kubeconfig-文件" class="headerlink" title="步骤 4：创建 Kubeconfig 文件"></a>步骤 4：创建 Kubeconfig 文件</h3><p>为了使这个 Service Account 能够通过 kubeconfig 文件访问集群，需要以下步骤：</p>
<ol>
<li>获取 Service Account 的 token：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TOKEN=$(kubectl get secret custom-sa-secret -o jsonpath=<span class="string">&#x27;&#123;.data.token&#125;&#x27;</span> | <span class="built_in">base64</span> --decode)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>获取集群的 CA 证书：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CA_CERT=$(kubectl get secret custom-sa-secret -o jsonpath=<span class="string">&#x27;&#123;.data.ca\.crt&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>获取集群的 API server 地址：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SERVER=$(kubectl config view --minify -o jsonpath=<span class="string">&#x27;&#123;.clusters[0].cluster.server&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建 kubeconfig 文件：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; custom-sa.kubeconfig</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Config</span></span><br><span class="line"><span class="string">clusters:</span></span><br><span class="line"><span class="string">- cluster:</span></span><br><span class="line"><span class="string">    certificate-authority-data: $&#123;CA_CERT&#125;</span></span><br><span class="line"><span class="string">    server: $&#123;SERVER&#125;</span></span><br><span class="line"><span class="string">  name: kubernetes</span></span><br><span class="line"><span class="string">contexts:</span></span><br><span class="line"><span class="string">- context:</span></span><br><span class="line"><span class="string">    cluster: kubernetes</span></span><br><span class="line"><span class="string">    user: custom-sa</span></span><br><span class="line"><span class="string">  name: custom-sa-context</span></span><br><span class="line"><span class="string">current-context: custom-sa-context</span></span><br><span class="line"><span class="string">users:</span></span><br><span class="line"><span class="string">- name: custom-sa</span></span><br><span class="line"><span class="string">  user:</span></span><br><span class="line"><span class="string">    token: $&#123;TOKEN&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl --kubeconfig=./custom-sa.kubeconfig get sa -n kube-system</span><br></pre></td></tr></table></figure>

<h3 id="ClusterRole-与-Role-的区别"><a href="#ClusterRole-与-Role-的区别" class="headerlink" title="ClusterRole 与 Role 的区别"></a>ClusterRole 与 Role 的区别</h3><ul>
<li><strong>Role</strong>：仅限于某个命名空间，不能跨命名空间生效。它用于授予某个命名空间内资源的权限。</li>
<li><strong>ClusterRole</strong>：在整个集群范围内生效，可以跨命名空间访问资源。它用于管理集群级别的资源或多个命名空间的资源。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>创建一个 <code>Service Account</code>。</li>
<li>创建一个 <code>Role</code> 或 <code>ClusterRole</code>，根据需求分配权限。</li>
<li>将 <code>Service Account</code> 通过 <code>RoleBinding</code> 或 <code>ClusterRoleBinding</code> 绑定到 <code>Role</code> 或 <code>ClusterRole</code>。</li>
<li>使用 <code>Service Account</code> 的 token 配置 kubeconfig 文件，使其可以访问集群。</li>
</ol>
<hr>
<p>在 Kubernetes 1.24 及以上版本中，手动为 ServiceAccount 创建并绑定一个 Secret 令牌时，需要特别注意 <code>metadata.annotations</code> 的设置，直接通过 <code>kubectl create secret</code> 命令不会自动添加这些注解，因此容易出错。这里是最终的解决步骤：</p>
<h3 id="使用命令的解决方法"><a href="#使用命令的解决方法" class="headerlink" title="使用命令的解决方法"></a>使用命令的解决方法</h3><ol>
<li><p><strong>创建 ServiceAccount</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create serviceaccount my-sa -n kube-system</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>手动创建并绑定 Secret</strong>：<br>手动创建一个符合要求的 <code>ServiceAccountToken</code> Secret，确保它包含必要的 <code>metadata.annotations</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> kubectl create secret generic my-sa-token \</span><br><span class="line">--namespace kube-system \</span><br><span class="line">--<span class="built_in">type</span> kubernetes.io/service-account-token \</span><br><span class="line">--dry-run=client -o yaml | \</span><br><span class="line">kubectl annotate --<span class="built_in">local</span> -f - \</span><br><span class="line">  kubernetes.io/service-account.name=my-sa -o yaml | \</span><br><span class="line">kubectl apply -f -</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>执行以下命令，确保 Secret 与 ServiceAccount 已正确关联：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system get serviceaccount my-sa -o yaml</span><br><span class="line">kubectl -n kube-system get secret my-sa-token -o yaml</span><br></pre></td></tr></table></figure>

<h3 id="获取令牌"><a href="#获取令牌" class="headerlink" title="获取令牌"></a>获取令牌</h3><p>从 Secret 中获取并解码 <code>token</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system get secret my-sa-token -o jsonpath=<span class="string">&quot;&#123;.data.token&#125;&quot;</span> | <span class="built_in">base64</span> --decode</span><br></pre></td></tr></table></figure>

<hr>
<p>清理前面步骤中创建的 <code>ServiceAccount</code>、<code>Secret</code> 和 <code>ClusterRoleBinding</code> 等测试资源：</p>
<ol>
<li><p><strong>删除 ServiceAccount</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete serviceaccount my-sa -n kube-system</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除 Secret</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete secret my-sa-token -n kube-system</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除 ClusterRoleBinding</strong>：<br>如果创建了 <code>ClusterRoleBinding</code> 用于 <code>my-sa</code>，可以使用以下命令删除：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete clusterrolebinding my-sa-binding</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这将清理所有与 <code>my-sa</code> 相关的资源。执行完后可以检查确认相关资源已删除：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system get serviceaccount my-sa</span><br><span class="line">kubectl -n kube-system get secret my-sa-token</span><br><span class="line">kubectl get clusterrolebinding my-sa-binding</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>k8s实用工具</title>
    <url>/2024/11/29/k8s%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="kubetail"><a href="#kubetail" class="headerlink" title="kubetail"></a>kubetail</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#https://github.com/johanhaleby/kubetail</span></span><br><span class="line">wget https://github.com/johanhaleby/kubetail/archive/refs/tags/1.6.20.tar.gz</span><br><span class="line">tar zxvf 1.6.20.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> kubetail-1.6.20</span><br><span class="line"><span class="built_in">cp</span> kubetail /usr/local/bin/</span><br><span class="line"><span class="built_in">cp</span> kubetail.plugin.zsh /etc/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#eg:</span></span><br><span class="line">kt <span class="string">&quot;backend|stark&quot;</span> --regex</span><br></pre></td></tr></table></figure>

<h2 id="kubecolor"><a href="#kubecolor" class="headerlink" title="kubecolor"></a>kubecolor</h2><ul>
<li><a href="https://github.com/hidetatz/kubecolor">https://github.com/hidetatz/kubecolor</a></li>
</ul>
<h2 id="k9s"><a href="#k9s" class="headerlink" title="k9s"></a>k9s</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#https://github.com/derailed/k9s</span></span><br><span class="line">curl -sS https://webinstall.dev/k9s | bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.config/envman/PATH.<span class="built_in">env</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>k8s最佳实践(二)</title>
    <url>/2024/11/08/k8s%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E4%BA%8C/</url>
    <content><![CDATA[<p>在 Kubernetes 中，Network Policies、Admission Webhooks 和 Admission Controllers 是实现集群安全、资源控制与策略验证的关键部分。以下是关于这几项功能的实践总结：</p>
<ol>
<li>常见 Network Policies 策略</li>
</ol>
<p>Network Policies 是基于命名空间的网络隔离策略，通过设置 Pod 的入站和出站流量规则来控制网络访问。常见策略及其特点如下：</p>
<pre><code>•	默认隔离：通过创建一个 Network Policy 将所有 ingress 或 egress 设置为空，即默认阻止流量，只有明确允许的流量才能访问。这在实际应用中非常适合对敏感服务进行隔离，减少网络攻击面。
•	特定端口限制：只允许某些端口的入站流量。例如，将数据库服务的 Network Policy 配置为只允许从特定应用 Pod 的请求，并限制在特定的端口（如 3306）上连接。这种策略有效地减少了开放端口的数量，提高了安全性。
•	基于标签的策略：在 Network Policies 中，基于 Pod 标签来允许流量。这使得可以灵活地控制服务之间的访问，例如允许同一应用的多个组件互相通信，但限制外部流量。
•	跨命名空间的访问控制：默认情况下，Network Policies 只在当前命名空间内生效。对于需要跨命名空间的访问，可以通过 namespaceSelector 指定允许的命名空间流量。此策略适用于多租户环境中，确保各租户之间的隔离性。
•	双向隔离（Ingress 和 Egress）：一些应用场景需要双向流量控制。例如，限制应用 Pod 只能从特定 IP 段或外部服务获得数据，并控制它们的流出流量。这有助于防止敏感信息泄露，并减少外部威胁。
•	CIDR 限制：通过 CIDR 范围控制 IP 地址访问，例如仅允许来自某一特定子网的流量。对于需要局部网络保护的 Pod，这种策略可有效阻止未经允许的访问。
</code></pre>
<p>关注点：</p>
<pre><code>•	优先级：Network Policies 不具备优先级，策略应用是基于 “允许优先”。多条策略的组合可能会导致意外的流量过滤或开放。
•	性能：在大型集群中，复杂的 Network Policies 可能影响网络性能，尤其是基于大量 IP 地址或复杂标签的规则。
•	兼容性：不同 CNI 插件（如 Calico、Weave）支持的 Network Policies 细节上可能存在差异，需确保策略兼容性。
</code></pre>
<ol start="2">
<li>Admission Webhook 注意事项</li>
</ol>
<p>Admission Webhook 是在资源创建或更新请求达到 API Server 时，对其进行拦截和动态处理的一种机制。它分为两类：Validating Webhook（用于验证请求合法性）和 Mutating Webhook（用于动态修改请求）。</p>
<pre><code>•	动态修改资源：Mutating Webhook 可以在创建资源时自动注入一些字段（如默认镜像拉取策略、标签等），适合自动化配置的场景。实践中，如 Sidecar 容器的自动注入可通过此功能实现。
•	顺序和优先级：多个 Admission Webhook 的执行是无序的，如果有依赖关系，需注意可能的顺序冲突。例如，确保 Mutating Webhook 在 Validating Webhook 之前触发，以避免未修改的资源触发不必要的验证错误。
•	失败策略：在配置 Admission Webhook 时，可设置 failurePolicy 为 Ignore 或 Fail。在生产环境中，建议对非关键性检查使用 Ignore 以确保高可用性，对关键检查（如安全性验证）使用 Fail。
•	性能影响：Admission Webhook 会影响 API Server 的响应时间，尤其是当 Webhook 服务响应延迟较高时。在实践中可通过减少 Webhook 校验的资源范围或避免阻塞性请求来优化性能。
•	兼容性：Admission Webhook 需要 K8s 1.9 以上版本支持，对低版本集群可能需要其他认证或审计机制替代。
</code></pre>
<ol start="3">
<li>Admission Controller 的注意事项</li>
</ol>
<p>Admission Controller 是 Kubernetes 中用于在 API Server 处理请求的过程中动态拦截和检查资源配置的组件。它内置了一系列控制器，负责配置、验证和强制执行集群策略。</p>
<pre><code>•	PodSecurityPolicy（PSP）：限制 Pod 安全上下文（如运行用户、特权权限等），用于提升集群安全性。PSP 是一种有效的权限控制工具，但它的使用较复杂，容易导致权限不足的 Pod 无法创建。PSP 从 Kubernetes 1.21 开始已被标记为弃用，建议使用 OPA Gatekeeper 替代实现。
•	ResourceQuota：通过限制命名空间的资源上限（如 CPU、内存、对象数量等），防止资源滥用。设置时需要合理配置，以避免单一命名空间的资源超额导致其他服务受影响。特别是在多租户集群中，有效的 ResourceQuota 是资源控制的关键。
•	LimitRange：在 Pod 或容器级别设置资源的最小、最大请求值，防止资源不足或资源浪费。开发中应确保合理的默认值，避免 Pod 配置过于宽泛或局限。
•	ImagePolicyWebhook：控制镜像的使用，可以防止拉取未经批准或不安全的镜像。适用于需要集中控制镜像仓库访问的场景，提升集群的整体安全性。
•	NamespaceLifecycle：确保在删除命名空间时清理相关资源，以避免资源泄漏。此 Admission Controller 对动态调整命名空间的生命周期管理尤为重要。
</code></pre>
<p><img src="https://raw.githubusercontent.com/shispring/picgo/master/frc-c9ec2afa9d8d6c07ac428c1aea35f1ea.jpeg" alt="webhook1" title="webhook1"></p>
<p><img src="https://raw.githubusercontent.com/shispring/picgo/master/admission-controller-phases.png" alt="webhook2" title="webhook2"></p>
<ol start="4">
<li><p>总结与最佳实践</p>
<p> •	分层防护：结合 Network Policies、RBAC、PSP 等，形成多层次的集群安全体系。<br> •	测试和验证：在生产集群应用策略前，可使用沙盒环境测试 Admission Webhook 和 Network Policies 的效果，以避免策略冲突导致服务中断。<br> •	性能与可用性：确保 Admission Webhook 的执行快速、稳定，避免对集群的可用性产生影响。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>k8s最佳实践(-)</title>
    <url>/2024/11/08/k8s%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>Kubernetes（K8s）开发涉及到大量的组件和细节性问题。以下是 Kubernetes 开发中的最佳实践，以及需要关注的组件、调度算法、资源管理等关键内容，以便全面掌握 Kubernetes 开发过程的方方面面。</p>
<ol>
<li><p>核心组件的理解与设计最佳实践</p>
<p> •	API Server：作为 Kubernetes 的控制平面，API Server 处理所有集群内部组件与用户的请求。对于 API Server 的开发，要关注认证（Authentication）、授权（Authorization）、准入控制（Admission Control）等机制，并确保集群资源的安全性和权限管理。<br> •	etcd：Kubernetes 中的键值存储数据库，保存所有集群的状态。高可用和数据一致性对 etcd 来说尤为重要。推荐使用备份机制，并在多节点集群中启用 etcd 集群来提高可靠性。<br> •	Controller Manager：控制循环是 Kubernetes 的核心概念之一，Controller Manager 中负责资源调节和自动化的各种控制器。理解控制器如何检测和纠正状态差异，对于开发新的控制器有很大帮助。<br> •	Scheduler：负责将 Pod 分配到适当的节点上。在 Scheduler 中，需注意如何使用优先级函数、过滤策略（Predicates）、得分策略（Scores）等，确保 Pod 的资源需求与节点资源的最佳匹配。<br> •	Kubelet：运行在每个节点上的核心代理，负责管理 Pod 生命周期和容器运行。Kubelet 需要频繁与 API Server 通信，因此需要特别注意网络连接和性能优化。</p>
</li>
<li><p>调度器（Scheduler）的关键算法和优化</p>
</li>
</ol>
<p>Kubernetes 调度器的调度过程分为预选（Predicates）和优选（Priorities）两部分：</p>
<pre><code>•	预选（Predicates）：在调度开始时，通过过滤节点资源（如 CPU、内存、地域等条件），排除不适合的节点。这包括以下关键算法：
•	PodFitsResources：判断节点是否有足够资源满足 Pod 的需求。
•	PodFitsHost：适合具有特定节点需求的 Pod。
•	PodFitsTopology：检查拓扑需求，例如反亲和性（Anti-Affinity）规则。
•	优选（Priorities）：选择预选中最合适的节点。优选算法会为每个节点打分并选择得分最高的节点。常见优选算法包括：
•	LeastRequestedPriority：优先选择资源使用率低的节点。
•	BalancedResourceAllocation：尽量将 Pod 分配到资源分布均匀的节点上。
•	InterPodAffinityPriority：根据 Pod 的亲和性或反亲和性需求打分。
</code></pre>
<p>调度器的调优在大型集群中尤为重要。例如，可以通过 自定义调度策略 来满足业务需求，或者增加 多调度器 支持不同业务的多种调度策略。</p>
<ol start="3">
<li><p>资源管理和扩展性</p>
<p> •	资源请求和限制（Requests &amp; Limits）：在 Pod 中设置合理的资源请求和限制，确保系统组件和业务组件的资源隔离。对于 CPU 密集型或内存密集型应用，调整资源请求和限制能够避免资源争用。<br> •	节点自动扩展（Cluster Autoscaler）：在集群中启用 Cluster Autoscaler，可以根据 Pod 的 Pending 状态自动增加节点。结合 Horizontal Pod Autoscaler（HPA），可以根据流量自动扩展 Pod。<br> •	资源配额（Resource Quotas）和限制（LimitRanges）：在命名空间中设置资源配额，避免某一命名空间资源消耗过多而影响集群整体可用性。</p>
</li>
<li><p>安全性与认证</p>
<p> •	RBAC（Role-Based Access Control）：为用户、服务账户分配适当的权限。使用 RBAC 可以细粒度地控制 API 访问权限，保护集群安全。<br> •	Network Policies：定义 Pod 网络流量的访问控制策略，确保集群网络安全。合理的 Network Policies 可以隔离不同应用之间的通信。<br> •	Admission Controller：准入控制器可以用来在资源创建、更新等过程中进行动态策略检查，如 Pod 安全策略（PodSecurityPolicy）、限制异常配置等。</p>
</li>
<li><p>性能优化</p>
<p> •	容器和镜像优化：避免在容器中运行不必要的进程。使用更小的基础镜像（如 Alpine）能有效减少镜像大小，提升镜像的拉取速度。<br> •	缓存和存储：配置合理的存储类，选择适合应用需求的存储系统（如 NFS、Ceph）。对于高频读写应用，使用缓存策略可以提升存储性能。<br> •	监控与日志：利用 Prometheus 和 Grafana 监控集群资源状态，及时发现性能瓶颈。使用 Fluentd 等工具集中收集日志，便于快速排查问题。</p>
</li>
<li><p>开发调试和测试</p>
<p> •	开发环境搭建：使用 minikube、kind 等工具可以快速搭建本地开发环境；在本地模拟生产环境，减少上线前的测试成本。<br> •	Kubectl Debug：使用 kubectl debug 可以快速进入故障容器环境，查看运行状态。<br> •	CI&#x2F;CD 集成：结合 GitLab CI、Jenkins 等 CI&#x2F;CD 工具自动部署测试，确保每次代码变更自动触发测试和部署流程。</p>
</li>
<li><p>Kubernetes 扩展性设计</p>
<p> •	Operator 模式：使用 Operator 可以将 Kubernetes 的声明式 API 扩展到管理复杂应用的生命周期。例如，可以使用 Operator 实现应用的自动备份、恢复和扩展。<br> •	CRD（Custom Resource Definitions）：CRD 允许开发者定义自定义资源类型，扩展 Kubernetes 的 API，为特定业务逻辑定制资源对象。<br> •	Webhooks：使用 Admission Webhook 可用于在资源创建或修改时进行额外校验，Mutation Webhook 则用于自动填充或修改资源字段。</p>
</li>
<li><p>日志与监控实践</p>
<p> •	Prometheus 和 Grafana：利用 Prometheus 采集资源指标，使用 Grafana 创建可视化仪表盘实时监控集群资源状态。<br> •	ELK Stack（Elasticsearch、Logstash、Kibana）：用于集中式日志收集和分析，可以帮助快速定位集群故障原因。<br> •	Alertmanager：结合 Prometheus 的 Alertmanager 设置告警，确保在节点故障或资源紧张时能及时响应。</p>
</li>
<li><p>调度优化与高可用</p>
<p> •	节点分配策略：通过节点池和亲和性策略，合理分配工作负载，保证关键业务的高可用性。<br> •	Pod 优先级与抢占：使用 Pod 优先级和抢占策略，确保高优先级的工作负载有资源调度保证。<br> •	分区容错：通过 TopologySpreadConstraints 设置不同区域的容错策略，增强跨可用区的容灾能力。</p>
</li>
</ol>
<p>总结</p>
<p>Kubernetes 开发中的最佳实践涵盖了从资源管理、性能调优、安全性到监控和扩展等多方面内容。理解 Kubernetes 核心组件和调度机制，合理设计 CRD 和 Operator，以及使用 CI&#x2F;CD 和监控系统，能显著提升开发和运维的效率。同时，关注网络和资源隔离、权限管理，能帮助在大规模环境中实现高可用、安全的 Kubernetes 集群。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>krew &amp;&amp; kubecm</title>
    <url>/2024/09/25/krew-kubecm/</url>
    <content><![CDATA[<h2 id="一、安装kubectl"><a href="#一、安装kubectl" class="headerlink" title="一、安装kubectl"></a>一、安装kubectl</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置yum源</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.28/rpm/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.28/rpm/repodata/repomd.xml.key</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"></span><br><span class="line">yum --showduplicate list kubectl</span><br><span class="line"></span><br><span class="line">yum install -y kubectl-1.28.12</span><br></pre></td></tr></table></figure>

<h2 id="二、安装krew"><a href="#二、安装krew" class="headerlink" title="二、安装krew"></a>二、安装krew</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#https://www.voidking.com/dev-kubectl-krew/</span></span><br><span class="line"><span class="comment">#https://github.com/kubernetes-sigs/krew/releases</span></span><br><span class="line"><span class="comment">#下载</span></span><br><span class="line">wget https://github.com/kubernetes-sigs/krew/releases/download/v0.4.4/krew-linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar zxvf krew-linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">./krew-linux_amd64 install krew</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置环境变量.bash_profile</span></span><br><span class="line"><span class="built_in">alias</span> k=<span class="string">&#x27;kubectl &#x27;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$&#123;KREW_ROOT:-<span class="variable">$HOME</span>/.krew&#125;</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、krew相关命令"><a href="#三、krew相关命令" class="headerlink" title="三、krew相关命令"></a>三、krew相关命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl krew -h</span><br><span class="line">kubectl krew version</span><br><span class="line"></span><br><span class="line">kubectl krew update</span><br><span class="line">kubectl krew search ingress</span><br><span class="line"></span><br><span class="line">kubectl krew search xxx</span><br><span class="line">kubectl krew install xxx</span><br><span class="line"></span><br><span class="line">kubectl xxx -h</span><br><span class="line"></span><br><span class="line">kubectl krew list</span><br><span class="line"></span><br><span class="line"><span class="comment">#除了使用krew安装kubectl插件之外，还有另外一个更加直接的办法安装kubectl插件：下载插件的二进制文件，和kubectl文件放到一起</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载</span></span><br><span class="line">kubectl krew uninstall</span><br></pre></td></tr></table></figure>

<h2 id="四、安装kubecm"><a href="#四、安装kubecm" class="headerlink" title="四、安装kubecm"></a>四、安装kubecm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#KubeCm 是一个多集群 KubeConfig 访问凭证管理工具，支持展示、切换、添加、删除 KubeConfig 访问凭证到$HOME/.kube/config文件中，方便多集群管理场景。</span></span><br><span class="line"><span class="comment">#https://kubecm.cloud/#/en-us/install</span></span><br><span class="line">kubectl krew install kc</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置环境变量.bash_profile</span></span><br><span class="line"><span class="built_in">alias</span> kc=<span class="string">&#x27;kubectl kc&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> kc=<span class="string">&#x27;kubectl kc&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ks=<span class="string">&#x27;kubectl kc switch &#x27;</span></span><br><span class="line"></span><br><span class="line">kc add -f test-shbt</span><br><span class="line"></span><br><span class="line">kc add -cf test-shbt.conf --context-name test-shbt</span><br><span class="line"></span><br><span class="line">kc list</span><br><span class="line"></span><br><span class="line">kc rename</span><br><span class="line"></span><br><span class="line">kc delete </span><br><span class="line"></span><br><span class="line">kc add -cf test-bjmd.conf --context-name  test-bjmd</span><br><span class="line"></span><br><span class="line">kc switch</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>kubeadm + containerd + calico 部署k8s 1.28</title>
    <url>/2024/11/25/kubeadm-containerd-calico-%E9%83%A8%E7%BD%B2k8s-1-28/</url>
    <content><![CDATA[<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><blockquote>
<p><a href="https://github.com/mingcheng/deploy-k8s-within-aliyun-mirror">https://github.com/mingcheng/deploy-k8s-within-aliyun-mirror</a></p>
</blockquote>
<h2 id="一、机器配置"><a href="#一、机器配置" class="headerlink" title="一、机器配置"></a>一、机器配置</h2><ul>
<li><strong>确保节点的mac地址和product_uuid的唯一性</strong></li>
<li><strong>每台主机不低于2GB 内存大小，CPU大于2核心</strong></li>
<li><strong>集群中的所有主机网络互通</strong></li>
</ul>
<table>
<thead>
<tr>
<th>角色</th>
<th>主机ip</th>
<th>配置</th>
<th>系统版本</th>
<th>内核版本</th>
</tr>
</thead>
<tbody><tr>
<td>k8s-master</td>
<td>11.123.248.100</td>
<td>4C 8G</td>
<td>Anolis OS release 8</td>
<td>5.10</td>
</tr>
<tr>
<td>k8s-node01</td>
<td>11.123.248.101</td>
<td>2C 4G</td>
<td>Anolis OS release 8</td>
<td>5.10</td>
</tr>
<tr>
<td>k8s-node02</td>
<td>11.123.248.102</td>
<td>2C 4G</td>
<td>Anolis OS release 8</td>
<td>5.10</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置主机名</span></span><br><span class="line"><span class="comment">#master节点</span></span><br><span class="line">hostnamectl set-hostname k8s-master</span><br><span class="line"></span><br><span class="line"><span class="comment">#node节点11.123.248.101</span></span><br><span class="line">hostnamectl set-hostname k8s-node01</span><br><span class="line"><span class="comment">#node节点11.123.248.102</span></span><br><span class="line">hostnamectl set-hostname k8s-node02</span><br></pre></td></tr></table></figure>

<h2 id="二、所有节点操作设置"><a href="#二、所有节点操作设置" class="headerlink" title="二、所有节点操作设置"></a>二、所有节点操作设置</h2><ul>
<li>通用安装内容</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置带时间的个性主机名（非必须）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PS1=&#x27;\[\e[37;1m\][\[\e[36;40m\]\t\[\e[32;40m\]\u\[\e[33;40m\]@\[\e[31;40m\]\h \[\e[34;40m\]\w\[\e[37;1m\]]\\$\[\e[m\]&#x27;&quot;</span> &gt;&gt;.bashrc</span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置hosts</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">11.123.248.100  k8s-master</span></span><br><span class="line"><span class="string">11.123.248.101  k8s-node01</span></span><br><span class="line"><span class="string">11.123.243.102  k8s-node02</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭防火墙</span></span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#永久禁用SElinux</span></span><br><span class="line">setenforce 0 </span><br><span class="line">sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭swap</span></span><br><span class="line">swapoff -a &amp;&amp; sed -i <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加网桥过滤及内核转发配置文件，并使之生效</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">vm.swappiness = 0</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载k8s和containerd所需的overlay和br_netfilter两个模块</span></span><br><span class="line">modprobe overlay</span><br><span class="line">modprobe br_netfilter</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/modules-load.d/k8s.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">overlay	</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">lsmod | grep  -e br_netfilter -e overlay</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装ipvs模块，保证在节点重启后能自动加载所需模块---kube-proxy开启ipvs的前置条件</span></span><br><span class="line">yum install ipset ipvsadm -y</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">modprobe -- ip_vs</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_rr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_wrr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_sh</span></span><br><span class="line"><span class="string">modprobe -- nf_conntrack</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用rpm安装containerd</span></span><br><span class="line">wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum list | grep containerd</span><br><span class="line">yum -y install containerd.io</span><br><span class="line"><span class="comment">#设置配置文件</span></span><br><span class="line">containerd config default &gt; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>

<ul>
<li>修改containerd的配置文件：&#x2F;etc&#x2F;containerd&#x2F;config.toml</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#参考地址：</span></span><br><span class="line"><span class="comment">#https://github.com/mingcheng/deploy-k8s-within-aliyun-mirror/blob/master/README.md#containerd</span></span><br><span class="line"><span class="comment">#变更1，修改CgroupDriver为：systemd</span></span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc.options]</span><br><span class="line">...</span><br><span class="line">SystemdCgroup = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#变更2,sandbox_image改镜像地址及版本</span></span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>]</span><br><span class="line">...</span><br><span class="line">sandbox_image = <span class="string">&quot;registry.aliyuncs.com/google_containers/pause:3.9&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#变更3，修改默认的runtime_type</span></span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc]</span><br><span class="line">...</span><br><span class="line">runtime_type = <span class="string">&quot;io.containerd.runc.v2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#变更4,配置下载镜像</span></span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors]</span><br><span class="line">	[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line">		endpoint = [<span class="string">&quot;https://nty7c4os.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;k8s.gcr.io&quot;</span>]</span><br><span class="line">		endpoint = [<span class="string">&quot;registry.aliyuncs.com/google_containers&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>重新启动containerd，安装runc</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#启动containerd</span></span><br><span class="line">systemctl <span class="built_in">enable</span> containerd</span><br><span class="line">systemctl restart containerd</span><br><span class="line">systemctl status containerd</span><br><span class="line">containerd --version</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载runc，注意：如果idc主机无法下载，可在别处下载，然后上传过来</span></span><br><span class="line">wget https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64</span><br><span class="line"><span class="built_in">mv</span> runc.amd64 /usr/sbin/runc &amp;&amp; <span class="built_in">chmod</span> +x /usr/sbin/runc &amp;&amp; runc -v</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加阿里云的kubernetes源</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.28/rpm/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.28/rpm/repodata/repomd.xml.key</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment">#缓存元数据</span></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看kubernetes源当前状态</span></span><br><span class="line">yum --showduplicate list kubeadm kubectl kublet</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装k8s组件，kubelet、kubeadm、kubectl</span></span><br><span class="line">yum install -y kubectl-1.28.12 kubelet-1.28.12 kubeadm-1.28.12 </span><br><span class="line"><span class="comment">#修改kubelet默认cgroup驱动</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysconfig/kubelet &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=systemd&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet --now</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装命令自动补全</span></span><br><span class="line">kubeadm completion bash &gt; /etc/bash_completion.d/kubeadm</span><br><span class="line">kubectl completion bash &gt; /etc/bash_completion.d/kubectl</span><br><span class="line"><span class="built_in">source</span> /etc/bash_completion.d/kubeadm</span><br><span class="line"><span class="built_in">source</span> /etc/bash_completion.d/kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置crictl配置</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/crictl.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">runtime-endpoint: unix:///var/run/containerd/containerd.sock</span></span><br><span class="line"><span class="string">image-endpoint: unix:///var/run/containerd/containerd.sock</span></span><br><span class="line"><span class="string">timeout: 10</span></span><br><span class="line"><span class="string">debug: true</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h2 id="三、master节点配置"><a href="#三、master节点配置" class="headerlink" title="三、master节点配置"></a>三、master节点配置</h2><ul>
<li>kubeadm 初始化集群操作</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#1、拉取集群所需镜像</span></span><br><span class="line">kubeadm config images list</span><br><span class="line">kubeadm config images pull --image-repository registry.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、初始化集群，注意--pod-network-cidr配置与后续CNI所需配置的cidr一致</span></span><br><span class="line">kubeadm init --control-plane-endpoint <span class="variable">$k8s</span>-master:6443 \</span><br><span class="line">--kubernetes-version=v1.28.12 \</span><br><span class="line">--pod-network-cidr=172.16.0.0/16 \  </span><br><span class="line">--service-cidr=10.96.0.0/16 </span><br><span class="line">--service-dns-domain=cluster.local \</span><br><span class="line">--image-repository=registry.aliyuncs.com/google_containers \</span><br><span class="line">--cri-socket=unix:///run/containerd/containerd.sock \</span><br><span class="line">--upload-certs</span><br><span class="line"></span><br><span class="line"><span class="comment">#–image-repository：选择用于拉取镜像的镜像仓库（默认为“k8s.gcr.io” ）</span></span><br><span class="line"><span class="comment">#–kubernetes-version：选择特定的Kubernetes版本（默认为“stable-1”）</span></span><br><span class="line"><span class="comment">#–service-cidr：为服务的VIP指定使用的IP地址范围（默认为“10.96.0.0/12”）</span></span><br><span class="line"><span class="comment">#–pod-network-cidr：指定Pod网络的IP地址范围。如果设置，则将自动为每个节点分配CIDR。</span></span><br><span class="line"><span class="comment">#–control-plane-endpoint=xxx.xxx.xxx.xxx:6443 。指定api-server地址，如果是公网，最好指定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出内容</span></span><br><span class="line"><span class="comment">#加入控制平面：</span></span><br><span class="line"><span class="comment"># kubeadm join 11.123.248.100:6443 --token 8e48x7.b7krn71bk2lkc4km \</span></span><br><span class="line"><span class="comment"># --discovery-token-ca-cert-hash sha256:67deea843bb9e43865a7c228eb364ee8659628ab43424fd3f6426002916ac817 \</span></span><br><span class="line"><span class="comment"># --control-plane --certificate-key 8ed465b862780ca5510e7439543fd0f70bc3bb3cb57441ea0a44b4b266c60805</span></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="comment">#node节点加入</span></span><br><span class="line"><span class="comment">#kubeadm join 11.123.248.100:6443 --token 8e48x7.b7krn71bk2lkc4km \</span></span><br><span class="line"><span class="comment">#--discovery-token-ca-cert-hash sha256:67deea843bb9e43865a7c228eb364ee8659628ab43424fd3f6426002916ac817</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、拷贝配置</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">kubectl get node</span><br><span class="line"></span><br><span class="line"><span class="comment">#tips:此时因没有安装CNI，集群master节点是NOTREADY状态</span></span><br><span class="line"><span class="comment">#检查具体出现问题的节点详情：</span></span><br><span class="line">kubectl describe node k8s-master</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查事件(Event)</span></span><br><span class="line">kubectl describe node k8s-master | grep -A 10 <span class="string">&#x27;Conditions:&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="四、node节点"><a href="#四、node节点" class="headerlink" title="四、node节点"></a>四、node节点</h2><ul>
<li>加入集群操作</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#加入集群，可设置--cri-socket配置</span></span><br><span class="line">kubeadm <span class="built_in">join</span> 11.123.248.100:6443 --token 8e48x7.b7krn71bk2lkc4km \</span><br><span class="line">--cri-socket unix:///run/containerd/containerd.sock \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:67deea843bb9e43865a7c228eb364ee8659628ab43424fd3f6426002916ac817</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>将master节点&#x2F;root&#x2F;.kube&#x2F;config 拷贝至node节点&#x2F;root&#x2F;.kube&#x2F;config</li>
<li>tips</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#节点删除后，重新加入集群</span></span><br><span class="line"><span class="comment">#master节点删除</span></span><br><span class="line">kubectl delete node k8s-node01</span><br><span class="line"></span><br><span class="line"><span class="comment">#node节点操作</span></span><br><span class="line"><span class="comment">#1、停止kubelet/containerd--&gt;删除各配置文件--&gt;启动containerd/kubelet</span></span><br><span class="line">systemctl stop kubelet</span><br><span class="line">systemctl stop containerd</span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/cni/</span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/kubelet/*</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/cni/</span><br><span class="line"><span class="built_in">rm</span> -f /etc/kubernetes/kubelet.conf</span><br><span class="line"><span class="built_in">rm</span> -f /etc/kubernetes/pki/ca.crt</span><br><span class="line">systemctl start containerd</span><br><span class="line">systemctl start kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、重新加入</span></span><br><span class="line">kubeadm <span class="built_in">join</span> 11.123.248.100:6443 --token 8e48x7.b7krn71bk2lkc4km \</span><br><span class="line">--cri-socket unix:///run/containerd/containerd.sock \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:67deea843bb9e43865a7c228eb364ee8659628ab43424fd3f6426002916ac817</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、master节点执行一下命令，获取加入指令：</span></span><br><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure>

<h2 id="五、Calico安装参考"><a href="#五、Calico安装参考" class="headerlink" title="五、Calico安装参考"></a>五、Calico安装参考</h2><ul>
<li>步骤1</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装步骤：https://docs.tigera.io/calico/latest/getting-started/kubernetes/quickstart</span></span><br><span class="line"><span class="comment">#1、安装operator</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/tigera-operator.yaml</span><br><span class="line"><span class="comment">#2、下载自定义yaml配置，注意修改kubeadm init --pod-network-cidr变量对应的cidr</span></span><br><span class="line">wget https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/custom-resources.yaml</span><br><span class="line"><span class="comment"># 可以通过 kubectl cluster-info dump | grep cidr 查看集群cidr配置</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>步骤2：master及node节点均安装一下容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#镜像替换参考地址：</span></span><br><span class="line"><span class="comment">#https://docker.aityp.com/s/docker.io</span></span><br><span class="line"><span class="comment">#https://docker.aityp.com/r/docker.io/calico</span></span><br><span class="line"></span><br><span class="line">ctr images pull swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/pod2daemon-flexvol:v3.28.0</span><br><span class="line">ctr images tag  swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/pod2daemon-flexvol:v3.28.0  docker.io/calico/pod2daemon-flexvol:v3.28.0</span><br><span class="line"></span><br><span class="line">ctr images pull swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/cni:v3.28.0</span><br><span class="line">ctr images tag  swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/cni:v3.28.0  docker.io/calico/cni:v3.28.0</span><br><span class="line"></span><br><span class="line">ctr images pull swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/node:v3.28.0</span><br><span class="line">ctr images tag  swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/node:v3.28.0  docker.io/calico/node:v3.28.0</span><br><span class="line"></span><br><span class="line">ctr images pull swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/apiserver:v3.28.0</span><br><span class="line">ctr images tag  swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/apiserver:v3.28.0  docker.io/calico/apiserver:v3.28.0</span><br><span class="line"></span><br><span class="line">ctr images pull swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/kube-controllers:v3.28.0</span><br><span class="line">ctr images tag  swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/kube-controllers:v3.28.0  docker.io/calico/kube-controllers:v3.28.0</span><br><span class="line"></span><br><span class="line">ctr images pull swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/typha:v3.28.0</span><br><span class="line">ctr images tag  swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/typha:v3.28.0  docker.io/calico/typha:v3.28.0</span><br><span class="line"></span><br><span class="line">ctr images pull swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/node-driver-registrar:v3.28.0</span><br><span class="line">ctr images tag  swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/node-driver-registrar:v3.28.0  docker.io/calico/node-driver-registrar:v3.28.0</span><br><span class="line"></span><br><span class="line">ctr images pull swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/csi:v3.28.0</span><br><span class="line">ctr images tag  swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/calico/csi:v3.28.0  docker.io/calico/csi:v3.28.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>启动calico配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置启动calico</span></span><br><span class="line">kubectl apply -f custom-resources.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pods -o wide --all-namespaces</span><br><span class="line">或者</span><br><span class="line">watch kubectl get pods -n calico-system</span><br><span class="line"></span><br><span class="line"><span class="comment">#失败强制删除</span></span><br><span class="line">kubectl delete pod csi-node-driver-7rhsg -n calico-system --force</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查集群启动情况，ComponentStatus is deprecated in v1.19+</span></span><br><span class="line"><span class="comment">#kubectl get cs </span></span><br><span class="line"><span class="comment">#kubectl get ComponentStatus</span></span><br><span class="line">kubectl get --raw=<span class="string">&#x27;/readyz?verbose&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="六、集群启动信息"><a href="#六、集群启动信息" class="headerlink" title="六、集群启动信息"></a>六、集群启动信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>kubebuilder使用demo</title>
    <url>/2024/11/18/kubebuilder%E4%BD%BF%E7%94%A8demo/</url>
    <content><![CDATA[<p>  从头开始去构建一个 CRD 控制器并不容易，需要对 Kubernetes 的 API 有深入了解，并且 RBAC 集成、镜像构建、持续集成和部署等都需要很大工作量。为了解决这个问题，社区就推出了对应的简单易用的 Operator 框架，比较主流的是 kubebuilder 和 Operator Framework。</p>
<h2 id="一、创建项目并初始化"><a href="#一、创建项目并初始化" class="headerlink" title="一、创建项目并初始化"></a>一、创建项目并初始化</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建go项目</span></span><br><span class="line"><span class="built_in">mkdir</span> lb</span><br><span class="line"><span class="built_in">cd</span> lb</span><br><span class="line">go mod init test.net</span><br><span class="line"></span><br><span class="line"><span class="comment">#设计好GVK表述，以下生成的的crd名为：loadbalances.network.k8s.test.net</span></span><br><span class="line">kubebuilder init --domain k8s.test.net</span><br><span class="line">kubebuilder create api --group network --version v1 --kind LoadBalance</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成crd, 该命令可以确保项目中的Kubernetes资源定义文件是最新的</span></span><br><span class="line">make manifests</span><br><span class="line"></span><br><span class="line"><span class="comment">#tips</span></span><br><span class="line"><span class="comment">#命名空间配置文件：config/default/kustomization.yaml</span></span><br></pre></td></tr></table></figure>

<h2 id="二、调试开发"><a href="#二、调试开发" class="headerlink" title="二、调试开发"></a>二、调试开发</h2><h3 id="①重点处理文件"><a href="#①重点处理文件" class="headerlink" title="①重点处理文件"></a>①重点处理文件</h3><ul>
<li>api&#x2F;v1alpha1&#x2F;loadbalance_types.go</li>
<li>internal&#x2F;controller&#x2F;loadbalance_controller.go</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#变更spec：</span></span><br><span class="line">vim api/v1alpha1/loadbalance_types.go</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">#关注 Reconcile 方法实现业务逻辑</span></span><br><span class="line">vim internal/controller/loadbalance_controller.go</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新生成crd等文件</span></span><br><span class="line">make manifests generate</span><br><span class="line"><span class="comment">#查看生成的yaml：</span></span><br><span class="line"><span class="built_in">ls</span> config/crd/bases/network.k8s.test.net_loadbalances.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装crd到k8s集群,这里用于kustomize</span></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看crd是否安装成功</span></span><br><span class="line">kubectl get crd</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动controller</span></span><br><span class="line">make run</span><br></pre></td></tr></table></figure>

<h3 id="②另一终端验证"><a href="#②另一终端验证" class="headerlink" title="②另一终端验证"></a>②另一终端验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署cr</span></span><br><span class="line">kubectl apply -f config/samples/network_v1_loadbalance.yaml</span><br><span class="line"></span><br><span class="line">kubectl get loadbalance</span><br></pre></td></tr></table></figure>

<h3 id="③删除资源"><a href="#③删除资源" class="headerlink" title="③删除资源"></a>③删除资源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete loadbalance loadbalance-sample</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl + c 停止程序,卸载crd</span></span><br><span class="line">make uninstall</span><br></pre></td></tr></table></figure>

<h2 id="三、构建镜像–-部署–-卸载部署"><a href="#三、构建镜像–-部署–-卸载部署" class="headerlink" title="三、构建镜像–&gt;部署–&gt;卸载部署"></a>三、构建镜像–&gt;部署–&gt;卸载部署</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、注意修改Dockfile镜像地址，可能无法拉取</span></span><br><span class="line">sed -i <span class="string">&#x27;s#golang:1.22#swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/library/golang:1.22.5#&#x27;</span> Dockerfile</span><br><span class="line">sed -i <span class="string">&#x27;s#gcr.io/distroless/static:nonroot#swr.cn-north-4.myhuaweicloud.com/ddn-k8s/gcr.io/distroless/static:nonroot#&#x27;</span> Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、开始构建镜像（root用户）</span></span><br><span class="line">make docker-build IMG=loadbalance/lb:0.0.1</span><br><span class="line"><span class="comment">#push 到远程仓库，先docker login</span></span><br><span class="line"><span class="comment">#make docker-build docker-push IMG=loadbalance/lb:0.0.1</span></span><br><span class="line">或者</span><br><span class="line">docker build -t loadbalance/lb:0.0.1 .</span><br><span class="line"><span class="comment">#docker push loadbalance/lb:0.0.1 xxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定构建平台</span></span><br><span class="line"><span class="comment">#make docker-buildx IMG=loadbalance/lb:0.0.1 PLATFORM=linux/amd64</span></span><br><span class="line"><span class="comment">#支持多种平台构建</span></span><br><span class="line"><span class="comment">#docker buildx build --platform linux/amd64,linux/arm64 -t loadbalance/lb:0.0.1 .</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看构建的镜像</span></span><br><span class="line"><span class="built_in">sudo</span> docker images</span><br><span class="line">REPOSITORY                  TAG               IMAGE ID       CREATED              SIZE</span><br><span class="line">loadbalance/lb              0.0.1             3d702a7b6e16   About a minute ago   72.1MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#部署到当前集群</span></span><br><span class="line">make deploy IMG=loadbalance/lb:0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">kubectl get svc,deploy,pod -n lb-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载部署</span></span><br><span class="line">make undeploy</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#cronjob test</span><br><span class="line">https://github.com/kubernetes-sigs/kubebuilder/tree/master/docs/book/src/cronjob-tutorial/testdata/project</span><br><span class="line"></span><br><span class="line">https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/kubebuilder_annotation.md</span><br><span class="line">+[header]:[module]:[submodule]:[key-value elements]</span><br><span class="line"></span><br><span class="line">#云原生社区</span><br><span class="line">https://cloudnative.to/kubebuilder/</span><br><span class="line"></span><br><span class="line">#标记注释</span><br><span class="line">https://cloudpods.csdn.net/657812bcb8e5f01e1e449ece.html</span><br><span class="line"></span><br><span class="line">https://xie.infoq.cn/article/7a315f5168fda5e2e534ca406</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>nsenter 与kubectl debug</title>
    <url>/2024/10/31/kubectl-debug%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="kubectl-debug"><a href="#kubectl-debug" class="headerlink" title="kubectl debug"></a><code>kubectl debug</code></h2><h3 id="一、常用命令"><a href="#一、常用命令" class="headerlink" title="一、常用命令"></a>一、常用命令</h3><ol>
<li><p><strong>调试现有容器</strong><br>调试某个正在运行的容器，附加一个新的调试容器：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl debug -it &lt;pod-name&gt; -n &lt;namespace&gt; --image swr.cn-north-4.myhuaweicloud.com/ddn-k8s/gcr.io/google-containers/busybox:latest --profile=netadmin --target=&lt;target-container-name&gt; -- sh</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-image</code>：指定调试容器的镜像（例如 <code>busybox</code> 或 <code>ubuntu</code>）。</li>
<li><code>-target=&lt;target-container-name&gt;</code>：指定调试的目标容器，便于访问容器内的文件系统和网络。</li>
</ul>
</li>
<li><p><strong>调试节点</strong><br>在指定节点上启动调试容器，用于节点本地调试：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl debug node/&lt;node-name&gt; -it --image=swr.cn-north-4.myhuaweicloud.com/ddn-k8s/gcr.io/google-containers/busybox:latest</span><br></pre></td></tr></table></figure>
<p> 该命令将会在指定的节点上运行一个临时容器，并附带节点的文件系统和环境。</p>
</li>
</ol>
<h3 id="二、删除调试容器"><a href="#二、删除调试容器" class="headerlink" title="二、删除调试容器"></a>二、删除调试容器</h3><ol>
<li><p><strong>手动删除调试容器</strong><br>调试完成后，通过以下命令删除调试产生的临时容器：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete pod &lt;pod-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure>
<p> 如果不想删除整个 Pod，可以只删除 Ephemeral Containers 的配置，但目前 Kubernetes 并不直接支持对 Ephemeral Containers 的单独删除（这是设计选择）。在这种情况下，通常需要删除整个 Pod 并重新创&gt;建。</p>
</li>
<li><p><strong>重启 Pod（删除后重建）</strong><br>对于不可变应用，可以考虑重启 Pod（删除原有 Pod，由控制器重新创建），以清理所有调试状态。</p>
</li>
</ol>
<hr>
<h2 id="nsenter"><a href="#nsenter" class="headerlink" title="nsenter"></a>nsenter</h2><p><code>nsenter</code> 是一个用于在 Linux 命名空间中执行命令的工具，可以让你进入其他进程的命名空间进行调试。与 <code>kubectl debug</code> 相比，<code>nsenter</code> 更加底层和灵活，但使用起来也稍显复杂。以下是使用 <code>nsenter</code> 的场景、操作步骤以及与 <code>kubectl debug</code> 的比较。</p>
<h3 id="一、使用-nsenter-的场景"><a href="#一、使用-nsenter-的场景" class="headerlink" title="一、使用 nsenter 的场景"></a>一、使用 <code>nsenter</code> 的场景</h3><ol>
<li><strong>底层访问</strong>：当需要深入到容器内的某些细节时，例如调试内核级别的问题或网络问题，<code>nsenter</code> 可以提供更直接的访问。</li>
<li><strong>没有 Kubelet 访问</strong>：在某些情况下，可能没有权限或无法通过 Kubernetes API 访问 Pod，这时可以直接在节点上使用 <code>nsenter</code>。</li>
<li><strong>特殊容器环境</strong>：对于某些特殊或自定义的容器环境，<code>kubectl debug</code> 可能无法满足需求，此时 <code>nsenter</code> 提供了更多的灵活性。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装：</span><br><span class="line">sudo apt-get install util-linux -y  # Ubuntu/Debian</span><br><span class="line">sudo yum install util-linux -y     # CentOS/Red Hat</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="二、nsenter-的操作步骤"><a href="#二、nsenter-的操作步骤" class="headerlink" title="二、nsenter 的操作步骤"></a>二、<code>nsenter</code> 的操作步骤</h3><ol>
<li><p><strong>找到容器的 PID</strong>：<br>使用 <code>docker ps</code> 或 <code>crictl ps</code> 命令找到目标容器的 PID。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect &lt;containerID&gt; | grep Pid</span><br><span class="line">crictl inspect &lt;containerID&gt; | grep Pid</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用 <code>nsenter</code> 进入命名空间</strong>：<br>使用找到的 PID 进入容器的命名空间。以下是一个例子：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设容器的 PID 为 &lt;pid&gt;</span></span><br><span class="line">PID=&lt;pid&gt;</span><br><span class="line">nsenter --target <span class="variable">$PID</span> --mount --uts --ipc --net --pid</span><br><span class="line">iptables -t nat -S</span><br></pre></td></tr></table></figure>
<p> 这将会让你进入容器的挂载、UTS、IPC、网络和 PID 命名空间。</p>
</li>
<li><p><strong>进行调试</strong>：<br>进入容器后，你可以运行各种命令进行调试。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#一些命令</span><br><span class="line">#进入网络命名空间 (--net)</span><br><span class="line">nsenter --net=/proc/&lt;pid&gt;/ns/net</span><br><span class="line">#查看网络接口：</span><br><span class="line">ip addr</span><br><span class="line"></span><br><span class="line">#查看路由表：</span><br><span class="line">ip route</span><br><span class="line"></span><br><span class="line">#检查 DNS 解析：</span><br><span class="line">cat /etc/resolv.conf</span><br><span class="line">nslookup &lt;hostname&gt;</span><br><span class="line"></span><br><span class="line">#查看 NAT 和防火墙规则：</span><br><span class="line">iptables -L -n -v</span><br><span class="line"></span><br><span class="line">#挂载命名空间 (--mnt)</span><br><span class="line">nsenter --mnt=/proc/&lt;pid&gt;/ns/mnt</span><br><span class="line"></span><br><span class="line">#检查磁盘使用情况：</span><br><span class="line">df -h</span><br><span class="line">du -sh &lt;path&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#多命名空间组合</span><br><span class="line">nsenter --net=/proc/&lt;pid&gt;/ns/net --mnt=/proc/&lt;pid&gt;/ns/mnt</span><br><span class="line"></span><br><span class="line">#排查后退出命名空间</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="nsenter-与-kubectl-debug-的比较"><a href="#nsenter-与-kubectl-debug-的比较" class="headerlink" title="nsenter 与 kubectl debug 的比较"></a><code>nsenter</code> 与 <code>kubectl debug</code> 的比较</h3><table>
<thead>
<tr>
<th>特性</th>
<th><code>nsenter</code></th>
<th><code>kubectl debug</code></th>
</tr>
</thead>
<tbody><tr>
<td><strong>灵活性</strong></td>
<td>高，支持任何 Linux 命名空间</td>
<td>主要针对 Kubernetes 的 Pod 和容器</td>
</tr>
<tr>
<td><strong>使用复杂度</strong></td>
<td>较高，需要手动找到 PID</td>
<td>较低，使用 Kubernetes API 进行操作</td>
</tr>
<tr>
<td><strong>环境依赖</strong></td>
<td>需要在节点上运行，依赖容器运行环境</td>
<td>依赖 Kubernetes 集群环境</td>
</tr>
<tr>
<td><strong>适用范围</strong></td>
<td>通用，可用于任何容器运行时</td>
<td>专为 Kubernetes 设计</td>
</tr>
<tr>
<td><strong>调试深度</strong></td>
<td>深入，直接与宿主机交互</td>
<td>通过添加临时容器进行调试</td>
</tr>
<tr>
<td><strong>清理操作</strong></td>
<td>手动清理，退出命名空间即可</td>
<td>自动清理 Ephemeral Containers</td>
</tr>
</tbody></table>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>使用 <code>nsenter</code> 适合需要底层访问和灵活性的调试场景，但操作较为复杂。</li>
<li><code>kubectl debug</code> 提供了简单易用的界面，适合日常容器调试，尤其是在 Kubernetes 环境中。</li>
</ul>
<p>根据具体需求选择合适的工具进行调试。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>kubectl 相关脚本</title>
    <url>/2024/11/13/kubectl-%E7%9B%B8%E5%85%B3%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="统计node上pod数量"><a href="#统计node上pod数量" class="headerlink" title="统计node上pod数量"></a>统计node上pod数量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for node in $(kubectl get nodes -o name | egrep -v &quot;docker01|docker23|docker08|docker15&quot;); do</span><br><span class="line">  echo &quot;$node: $(kubectl get pods -n wdfwd --field-selector spec.nodeName=$&#123;node##*/&#125; --no-headers | wc -l) Pods&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h2 id="删除处理Terminating的pod"><a href="#删除处理Terminating的pod" class="headerlink" title="删除处理Terminating的pod"></a>删除处理Terminating的pod</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get pods --all-namespaces | grep Terminating | while read line; do</span><br><span class="line">  pod_name=$(echo $line | awk &#x27;&#123;print $2&#125;&#x27; ) \</span><br><span class="line">  name_space=$(echo $line | awk &#x27;&#123;print $1&#125;&#x27; ); \</span><br><span class="line">  kubectl delete pods $pod_name -n $name_space --grace-period=0 --force</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h2 id="查看当前集群所有pod状态"><a href="#查看当前集群所有pod状态" class="headerlink" title="查看当前集群所有pod状态"></a>查看当前集群所有pod状态</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">k get pod -A | awk &#x27;&#123;print $4&#125;&#x27; | sort | uniq -c | sort -rn</span><br></pre></td></tr></table></figure>

<h2 id="统计制定命名空间下pod的镜像、环境变量、执行参数"><a href="#统计制定命名空间下pod的镜像、环境变量、执行参数" class="headerlink" title="统计制定命名空间下pod的镜像、环境变量、执行参数"></a>统计制定命名空间下pod的镜像、环境变量、执行参数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 定义要统计的命名空间，可以自行修改或添加</span><br><span class="line">NAMESPACES=(&quot;default&quot; &quot;kube-system&quot;) </span><br><span class="line"></span><br><span class="line"># 遍历每个命名空间</span><br><span class="line">for ns in &quot;$&#123;NAMESPACES[@]&#125;&quot;; do</span><br><span class="line">  echo &quot;命名空间: $ns&quot;</span><br><span class="line">  echo &quot;===============================&quot;</span><br><span class="line"></span><br><span class="line">  # 获取当前命名空间中的所有Pod信息</span><br><span class="line">  kubectl get pods -n &quot;$ns&quot; -o json | jq -c &#x27;.items[]&#x27; | while read -r pod; do</span><br><span class="line">    pod_name=$(echo &quot;$pod&quot; | jq -r &#x27;.metadata.name&#x27;)</span><br><span class="line">    echo &quot;Pod: $pod_name&quot;</span><br><span class="line">    echo &quot;-------------------&quot;</span><br><span class="line"></span><br><span class="line">    # 获取Pod中的容器列表</span><br><span class="line">    echo &quot;$pod&quot; | jq -c &#x27;.spec.containers[]&#x27; | while read -r container; do</span><br><span class="line">      container_name=$(echo &quot;$container&quot; | jq -r &#x27;.name&#x27;)</span><br><span class="line">      image=$(echo &quot;$container&quot; | jq -r &#x27;.image&#x27;)</span><br><span class="line"></span><br><span class="line">      echo &quot;  容器名: $container_name&quot;</span><br><span class="line">      echo &quot;  镜像: $image&quot;</span><br><span class="line"></span><br><span class="line">      # 获取环境变量</span><br><span class="line">      echo &quot;  环境变量:&quot;</span><br><span class="line">      envs=$(echo &quot;$container&quot; | jq -c &#x27;.env[]?&#x27;)</span><br><span class="line">      if [[ -z &quot;$envs&quot; ]]; then</span><br><span class="line">        echo &quot;    无&quot;</span><br><span class="line">      else</span><br><span class="line">        echo &quot;$envs&quot; | while read -r env; do</span><br><span class="line">          env_name=$(echo &quot;$env&quot; | jq -r &#x27;.name&#x27;)</span><br><span class="line">          env_value=$(echo &quot;$env&quot; | jq -r &#x27;.value // empty&#x27;)</span><br><span class="line">          value_from=$(echo &quot;$env&quot; | jq -r &#x27;.valueFrom // empty&#x27;)</span><br><span class="line"></span><br><span class="line">          if [[ -n &quot;$env_value&quot; ]]; then</span><br><span class="line">            echo &quot;    $env_name: $env_value&quot;</span><br><span class="line">          elif [[ -n &quot;$value_from&quot; ]]; then</span><br><span class="line">            # 处理 valueFrom 来源信息</span><br><span class="line">            config_map_ref=$(echo &quot;$env&quot; | jq -r &#x27;.valueFrom.configMapKeyRef.name // empty&#x27;)</span><br><span class="line">            secret_ref=$(echo &quot;$env&quot; | jq -r &#x27;.valueFrom.secretKeyRef.name // empty&#x27;)</span><br><span class="line">            field_ref=$(echo &quot;$env&quot; | jq -r &#x27;.valueFrom.fieldRef.fieldPath // empty&#x27;)</span><br><span class="line">            </span><br><span class="line">            if [[ -n &quot;$config_map_ref&quot; ]]; then</span><br><span class="line">              echo &quot;    $env_name (from ConfigMap: $config_map_ref)&quot;</span><br><span class="line">            elif [[ -n &quot;$secret_ref&quot; ]]; then</span><br><span class="line">              echo &quot;    $env_name (from Secret: $secret_ref)&quot;</span><br><span class="line">            elif [[ -n &quot;$field_ref&quot; ]]; then</span><br><span class="line">              echo &quot;    $env_name (from FieldRef: $field_ref)&quot;</span><br><span class="line">            else</span><br><span class="line">              echo &quot;    $env_name: 未知来源&quot;</span><br><span class="line">            fi</span><br><span class="line">          fi</span><br><span class="line">        done</span><br><span class="line">      fi</span><br><span class="line"></span><br><span class="line">      # 获取执行参数</span><br><span class="line">      echo &quot;  执行参数:&quot;</span><br><span class="line">      args=$(echo &quot;$container&quot; | jq -c &#x27;.args // []&#x27;)</span><br><span class="line">      if [[ &quot;$args&quot; == &quot;[]&quot; ]]; then</span><br><span class="line">        echo &quot;    无&quot;</span><br><span class="line">      else</span><br><span class="line">        echo &quot;$args&quot; | jq -r &#x27;.[] | &quot;    \(. // &quot;null&quot;)&quot;&#x27;</span><br><span class="line">      fi</span><br><span class="line"></span><br><span class="line">      echo &quot;-------------------&quot;</span><br><span class="line">    done</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">  done</span><br><span class="line">  echo &quot;===============================&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>linux network相关命令</title>
    <url>/2024/08/23/linux%20network%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="了解节点网络拓扑的几种工具和方法："><a href="#了解节点网络拓扑的几种工具和方法：" class="headerlink" title="了解节点网络拓扑的几种工具和方法："></a>了解节点网络拓扑的几种工具和方法：</h2><h3 id="1-ip-命令"><a href="#1-ip-命令" class="headerlink" title="1. ip 命令"></a>1. <strong><code>ip</code> 命令</strong></h3><p><code>ip</code> 命令是一个功能强大的网络工具，通常用于查看和管理网络接口、路由表、策略路由和隧道。</p>
<ul>
<li><p><strong>查看网络接口和IP地址：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr show</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看路由表：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip route show</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看邻居（ARP 表）：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip neigh show</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-netstat-或-ss-命令"><a href="#2-netstat-或-ss-命令" class="headerlink" title="2. netstat 或 ss 命令"></a>2. <strong><code>netstat</code> 或 <code>ss</code> 命令</strong></h3><p><code>netstat</code> 和 <code>ss</code> 命令用于显示网络连接、路由表、接口统计信息和多播成员信息。</p>
<ul>
<li><p><strong>netstat使用</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所有网络连接</span></span><br><span class="line">netstat -tuln</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看路由表</span></span><br><span class="line">netstat -rn</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">ip route show</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看网络接口统计信息</span></span><br><span class="line">netstat -i</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ss应用：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ss -tuln</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看进程使用的套接字信息</span></span><br><span class="line">ss -ptan</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-nmap"><a href="#3-nmap" class="headerlink" title="3. nmap"></a>3. <strong><code>nmap</code></strong></h3><p><code>nmap</code> 是一个强大的网络扫描工具，通常用于网络发现和安全审计。它可以扫描网络并获取有关局域网中其他设备的信息。</p>
<ul>
<li><p><strong>扫描整个子网中的活跃设备：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.1.0/24</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取详细的主机和服务信息：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -A 192.168.1.1</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-traceroute"><a href="#4-traceroute" class="headerlink" title="4. traceroute"></a>4. <strong><code>traceroute</code></strong></h3><p><code>traceroute</code> 命令用于跟踪数据包在网络中的路径，帮助识别网络路径和延迟情况。</p>
<ul>
<li><strong>跟踪到目标主机的路由：</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">traceroute example.com</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-arp-scan"><a href="#5-arp-scan" class="headerlink" title="5. arp-scan"></a>5. <strong><code>arp-scan</code></strong></h3><p><code>arp-scan</code> 是一个网络发现工具，用于快速扫描局域网中的设备。</p>
<ul>
<li><strong>扫描整个子网中的设备：</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-ifconfig-和-route"><a href="#6-ifconfig-和-route" class="headerlink" title="6. ifconfig 和 route"></a>6. <strong><code>ifconfig</code> 和 <code>route</code></strong></h3><p>虽然已经被 <code>ip</code> 命令取代，但在某些旧系统上依然可以使用。</p>
<ul>
<li><p><strong>查看网络接口：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看路由表：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">route -n</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-ethtool"><a href="#7-ethtool" class="headerlink" title="7. ethtool"></a>7. <strong><code>ethtool</code></strong></h3><p><code>ethtool</code> 用于查询和设置以太网设备参数，可以获取接口的详细信息。</p>
<ul>
<li><strong>查看网卡详细信息：</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ethtool eth0</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-nmcli"><a href="#8-nmcli" class="headerlink" title="8. nmcli"></a>8. <strong><code>nmcli</code></strong></h3><p><code>nmcli</code> 是 NetworkManager 提供的命令行工具，用于查看和管理网络连接。</p>
<ul>
<li><p><strong>查看所有网络连接：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli connection show</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看设备状态：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli device status</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="9-bmon"><a href="#9-bmon" class="headerlink" title="9. bmon"></a>9. <strong><code>bmon</code></strong></h3><p><code>bmon</code> 是一个带有图形界面的带宽监控和诊断工具，用于实时监控网络流量。</p>
<ul>
<li><strong>启动 <code>bmon</code> 监控网络流量：</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bmon</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="10-iptraf-ng"><a href="#10-iptraf-ng" class="headerlink" title="10. iptraf-ng"></a>10. <strong><code>iptraf-ng</code></strong></h3><p><code>iptraf-ng</code> 是一个基于终端的实时网络监控工具，能够监控网络流量和连接。</p>
<ul>
<li><strong>启动 <code>iptraf-ng</code> 监控：</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptraf-ng</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="11-tcping"><a href="#11-tcping" class="headerlink" title="11. tcping"></a>11. <strong><code>tcping</code></strong></h3><ul>
<li><p><strong>TCPing</strong>：基于 TCP 协议，通过三次握手连接指定端口进行探测。如果目标主机的应用程序未能及时响应或端口临时不可用，会显示为失败。</p>
</li>
<li><p><strong>Ping</strong>：基于 ICMP 协议（Internet Control Message Protocol），直接探测网络层连接性。如果目标主机的网络栈正常运行，但应用层服务存在问题，Ping 仍可能显示为正常。</p>
</li>
<li><p>TCPing 针对具体的服务端口（如 23333）测试，如果目标服务存在连接限制（如最大连接数、超时设置），可能会导致 TCPing 丢包。</p>
</li>
<li><p>Ping 不涉及具体的服务端口，仅测试目标主机的网络连通性。</p>
</li>
<li><p>如果目标主机的服务（监听 23333 端口）处理压力大，可能会导致部分连接请求（TCPing 探测）未能响应。</p>
</li>
<li><p>Ping 使用较少的资源和处理能力，因此即使服务端性能有限，Ping 的结果也可能保持稳定。</p>
</li>
<li><p>防火墙可能对 ICMP 流量和 TCP 流量设置不同的策略。例如：</p>
<ul>
<li>放行 ICMP 流量，但限制指定端口的 TCP 流量。</li>
<li>对高频 TCP 请求（如 TCPing）触发限速或阻断。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="如何进一步查看网络情况"><a href="#如何进一步查看网络情况" class="headerlink" title="如何进一步查看网络情况"></a><strong>如何进一步查看网络情况</strong></h3><p>为了更深入地分析，建议从以下几方面入手：</p>
<h4 id="1-捕获流量数据"><a href="#1-捕获流量数据" class="headerlink" title="1. 捕获流量数据"></a><strong>1. 捕获流量数据</strong></h4><p>使用 <code>tcpdump</code> 或 Wireshark 捕获目标端口的流量，查看失败的 TCP 探测对应的包状态。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth0 host 10.100.15.200 and port 3333 -w tcping_capture.pcap</span><br></pre></td></tr></table></figure>
<p>在 Wireshark 中分析是否存在 TCP 重传、RST 包或服务端的延迟响应。</p>
<h4 id="2-检查服务端状态"><a href="#2-检查服务端状态" class="headerlink" title="2. 检查服务端状态"></a><strong>2. 检查服务端状态</strong></h4><p>在目标主机上，检查监听端口 <code>3333</code> 的服务状态：</p>
<ul>
<li>确认是否达到连接数限制：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 3333</span><br></pre></td></tr></table></figure></li>
<li>查看服务日志中是否有报错或超时。</li>
</ul>
<h4 id="3-路由与网络层分析"><a href="#3-路由与网络层分析" class="headerlink" title="3. 路由与网络层分析"></a><strong>3. 路由与网络层分析</strong></h4><ul>
<li><strong>Traceroute</strong>：检查到目标的路由路径，是否有某些节点导致了延迟或丢包。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">traceroute 10.100.15.200</span><br></pre></td></tr></table></figure></li>
<li><strong>MTR</strong>：结合 ICMP 和 TCP 路由信息，实时监控路径稳定性。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mtr -r 10.100.15.200</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-检查防火墙配置"><a href="#4-检查防火墙配置" class="headerlink" title="4. 检查防火墙配置"></a><strong>4. 检查防火墙配置</strong></h4><p>在客户端和服务端，分别检查防火墙或安全策略配置：</p>
<ul>
<li>确认是否对 <code>23333</code> 端口流量有限制（如速率限制）。</li>
<li>调整防火墙规则，允许更多并发连接。</li>
</ul>
<h4 id="5-测试其他协议"><a href="#5-测试其他协议" class="headerlink" title="5. 测试其他协议"></a><strong>5. 测试其他协议</strong></h4><p>对比使用其他协议（如 UDP）进行测试，以进一步排除不同协议栈可能的问题。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iperf -c 10.100.15.200 -p 3333</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="问题排查与解决步骤"><a href="#问题排查与解决步骤" class="headerlink" title="问题排查与解决步骤"></a><strong>问题排查与解决步骤</strong></h3><table>
<thead>
<tr>
<th>步骤</th>
<th>操作方法</th>
<th>预期结果与意义</th>
</tr>
</thead>
<tbody><tr>
<td>检查服务端口状态</td>
<td>使用 <code>netstat</code> 检查端口占用和连接状态。</td>
<td>确认服务端是否超出连接限制，是否存在监听问题。</td>
</tr>
<tr>
<td>捕获流量分析</td>
<td>使用 <code>tcpdump</code> 或 Wireshark 捕获流量，分析是否存在超时、RST 或重传包。</td>
<td>确认丢包原因是由网络波动还是服务处理延迟引起。</td>
</tr>
<tr>
<td>路由与路径检查</td>
<td>使用 <code>traceroute</code> 和 <code>mtr</code> 检查路径中的节点性能与稳定性。</td>
<td>确认是否存在路径中某个节点引起的延迟或丢包问题。</td>
</tr>
<tr>
<td>服务端日志检查</td>
<td>查看目标服务的运行日志，关注超时、拒绝连接等问题。</td>
<td>确认是否服务处理能力不足或负载高导致的连接问题。</td>
</tr>
<tr>
<td>调整 TCP 设置</td>
<td>增大 TCP 超时、发送&#x2F;接收窗口大小，优化服务端的连接队列。</td>
<td>降低瞬时丢包率对应用的影响，提高吞吐量。</td>
</tr>
</tbody></table>
<p>通过上述分析，结合抓包与服务端日志，应该能定位到 TCPing 丢包的具体原因，并制定解决方案。</p>
]]></content>
  </entry>
  <entry>
    <title>linux 安装 glances</title>
    <url>/2024/08/22/linux-%E5%AE%89%E8%A3%85-glances/</url>
    <content><![CDATA[<h2 id="linux-安装-glances"><a href="#linux-安装-glances" class="headerlink" title="linux 安装 glances"></a>linux 安装 glances</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install ncurses-devel -y</span><br><span class="line"></span><br><span class="line">#安装3.8以上的python环境</span><br><span class="line">pyenv install 3.12.2</span><br><span class="line"></span><br><span class="line">#验证安装模块</span><br><span class="line">python -c &quot;import curses; print(&#x27;curses module installed successfully&#x27;)&quot;</span><br><span class="line"></span><br><span class="line"># 安装需求包</span><br><span class="line">pip install fastapi</span><br><span class="line">pip install uvicorn</span><br><span class="line">pip install jinja2</span><br><span class="line"></span><br><span class="line">#安装glances</span><br><span class="line">pip install --upgrade glances</span><br><span class="line"></span><br><span class="line">#查看安装位置</span><br><span class="line">whereis glances</span><br><span class="line"></span><br><span class="line">#配置环境变量(vim .bashrc)</span><br><span class="line">alias glances=&#x27;/root/.pyenv/shims/glances  &#x27;</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">glances</span><br><span class="line">#网页查看</span><br><span class="line">glances -w</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux 工具</title>
    <url>/2024/10/24/linux-%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li>yq</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#https://github.com/mikefarah/yq/releases</span></span><br><span class="line">wget https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar vxf yq_linux_amd64.tar.gz ./</span><br><span class="line"><span class="built_in">mv</span> ./yq_linux_amd64 /usr/local/bin/yq</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux下go环境部署</title>
    <url>/2022/04/27/linux%E4%B8%8Bgo%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="下载配置"><a href="#下载配置" class="headerlink" title="下载配置"></a>下载配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> go &amp;&amp; <span class="built_in">cd</span> go</span><br><span class="line"></span><br><span class="line">wget https://golang.org/dl/go1.17.1.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用root账号配置全局环境</span></span><br><span class="line"><span class="built_in">sudo</span> tar -zxf  go1.17.1.linux-amd64.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure>

<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> vim  /etc/profile </span><br><span class="line"><span class="comment"># 末尾加如下一行</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使之生效</span></span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line">$ go version</span><br><span class="line">go version go1.17.1 linux/amd64</span><br><span class="line"></span><br><span class="line">$ go <span class="built_in">env</span> -w GO111MODULE=on </span><br><span class="line">$ go <span class="built_in">env</span> -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct</span><br></pre></td></tr></table></figure>

<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> hello &amp;&amp; <span class="built_in">cd</span> hello</span><br><span class="line">$ go mod init example/hello</span><br><span class="line">$ vim hello.go</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run .</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>

<h2 id="引用外包方式"><a href="#引用外包方式" class="headerlink" title="引用外包方式"></a>引用外包方式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go get [rsc.io/quote](http://rsc.io/quote)  </span><br><span class="line">$ vim hello.go</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;rsc.io/quote&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(quote.Go())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add new module requirements and sums.</span></span><br><span class="line">$ go mod tidy</span><br><span class="line">$ go run .</span><br><span class="line">Don<span class="string">&#x27;t communicate by sharing memory, share memory by communicating.</span></span><br><span class="line"><span class="string">Hello, World!</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux安装多版本go环境</title>
    <url>/2024/08/28/linux%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACgo%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="gvm安装多版本go环境"><a href="#gvm安装多版本go环境" class="headerlink" title="gvm安装多版本go环境"></a>gvm安装多版本go环境</h2><ul>
<li>参考地址：<a href="https://github.com/moovweb/gvm">https://github.com/moovweb/gvm</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#执行shell安装gvm</span></span><br><span class="line">bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有可安装go版本</span></span><br><span class="line">gvm listall</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装高版本go环境顺序</span></span><br><span class="line">gvm install go1.4 -B</span><br><span class="line">gvm use go1.4</span><br><span class="line"><span class="built_in">export</span> GOROOT_BOOTSTRAP=<span class="variable">$GOROOT</span></span><br><span class="line">gvm install go1.17.13</span><br><span class="line">gvm use go1.17.13</span><br><span class="line"><span class="built_in">export</span> GOROOT_BOOTSTRAP=<span class="variable">$GOROOT</span></span><br><span class="line">gvm install go1.20</span><br><span class="line">gvm use go1.20 --default</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看安装的go版本</span></span><br><span class="line">gvm list</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看环境变量</span></span><br><span class="line">go <span class="built_in">env</span></span><br></pre></td></tr></table></figure>

<h2 id="go-module与vendor"><a href="#go-module与vendor" class="headerlink" title="go module与vendor"></a>go module与vendor</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#引入新的包时，强制启用Go Modules模式</span></span><br><span class="line">go <span class="built_in">env</span> -w GO111MODULE=<span class="string">&quot;on&quot;</span> GOFLAGS=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#项目自带vendor目录，强制 Go 使用 vendor 目录中的依赖包,而不是从网络上下载依赖。这在项目中已经存在 vendor 目录的情况下非常有用，因为它可以避免重新下载依赖，节省时间和带宽</span></span><br><span class="line">go <span class="built_in">env</span> -w GO111MODULE=<span class="string">&quot;auto&quot;</span> GOFLAGS=<span class="string">&quot;-mod=vendor&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置代理</span></span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=<span class="string">&quot;https://goproxy.cn,https://goproxy.io,direct&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新项目初始化模块</span></span><br><span class="line">go mod init</span><br><span class="line"><span class="comment">#确认依赖关系</span></span><br><span class="line">go mod verify</span><br><span class="line"><span class="comment">#解释为什么需要包和模块</span></span><br><span class="line">go mod why</span><br><span class="line"><span class="comment">#下载模块到本地缓存</span></span><br><span class="line">go mod download</span><br><span class="line"><span class="comment">#把模块之间的依赖图显示出来</span></span><br><span class="line">go mod graph</span><br><span class="line"><span class="comment">#增加缺失的包，移除没用的包</span></span><br><span class="line">go mod tidy</span><br><span class="line"><span class="comment">#把依赖拷贝到vendor目录下,更新依赖包</span></span><br><span class="line">go mod vendor</span><br><span class="line"></span><br><span class="line"><span class="comment">#部署和发布：</span></span><br><span class="line"><span class="comment">#在部署时，如果希望避免依赖在网络上的可用性（例如，因防火墙或网络问题），建议使用 vendor 目录。#将最终的二进制文件和 vendor 目录（如果使用）一起部署。</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>mac tips</title>
    <url>/2024/12/16/mac-tips/</url>
    <content><![CDATA[<h2 id="合屏幕是否休眠电脑"><a href="#合屏幕是否休眠电脑" class="headerlink" title="合屏幕是否休眠电脑"></a>合屏幕是否休眠电脑</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#防止系统休眠</span><br><span class="line">pmset -a disablesleep 1</span><br><span class="line">#使系统休眠</span><br><span class="line">pmset -a disablesleep 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="终端配置"><a href="#终端配置" class="headerlink" title="终端配置"></a>终端配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Oh My Zsh 搭配主题、插件</span><br><span class="line">#参考：https://www.poloxue.com/</span><br><span class="line">powerlevel10k + zsh-autosuggestions + zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line">#github安装</span><br><span class="line">git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k</span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line">#vim .zshrc</span><br><span class="line">plugins=(git zsh-autosuggestions z zsh-syntax-highlighting )</span><br><span class="line"></span><br><span class="line">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&quot;fg=#6C737C,bg=cyan,bold,underline&quot;</span><br><span class="line">ZSH_AUTOSUGGEST_STRATEGY=(history completion)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="chrome插件"><a href="#chrome插件" class="headerlink" title="chrome插件"></a>chrome插件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vimum</span><br><span class="line">用法：https://juejin.cn/post/7208129482095067197</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>magick工具使用</title>
    <url>/2024/11/01/magick%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><code>ImageMagick</code> 是一个强大的工具，用于图像操作和格式转换，支持各种操作如裁剪、旋转、调整大小、格式转换等。下面是一些常用的 <code>magick</code> 命令，以便你快速掌握图片处理及PDF操作技巧。以下命令基于 <code>magick</code> 7.1.1-39 版本：</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install imagemagick</span><br><span class="line"></span><br><span class="line">magick -version</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-图像格式转换"><a href="#1-图像格式转换" class="headerlink" title="1. 图像格式转换"></a>1. 图像格式转换</h3><p>将图像从一种格式转换为另一种格式，适用于支持的多种格式（如 PNG、JPEG、GIF、TIFF 等）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick input.jpg output.png</span><br></pre></td></tr></table></figure>

<h3 id="2-调整图像大小"><a href="#2-调整图像大小" class="headerlink" title="2. 调整图像大小"></a>2. 调整图像大小</h3><p>按指定比例或像素大小调整图像大小。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick input.jpg -resize 800x600 output.jpg</span><br></pre></td></tr></table></figure>

<h3 id="3-裁剪图像"><a href="#3-裁剪图像" class="headerlink" title="3. 裁剪图像"></a>3. 裁剪图像</h3><p>裁剪图像为指定大小的区域。例如，裁剪出左上角 200x200 的区域。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick input.jpg -crop 200x200+0+0 output.jpg</span><br></pre></td></tr></table></figure>

<h3 id="4-旋转图像"><a href="#4-旋转图像" class="headerlink" title="4. 旋转图像"></a>4. 旋转图像</h3><p>顺时针旋转图像 90 度。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick input.jpg -rotate 90 output.jpg</span><br></pre></td></tr></table></figure>

<h3 id="5-添加水印"><a href="#5-添加水印" class="headerlink" title="5. 添加水印"></a>5. 添加水印</h3><p>在图像上添加水印文字（位置在右下角）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick input.jpg -gravity southeast -pointsize 24 -fill white -annotate +10+10 <span class="string">&#x27;Watermark&#x27;</span> output.jpg</span><br></pre></td></tr></table></figure>

<h3 id="6-调整图像质量"><a href="#6-调整图像质量" class="headerlink" title="6. 调整图像质量"></a>6. 调整图像质量</h3><p>设置图像质量，适用于 JPEG 格式的图片压缩。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick input.jpg -quality 85 output.jpg</span><br></pre></td></tr></table></figure>

<h3 id="7-合并图像（拼接）"><a href="#7-合并图像（拼接）" class="headerlink" title="7. 合并图像（拼接）"></a>7. 合并图像（拼接）</h3><p>水平或垂直拼接多张图像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick +append image1.jpg image2.jpg horizontal_output.jpg  <span class="comment"># 水平拼接</span></span><br><span class="line">magick -append image1.jpg image2.jpg vertical_output.jpg    <span class="comment"># 垂直拼接</span></span><br></pre></td></tr></table></figure>

<h3 id="8-添加边框"><a href="#8-添加边框" class="headerlink" title="8. 添加边框"></a>8. 添加边框</h3><p>为图像添加边框。例如，添加一个 5 像素的红色边框。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick input.jpg -bordercolor red -border 5x5 output.jpg</span><br></pre></td></tr></table></figure>

<h3 id="9-转换-PDF-为图像"><a href="#9-转换-PDF-为图像" class="headerlink" title="9. 转换 PDF 为图像"></a>9. 转换 PDF 为图像</h3><p>将 PDF 页面转换为 PNG 格式，指定分辨率（如 300 dpi）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick -density 300 input.pdf output.png</span><br></pre></td></tr></table></figure>
<p>如果需要将 PDF 中的每一页保存为单独的 PNG 图像，可以使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick -density 300 input.pdf page_%03d.png</span><br></pre></td></tr></table></figure>

<h3 id="10-转换图像为-PDF"><a href="#10-转换图像为-PDF" class="headerlink" title="10. 转换图像为 PDF"></a>10. 转换图像为 PDF</h3><p>将多张图像合并成一个 PDF 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">magick image1.jpg image2.jpg output.pdf</span><br><span class="line"></span><br><span class="line"><span class="comment">#多个图片转换</span></span><br><span class="line"><span class="built_in">ls</span> -l | awk <span class="string">&#x27;NR &gt; 1 &#123;print $NF&#125;&#x27;</span> | <span class="built_in">tr</span> <span class="string">&quot;\n&quot;</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line"></span><br><span class="line">magick `<span class="built_in">ls</span> -l | grep jpg | awk <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span> | <span class="built_in">tr</span> <span class="string">&quot;\n&quot;</span> <span class="string">&#x27; &#x27;</span>` output.pdf</span><br></pre></td></tr></table></figure>

<h3 id="11-批量处理文件"><a href="#11-批量处理文件" class="headerlink" title="11. 批量处理文件"></a>11. 批量处理文件</h3><p>一次性对多个文件进行操作，调整大小为 50%：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick mogrify -resize 50% *.jpg</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<code>mogrify</code> 会直接覆盖原始文件，建议先备份或在不同目录操作。</p>
</blockquote>
<h3 id="12-图像格式优化（减小文件大小）"><a href="#12-图像格式优化（减小文件大小）" class="headerlink" title="12. 图像格式优化（减小文件大小）"></a>12. 图像格式优化（减小文件大小）</h3><p>通过移除元数据和设置压缩等级优化图像大小。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick input.jpg -strip -quality 85 output.jpg</span><br></pre></td></tr></table></figure>

<h3 id="13-应用模糊效果"><a href="#13-应用模糊效果" class="headerlink" title="13. 应用模糊效果"></a>13. 应用模糊效果</h3><p>对图像应用模糊效果，可以控制模糊程度。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick input.jpg -blur 0x8 output.jpg  <span class="comment"># 0x8 控制模糊半径和 sigma 值</span></span><br></pre></td></tr></table></figure>

<h3 id="14-翻转和镜像"><a href="#14-翻转和镜像" class="headerlink" title="14. 翻转和镜像"></a>14. 翻转和镜像</h3><p>上下翻转或左右镜像图像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick input.jpg -flip output_flip.jpg        <span class="comment"># 上下翻转</span></span><br><span class="line">magick input.jpg -flop output_flop.jpg        <span class="comment"># 左右镜像</span></span><br></pre></td></tr></table></figure>

<h3 id="15-提取图像信息"><a href="#15-提取图像信息" class="headerlink" title="15. 提取图像信息"></a>15. 提取图像信息</h3><p>查看图像的详细信息，包括尺寸、格式、色彩模式等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick identify -verbose input.jpg</span><br></pre></td></tr></table></figure>

<h3 id="16-图像转灰度"><a href="#16-图像转灰度" class="headerlink" title="16. 图像转灰度"></a>16. 图像转灰度</h3><p>将彩色图像转换为灰度。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick input.jpg -colorspace Gray output.jpg</span><br></pre></td></tr></table></figure>

<h3 id="17-添加阴影"><a href="#17-添加阴影" class="headerlink" title="17. 添加阴影"></a>17. 添加阴影</h3><p>为图像添加阴影效果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick input.jpg -background black -shadow 80x3+5+5 output_with_shadow.png</span><br></pre></td></tr></table></figure>

<h3 id="18-动态GIF操作"><a href="#18-动态GIF操作" class="headerlink" title="18. 动态GIF操作"></a>18. 动态GIF操作</h3><p>创建或分解 GIF 动画。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick -delay 20 -loop 0 frame_*.jpg output.gif  <span class="comment"># 创建 GIF，20ms 间隔</span></span><br><span class="line">magick input.gif frame_%03d.png                   <span class="comment"># 将 GIF 分解成多帧 PNG 图像</span></span><br></pre></td></tr></table></figure>

<h3 id="19-将-PDF-分解成多张-PNG（每页一张）"><a href="#19-将-PDF-分解成多张-PNG（每页一张）" class="headerlink" title="19. 将 PDF 分解成多张 PNG（每页一张）"></a>19. 将 PDF 分解成多张 PNG（每页一张）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magick -density 300 input.pdf output_page_%03d.png</span><br></pre></td></tr></table></figure>

<h3 id="20-从视频中提取帧并生成-GIF"><a href="#20-从视频中提取帧并生成-GIF" class="headerlink" title="20. 从视频中提取帧并生成 GIF"></a>20. 从视频中提取帧并生成 GIF</h3><p>将视频中的帧生成 GIF 动画。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -r 10 <span class="string">&#x27;frame_%03d.png&#x27;</span>  <span class="comment"># 使用 FFmpeg 提取帧</span></span><br><span class="line">magick -delay 10 frame_*.png output.gif      <span class="comment"># 使用提取帧生成 GIF</span></span><br></pre></td></tr></table></figure>

<p>这些 <code>magick</code> 用法可以满足大多数日常图片和PDF转换的需求。更多高级用法可以查阅 <a href="https://imagemagick.org/index.php">ImageMagick 官方文档</a> 或 <code>magick</code> 的帮助页面：<code>magick -help</code>。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>metrics的常用命令</title>
    <url>/2024/12/09/metrics%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="关于-Metrics-的常用命令"><a href="#关于-Metrics-的常用命令" class="headerlink" title="关于 Metrics 的常用命令"></a>关于 Metrics 的常用命令</h3><ol>
<li><p><strong>查看 Kubelet 的指标</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get --raw <span class="string">&quot;/metrics&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>返回 Kubelet 的本地监控指标，主要包括运行时性能和系统状态。</li>
</ul>
</li>
<li><p><strong>查看节点的 cAdvisor 指标</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get --raw <span class="string">&quot;/api/v1/nodes/&lt;nodeName&gt;/proxy/metrics/cadvisor&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>获取容器级别的详细性能指标。</li>
</ul>
</li>
<li><p><strong>查看 API Server 的指标</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get --raw <span class="string">&quot;/metrics&quot;</span> | grep apiserver</span><br></pre></td></tr></table></figure>
<ul>
<li>返回 API Server 的性能指标。</li>
</ul>
</li>
<li><p><strong>查看 Controller Manager 的指标</strong>：<br>在 Controller Manager 所在的节点运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:10252/metrics</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看 Scheduler 的指标</strong>：<br>在 Scheduler 所在的节点运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:10251/metrics</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看 Metrics Server 的 API</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get --raw <span class="string">&quot;/apis/metrics.k8s.io/v1beta1/nodes&quot;</span></span><br></pre></td></tr></table></figure>
<p>或查看 Pod 的指标：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get --raw <span class="string">&quot;/apis/metrics.k8s.io/v1beta1/pods&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Prometheus 拉取指标</strong>：<br>如果集群中部署了 Prometheus，可以直接通过其 UI 或 API 获取指标，使用 PromQL 查询资源利用率。</p>
</li>
</ol>
<hr>
<h3 id="Kubernetes-Metrics-的整体知识架构"><a href="#Kubernetes-Metrics-的整体知识架构" class="headerlink" title="Kubernetes Metrics 的整体知识架构"></a>Kubernetes Metrics 的整体知识架构</h3><h4 id="1-数据来源"><a href="#1-数据来源" class="headerlink" title="1. 数据来源"></a><strong>1. 数据来源</strong></h4><ul>
<li><strong>Kubelet cAdvisor</strong>：提供节点和容器的资源使用数据。</li>
<li><strong>Metrics Server</strong>：聚合来自 Kubelet 的指标，用于 Horizontal Pod Autoscaler（HPA）等。</li>
<li><strong>Prometheus</strong>：一个全面的监控解决方案，用于存储和查询集群中所有相关的指标数据。</li>
<li><strong>API Server 和 Controller 指标</strong>：暴露组件性能。</li>
</ul>
<h4 id="2-相关工具"><a href="#2-相关工具" class="headerlink" title="2. 相关工具"></a><strong>2. 相关工具</strong></h4><ul>
<li><strong>kubectl top</strong>：快速查看节点和 Pod 的资源使用：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl top nodes</span><br><span class="line">kubectl top pods --namespace=&lt;namespace&gt;</span><br></pre></td></tr></table></figure></li>
<li><strong>Prometheus&#x2F;Grafana</strong>：用于可视化和分析。</li>
<li><strong>Custom Metrics Adapter</strong>：支持自定义指标。</li>
</ul>
<h4 id="3-最佳实践"><a href="#3-最佳实践" class="headerlink" title="3. 最佳实践"></a><strong>3. 最佳实践</strong></h4><ol>
<li><strong>启用 Metrics Server</strong>：用于 HPA 和基本资源监控。</li>
<li><strong>使用 Prometheus</strong>：集中化收集和存储指标。</li>
<li><strong>建立告警系统</strong>：通过 Alertmanager 或其他工具设置告警。</li>
<li><strong>分析指标覆盖范围</strong>：确保所有重要组件和工作负载都有相关指标暴露。</li>
<li><strong>优化监控开销</strong>：根据需要采样和聚合数据，避免监控开销过大。</li>
</ol>
<hr>
<h3 id="推荐文档与资源"><a href="#推荐文档与资源" class="headerlink" title="推荐文档与资源"></a>推荐文档与资源</h3><ol>
<li><p><strong>Kubernetes 官方文档</strong>：</p>
<ul>
<li><a href="https://kubernetes.io/docs/tasks/debug/debug-cluster/resource-metrics/">Metrics for Kubernetes Components</a></li>
<li><a href="https://kubernetes.io/docs/concepts/cluster-administration/monitoring/">Monitoring Architecture</a></li>
</ul>
</li>
<li><p><strong>Prometheus 官方文档</strong>：</p>
<ul>
<li><a href="https://prometheus.io/docs/">Prometheus Documentation</a></li>
</ul>
</li>
<li><p><strong>社区工具</strong>：</p>
<ul>
<li><a href="https://github.com/prometheus-operator/kube-prometheus">Kube-prometheus-stack</a><br>一个推荐的 Prometheus Operator 部署方案。</li>
</ul>
</li>
<li><p><strong>博客与案例</strong>：</p>
<ul>
<li><a href="https://www.cncf.io/">CNCF Metrics Best Practices</a><br>关于监控和指标的实践指导。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>nfs部署及使用</title>
    <url>/2024/12/20/nfs%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="1-NFS-服务端配置"><a href="#1-NFS-服务端配置" class="headerlink" title="1. NFS 服务端配置"></a><strong>1. NFS 服务端配置</strong></h3><h4 id="1-1-安装-NFS-服务"><a href="#1-1-安装-NFS-服务" class="headerlink" title="1.1 安装 NFS 服务"></a><strong>1.1 安装 NFS 服务</strong></h4><p>在 NFS 服务端安装必要的软件包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y nfs-utils</span><br></pre></td></tr></table></figure>

<h4 id="1-2-配置共享目录"><a href="#1-2-配置共享目录" class="headerlink" title="1.2 配置共享目录"></a><strong>1.2 配置共享目录</strong></h4><ol>
<li><p>创建共享目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/shell</span><br><span class="line"><span class="built_in">chmod</span> 755 /data/shell</span><br><span class="line"><span class="built_in">chown</span> nfsnobody:nfsnobody /data/shell</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑 NFS 配置文件 <code>/etc/exports</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/exports</span><br></pre></td></tr></table></figure>
<p>添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/data/shell  *(rw,sync,no_root_squash)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>rw</code>：允许读写。</li>
<li><code>sync</code>：同步模式，确保数据写入磁盘后才返回客户端。</li>
<li><code>no_root_squash</code>：允许客户端以 root 身份访问。</li>
</ul>
</li>
<li><p>检查配置是否正确：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exportfs -rv</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="1-3-启动和配置-NFS-服务"><a href="#1-3-启动和配置-NFS-服务" class="headerlink" title="1.3 启动和配置 NFS 服务"></a><strong>1.3 启动和配置 NFS 服务</strong></h4><ol>
<li><p>启动 NFS 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nfs-server</span><br><span class="line">systemctl start nfs-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查 NFS 服务状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status nfs-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>确保防火墙允许 NFS 服务端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-service=nfs</span><br><span class="line">firewall-cmd --permanent --add-service=mountd</span><br><span class="line">firewall-cmd --permanent --add-service=rpc-bind</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
</li>
<li><p>确认共享目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">showmount -e localhost</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h3 id="2-NFS-客户端配置"><a href="#2-NFS-客户端配置" class="headerlink" title="2. NFS 客户端配置"></a><strong>2. NFS 客户端配置</strong></h3><h4 id="2-1-安装-NFS-客户端工具"><a href="#2-1-安装-NFS-客户端工具" class="headerlink" title="2.1 安装 NFS 客户端工具"></a><strong>2.1 安装 NFS 客户端工具</strong></h4><p>在客户端机器上安装 NFS 工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y nfs-utils</span><br></pre></td></tr></table></figure>

<h4 id="2-2-查看-NFS-服务端的共享目录"><a href="#2-2-查看-NFS-服务端的共享目录" class="headerlink" title="2.2 查看 NFS 服务端的共享目录"></a><strong>2.2 查看 NFS 服务端的共享目录</strong></h4><p>使用 <code>showmount</code> 命令查看 NFS 服务端的共享目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">showmount -e 192.168.100.100</span><br></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Export list for 192.168.100.100:</span><br><span class="line">/data/shell *</span><br></pre></td></tr></table></figure>

<h4 id="2-3-挂载-NFS-共享目录"><a href="#2-3-挂载-NFS-共享目录" class="headerlink" title="2.3 挂载 NFS 共享目录"></a><strong>2.3 挂载 NFS 共享目录</strong></h4><p>将 NFS 服务端的共享目录挂载到本地：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount -t nfs 192.168.100.100:/data/shell /data/shell</span><br></pre></td></tr></table></figure>

<h4 id="2-4-持久化挂载"><a href="#2-4-持久化挂载" class="headerlink" title="2.4 持久化挂载"></a><strong>2.4 持久化挂载</strong></h4><p>编辑 <code>/etc/fstab</code> 文件，确保重启后自动挂载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/fstab</span><br></pre></td></tr></table></figure>
<p>添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.100.100:/data/shell /data/shell nfs defaults 0 0</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-测试和管理"><a href="#3-测试和管理" class="headerlink" title="3. 测试和管理"></a><strong>3. 测试和管理</strong></h3><h4 id="3-1-测试挂载"><a href="#3-1-测试挂载" class="headerlink" title="3.1 测试挂载"></a><strong>3.1 测试挂载</strong></h4><ol>
<li><p>在客户端查看挂载目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /data/shell</span><br></pre></td></tr></table></figure>
</li>
<li><p>在服务端修改共享目录内容，验证客户端是否同步更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Test NFS&quot;</span> &gt; /data/shell/test.txt</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-2-卸载挂载目录"><a href="#3-2-卸载挂载目录" class="headerlink" title="3.2 卸载挂载目录"></a><strong>3.2 卸载挂载目录</strong></h4><p>如果需要卸载挂载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount /data/shell</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-维护与清理日志（脚本自动化）"><a href="#4-维护与清理日志（脚本自动化）" class="headerlink" title="4. 维护与清理日志（脚本自动化）"></a><strong>4. 维护与清理日志（脚本自动化）</strong></h3><p>以下脚本自动压缩和清理日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">GZDAY=`<span class="built_in">date</span> -d <span class="string">&quot;-1 day&quot;</span> <span class="string">&quot;+%Y%m%d&quot;</span>`</span><br><span class="line">RMDAY=`<span class="built_in">date</span> -d <span class="string">&quot;-14 day&quot;</span> <span class="string">&quot;+%Y%m%d&quot;</span>`</span><br><span class="line"></span><br><span class="line">LOGDIRS=`find /data/nginx/logs/ -<span class="built_in">type</span> d | grep -v archive`</span><br><span class="line">LOGDIRS=(<span class="variable">$LOGDIRS</span>)</span><br><span class="line"></span><br><span class="line">OTHERDIRS=(</span><br><span class="line"><span class="string">&quot;/home/q/system/hulk/logs&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">LOGDIRS=(</span><br><span class="line"><span class="variable">$&#123;LOGDIRS[@]&#125;</span></span><br><span class="line"><span class="variable">$&#123;OTHERDIRS[@]&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;LOGDIRS[@]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">mkdir</span> -p <span class="variable">$dir</span>/archive</span><br><span class="line">    <span class="built_in">mv</span> <span class="variable">$dir</span>/*<span class="variable">$GZDAY</span>* <span class="variable">$dir</span>/archive/</span><br><span class="line">    gzip -1 <span class="variable">$dir</span>/archive/*<span class="variable">$GZDAY</span>*</span><br><span class="line">    <span class="built_in">rm</span> -rf <span class="variable">$dir</span>/archive/*<span class="variable">$RMDAY</span>*</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<ul>
<li>将脚本保存为 <code>log_cleaner.sh</code>。</li>
<li>添加可执行权限：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x log_cleaner.sh</span><br></pre></td></tr></table></figure></li>
<li>定时执行（例如，每天凌晨 2 点）：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
添加：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 2 * * * /path/to/log_cleaner.sh</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a><strong>最佳实践</strong></h3><ol>
<li><p><strong>安全配置</strong>：</p>
<ul>
<li>使用 <code>rw,sync</code> 但避免 <code>no_root_squash</code>，可替换为特定用户的 UID&#x2F;GID。</li>
<li>限制访问来源：<code>/data/shell 192.168.1.0/24(rw,sync)</code>。</li>
</ul>
</li>
<li><p><strong>性能优化</strong>：</p>
<ul>
<li>使用 <code>async</code> 模式提高性能（需根据场景权衡）。</li>
<li>调整挂载参数：<code>rsize</code> 和 <code>wsize</code>（如 1MB），以提高传输效率。</li>
</ul>
</li>
<li><p><strong>监控与报警</strong>：</p>
<ul>
<li>使用 <code>nfsstat</code> 查看性能统计。<a href="https://bashcommandnotfound.cn/article/linux-nfsstat-command">https://bashcommandnotfound.cn/article/linux-nfsstat-command</a></li>
<li>配合 Prometheus 或其他工具监控存储使用率。</li>
</ul>
</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>nginx demo service</title>
    <url>/2024/11/08/nginx-demo-service/</url>
    <content><![CDATA[<h2 id="配置nginx服务"><a href="#配置nginx服务" class="headerlink" title="配置nginx服务"></a>配置nginx服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOL &gt; /Users/xxx/share/nginx.conf</span><br><span class="line">events &#123;&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root /usr/share/nginx/html;</span><br><span class="line">            autoindex on; # 启用目录列表功能</span><br><span class="line">            autoindex_exact_size off; # 以KB或MB显示文件大小</span><br><span class="line">            autoindex_localtime on; # 以本地时间显示文件的修改时间</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOL</span><br></pre></td></tr></table></figure>

<h2 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="启动docker服务"></a>启动docker服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line">docker run --name nginx-share -d \</span><br><span class="line">    -p 8080:80 \</span><br><span class="line">    -v /Users/xxx/share:/usr/share/nginx/html \</span><br><span class="line">    -v /Users/xxx/share/nginx.conf:/etc/nginx/nginx.conf:ro \</span><br><span class="line">    nginx</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
  </entry>
  <entry>
    <title>nginx 模块及配置</title>
    <url>/2024/10/31/nginx-%E6%A8%A1%E5%9D%97%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="统计连接数"><a href="#统计连接数" class="headerlink" title="统计连接数"></a>统计连接数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#netstat</span><br><span class="line">netstat -ant | awk &#x27;NR &gt; 2 &#123;print $NF&#125;&#x27; | sort | uniq -c | sort -nr</span><br><span class="line"></span><br><span class="line">#ss</span><br><span class="line">ss -tan | awk &#x27;NR &gt; 2 &#123;print $1&#125;&#x27; | sort | uniq -c | sort -nr</span><br><span class="line"></span><br><span class="line">#读取/proc/net/tcp文件</span><br><span class="line">cat /proc/net/tcp | awk &#x27;NR &gt; 1 &#123;print $4&#125;&#x27; | cut -d&#x27;:&#x27; -f2 | sort | uniq -c | sort -nr</span><br><span class="line"></span><br><span class="line">#含义介绍</span><br><span class="line">TCP_ESTABLISHED:1   TCP_SYN_SENT:2</span><br><span class="line">TCP_SYN_RECV:3      TCP_FIN_WAIT1:4</span><br><span class="line">TCP_FIN_WAIT2:5     TCP_TIME_WAIT:6</span><br><span class="line">TCP_CLOSE:7         TCP_CLOSE_WAIT:8</span><br><span class="line">TCP_LAST_ACL:9      TCP_LISTEN:10</span><br><span class="line">TCP_CLOSING:11</span><br><span class="line"></span><br><span class="line">#获取linux服务器上数据</span><br><span class="line">cat /proc/net/tcp | awk &#x27;NR &gt; 1 &#123;</span><br><span class="line">    status=sprintf(&quot;%02X&quot;, strtonum(&quot;0x&quot;$4));</span><br><span class="line">    tcp_states[&quot;01&quot;]=&quot;TCP_ESTABLISHED&quot;;</span><br><span class="line">    tcp_states[&quot;02&quot;]=&quot;TCP_SYN_SENT&quot;;</span><br><span class="line">    tcp_states[&quot;03&quot;]=&quot;TCP_SYN_RECV&quot;;</span><br><span class="line">    tcp_states[&quot;04&quot;]=&quot;TCP_FIN_WAIT1&quot;;</span><br><span class="line">    tcp_states[&quot;05&quot;]=&quot;TCP_FIN_WAIT2&quot;;</span><br><span class="line">    tcp_states[&quot;06&quot;]=&quot;TCP_TIME_WAIT&quot;;</span><br><span class="line">    tcp_states[&quot;07&quot;]=&quot;TCP_CLOSE&quot;;</span><br><span class="line">    tcp_states[&quot;08&quot;]=&quot;TCP_CLOSE_WAIT&quot;;</span><br><span class="line">    tcp_states[&quot;09&quot;]=&quot;TCP_LAST_ACK&quot;;</span><br><span class="line">    tcp_states[&quot;0A&quot;]=&quot;TCP_LISTEN&quot;;</span><br><span class="line">    tcp_states[&quot;0B&quot;]=&quot;TCP_CLOSING&quot;;</span><br><span class="line">    print tcp_states[status];</span><br><span class="line">&#125;&#x27; | sort | uniq -c | sort -nr</span><br><span class="line"></span><br><span class="line">#获取容器上的网络数据</span><br><span class="line">kubectl exec -it &lt;pod-name&gt; -n &lt;namespace&gt; -- sh -c &quot;</span><br><span class="line">cat /proc/net/tcp | awk &#x27;NR &gt; 1 &#123;</span><br><span class="line">    status=\$4;</span><br><span class="line">    tcp_states[\&quot;01\&quot;]=\&quot;TCP_ESTABLISHED\&quot;;</span><br><span class="line">    tcp_states[\&quot;02\&quot;]=\&quot;TCP_SYN_SENT\&quot;;</span><br><span class="line">    tcp_states[\&quot;03\&quot;]=\&quot;TCP_SYN_RECV\&quot;;</span><br><span class="line">    tcp_states[\&quot;04\&quot;]=\&quot;TCP_FIN_WAIT1\&quot;;</span><br><span class="line">    tcp_states[\&quot;05\&quot;]=\&quot;TCP_FIN_WAIT2\&quot;;</span><br><span class="line">    tcp_states[\&quot;06\&quot;]=\&quot;TCP_TIME_WAIT\&quot;;</span><br><span class="line">    tcp_states[\&quot;07\&quot;]=\&quot;TCP_CLOSE\&quot;;</span><br><span class="line">    tcp_states[\&quot;08\&quot;]=\&quot;TCP_CLOSE_WAIT\&quot;;</span><br><span class="line">    tcp_states[\&quot;09\&quot;]=\&quot;TCP_LAST_ACK\&quot;;</span><br><span class="line">    tcp_states[\&quot;0A\&quot;]=\&quot;TCP_LISTEN\&quot;;</span><br><span class="line">    tcp_states[\&quot;0B\&quot;]=\&quot;TCP_CLOSING\&quot;;</span><br><span class="line">    status=sprintf(\&quot;%02X\&quot;, \&quot;0x\&quot; substr(status, 1, 2));</span><br><span class="line">    print tcp_states[status];</span><br><span class="line">&#125;&#x27; | sort | uniq -c | sort -nr</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shispring/picgo/master/20241031145102.png" alt="tcp" title="tcp1"></p>
<hr>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://raw.githubusercontent.com/shispring/picgo/master/20241031120653.png" alt="nginx架构" title="nginx2"></p>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p><img src="https://raw.githubusercontent.com/shispring/picgo/master/20241031120448.png" alt="nginx模块" title="nginx1"></p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
  </entry>
  <entry>
    <title>优秀资源</title>
    <url>/2024/09/27/nice-blog/</url>
    <content><![CDATA[<h2 id="博客类"><a href="#博客类" class="headerlink" title="博客类"></a>博客类</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//docker.nsddd.top/</span></span><br></pre></td></tr></table></figure>

<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/zq2599/blog_demos</span><br><span class="line"></span><br><span class="line">#kubebuilder实践</span><br><span class="line">https://github.com/chenzongshu/Kubernetes/blob/master/kubebuilder/kubebuilder%E4%BB%8B%E7%BB%8D.md</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#好的知识总结</span><br><span class="line">https://github.com/mykubernetes/kubernetes/blob/master/curl%E8%AE%BF%E9%97%AEapi.md</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#client-go教程</span><br><span class="line">https://github.com/owenliang/k8s-client-go/tree/master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Kubernetes 官方的示例控制器项目，展示了如何使用 client-go 和 Informers。</span><br><span class="line">https://github.com/kubernetes/sample-controller</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#一个流行的 Kubernetes Controller，用于管理 TLS 证书，代码质量高，设计优秀。</span><br><span class="line">https://github.com/cert-manager/cert-manager</span><br><span class="line"></span><br><span class="line">#正则表达式（反选:负向先行断言）</span><br><span class="line">https://www.cnblogs.com/JourneyOfFlower/p/15039751.html</span><br><span class="line"></span><br><span class="line">#https双向验证</span><br><span class="line">https://help.aliyun.com/zh/api-gateway/traditional-api-gateway/user-guide/mutual-tls-authentication</span><br><span class="line"></span><br><span class="line">#阳明博客</span><br><span class="line">https://github.com/cnych/qikqiak.com/?tab=readme-ov-file</span><br><span class="line"></span><br><span class="line">#分析源码的仓库</span><br><span class="line">https://github.com/rfyiamcool/notes</span><br><span class="line"></span><br><span class="line">#性能调优</span><br><span class="line">https://github.com/Miller-Xie/Linux-kernel-notes/blob/master/Linux%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.md</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nice-resources</category>
      </categories>
  </entry>
  <entry>
    <title>nmap常用命令解析</title>
    <url>/2024/10/21/nmap%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="一、常见用法及命令"><a href="#一、常见用法及命令" class="headerlink" title="一、常见用法及命令"></a><strong>一、常见用法及命令</strong></h2><ol>
<li>   <strong>扫描主机是否在线</strong>（Ping 扫描）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.1.0/24</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong>：检查 192.168.1.0&#x2F;24 网段内哪些主机在线。</li>
<li><strong>解释</strong>：-sn 参数禁用端口扫描，只进行主机发现。</li>
</ul>
<ol start="2">
<li>   <strong>端口扫描</strong>（默认 TCP 扫描）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap 192.168.1.1</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong>：扫描主机常用端口（1-1024），检查哪些端口开放。</li>
<li><strong>默认行为</strong>：使用 TCP 连接进行扫描。</li>
</ul>
<ol start="3">
<li>   <strong>扫描指定端口范围</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -p 22-80 192.168.1.1</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong>：扫描 192.168.1.1 上 22 到 80 端口的状态。</li>
</ul>
<ol start="4">
<li>   <strong>服务与版本检测</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.1.1</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong>：检测开放端口上运行的服务及版本信息。</li>
<li><strong>解释</strong>：-sV 参数用于版本探测。</li>
</ul>
<ol start="5">
<li>   <strong>操作系统识别</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -O 192.168.1.1</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong>：分析目标主机的操作系统类型及版本。</li>
<li><strong>解释</strong>：-O 参数用于启用操作系统检测。</li>
</ul>
<ol start="6">
<li>   <strong>检测网络中的所有设备</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.1.0/24 -oG - | grep Up</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong>：列出 192.168.1.0&#x2F;24 网段内在线的设备。</li>
</ul>
<ol start="7">
<li>   <strong>UDP 扫描</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sU -p 53,123 192.168.1.1</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用</strong>：检测目标主机上的 UDP 端口，如 DNS（53）和 NTP（123）。</li>
<li><strong>解释</strong>：-sU 启用 UDP 扫描。</li>
</ul>
<p><strong>Nmap 脚本：针对 IP 进行一系列扫描</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方法：./nmap_scan.sh &lt;IP地址&gt;</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;请提供目标 IP 地址作为参数。&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;示例： ./nmap_scan.sh 192.168.1.1&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">TARGET_IP=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在探测目标主机是否在线...&quot;</span></span><br><span class="line">nmap -sn <span class="variable">$TARGET_IP</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行端口扫描...&quot;</span></span><br><span class="line">nmap -p 1-1000 <span class="variable">$TARGET_IP</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检测服务版本...&quot;</span></span><br><span class="line">nmap -sV <span class="variable">$TARGET_IP</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检测操作系统类型...&quot;</span></span><br><span class="line">nmap -O <span class="variable">$TARGET_IP</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;扫描完成！&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、Nmap-的-NSE-脚本功能及-SSL-TLS-扫描用法"><a href="#二、Nmap-的-NSE-脚本功能及-SSL-TLS-扫描用法" class="headerlink" title="二、Nmap 的 NSE 脚本功能及 SSL&#x2F;TLS 扫描用法"></a><strong>二、Nmap 的 NSE 脚本功能及 SSL&#x2F;TLS 扫描用法</strong></h2><p>Nmap 支持通过 <strong>NSE（Nmap Scripting Engine）脚本</strong> 执行更复杂的扫描任务，例如检测 <strong>TLS&#x2F;SSL 版本、加密算法的强度</strong>、服务漏洞扫描等。这些脚本可以帮助用户深入分析网络安全情况，尤其是检测服务的 SSL&#x2F;TLS 配置是否符合最佳实践。</p>
<p><strong>TLS&#x2F;SSL 检测的常见命令</strong></p>
<p><strong>1. 使用 ssl-enum-ciphers 检测支持的 TLS 版本及加密算法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap --script ssl-enum-ciphers -p 443 example.com</span><br></pre></td></tr></table></figure>

<p>•	<strong>作用</strong>：列出目标主机（example.com）在 443 端口上启用的 TLS 版本（如 TLS 1.0&#x2F;1.2&#x2F;1.3），以及支持的加密套件和密钥交换算法。</p>
<p>•	<strong>使用场景</strong>：验证服务器是否启用了弱 TLS 版本（如 TLS 1.0&#x2F;1.1）或不安全的加密算法。</p>
<p><strong>输出示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PORT    STATE SERVICE</span><br><span class="line">443/tcp open  https</span><br><span class="line">| ssl-enum-ciphers:</span><br><span class="line">|   TLSv1.2:</span><br><span class="line">|     ciphers:</span><br><span class="line">|       TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 - strong</span><br><span class="line">|     compressors: NONE</span><br><span class="line">|_  least strength: strong</span><br></pre></td></tr></table></figure>

<p><strong>2. 检测证书信息（ssl-cert 脚本）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap --script ssl-cert -p 443 example.com</span><br></pre></td></tr></table></figure>

<p>•	<strong>作用</strong>：显示目标服务器 SSL 证书的详细信息，包括：</p>
<p>•	证书的有效期、颁发机构（CA）。</p>
<p>•	证书链中是否有不信任的证书。</p>
<p>•	<strong>使用场景</strong>：检查证书是否即将到期，或是否使用了自签名证书。</p>
<p><strong>输出示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PORT    STATE SERVICE</span><br><span class="line">443/tcp open  https</span><br><span class="line">| ssl-cert: Subject: commonName=example.com</span><br><span class="line">| Issuer: commonName=Let<span class="string">&#x27;s Encrypt Authority</span></span><br><span class="line"><span class="string">| Public Key type: RSA</span></span><br><span class="line"><span class="string">| Public Key bits: 2048</span></span><br><span class="line"><span class="string">| Signature Algorithm: sha256WithRSAEncryption</span></span><br><span class="line"><span class="string">| Not valid before: 2024-01-01T00:00:00</span></span><br><span class="line"><span class="string">|_Not valid after: 2024-04-01T00:00:00</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 检查是否支持心脏滴血漏洞（Heartbleed - ssl-heartbleed）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap --script ssl-heartbleed -p 443 example.com</span><br></pre></td></tr></table></figure>

<p>•	<strong>作用</strong>：检测目标服务器是否存在 <strong>Heartbleed 漏洞</strong>（CVE-2014-0160）。</p>
<p>•	<strong>使用场景</strong>：验证服务器是否使用了存在此漏洞的 OpenSSL 版本。</p>
<p><strong>输出示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PORT    STATE SERVICE</span><br><span class="line">443/tcp open  https</span><br><span class="line">| ssl-heartbleed:</span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   The Heartbleed Bug is a serious vulnerability <span class="keyword">in</span> the popular OpenSSL cryptographic software library.</span><br><span class="line">|_  See: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0160</span><br></pre></td></tr></table></figure>

<p><strong>其他常用 SSL&#x2F;TLS 相关 NSE 脚本</strong></p>
<table>
<thead>
<tr>
<th><strong>脚本名</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>ssl-cert</td>
<td>获取并显示服务器的 SSL 证书详细信息。</td>
</tr>
<tr>
<td>ssl-enum-ciphers</td>
<td>列出所有启用的 TLS 版本及加密套件。</td>
</tr>
<tr>
<td>ssl-heartbleed</td>
<td>检查服务器是否存在 Heartbleed 漏洞。</td>
</tr>
<tr>
<td>ssl-poodle</td>
<td>检查是否存在 POODLE 漏洞（针对 SSL 3.0）。</td>
</tr>
<tr>
<td>ssl-dh-params</td>
<td>检测 Diffie-Hellman 参数的强度，检查是否易受 Logjam 攻击。</td>
</tr>
</tbody></table>
<p><strong>NSE 脚本的其他用法</strong></p>
<ol>
<li>   <strong>扫描所有常见 SSL&#x2F;TLS 相关漏洞：</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap --script ssl-* -p 443 example.com</span><br></pre></td></tr></table></figure>

<p>•	<strong>作用</strong>：一次性运行所有与 SSL 相关的脚本，检测各种安全问题。</p>
<ol start="2">
<li>   <strong>组合多个脚本扫描：</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap --script <span class="string">&quot;ssl-cert,ssl-enum-ciphers&quot;</span> -p 443 example.com</span><br></pre></td></tr></table></figure>

<p>•	<strong>作用</strong>：同时执行多个特定脚本，节省时间。</p>
<p><strong>总结与学习建议</strong></p>
<ol>
<li><p>   ssl-enum-ciphers <strong>和</strong> ssl-cert 是日常检测 SSL&#x2F;TLS 配置的必备工具，可帮助管理员发现不安全的协议或证书问题。</p>
</li>
<li><p>   使用 NSE 脚本时，需要了解网络环境的具体需求，选择适合的脚本组合。</p>
</li>
<li><p>   <strong>学习路径</strong>：</p>
</li>
</ol>
<p>•	先熟悉基础的 Nmap 端口扫描命令。</p>
<p>•	探索 NSE 脚本的使用，逐步了解 TLS&#x2F;SSL 配置。</p>
<p>•	定期检查官方文档和社区，了解最新的安全漏洞和 Nmap 新增脚本。</p>
<p>通过以上命令与脚本，Nmap 能够帮助你快速分析 TLS&#x2F;SSL 配置是否存在问题，为网络安全提供重要保障。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>pod重建|重启行为</title>
    <url>/2024/11/01/pod%E9%87%8D%E5%BB%BA-%E9%87%8D%E5%90%AF%E8%A1%8C%E4%B8%BA/</url>
    <content><![CDATA[<p>在Kubernetes中，<code>Deployment</code>的更新行为是有规律的。变更<code>Deployment</code>的某些字段会触发Pod重建或重启，而某些字段的变更则不会影响Pod的运行。以下是详细的总结：</p>
<h3 id="触发Pod重建的行为"><a href="#触发Pod重建的行为" class="headerlink" title="触发Pod重建的行为"></a>触发Pod重建的行为</h3><p>以下更改会导致<code>Deployment</code>重新创建Pod，即：删除旧Pod并创建新Pod。</p>
<ol>
<li><strong>更新容器镜像</strong>：变更镜像的名称或标签（如从<code>v1</code>到<code>v2</code>）。</li>
<li><strong>资源限制和请求</strong>：变更<code>resources.requests</code>或<code>resources.limits</code>。</li>
<li><strong>环境变量</strong>：更改容器的环境变量（<code>env</code>字段）。</li>
<li><strong>亲和性和反亲和性规则</strong>：修改或添加<code>affinity</code>和<code>antiAffinity</code>。</li>
<li><strong>探针配置</strong>：更新<code>livenessProbe</code>或<code>readinessProbe</code>的配置。</li>
<li><strong>卷挂载</strong>：改变<code>volumeMounts</code>或<code>volumes</code>字段。</li>
<li><strong>initContainers</strong>或<strong>sidecar容器</strong>：添加、删除或更新init容器或sidecar容器。</li>
<li><strong>Pod标签和注解</strong>：修改影响<code>PodSpec</code>中的<code>metadata.labels</code>或<code>metadata.annotations</code>会引发Pod重建。</li>
<li><strong>端口配置</strong>：修改容器端口的配置。</li>
</ol>
<h3 id="触发Pod滚动更新但不完全重建的行为"><a href="#触发Pod滚动更新但不完全重建的行为" class="headerlink" title="触发Pod滚动更新但不完全重建的行为"></a>触发Pod滚动更新但不完全重建的行为</h3><p>一些行为会触发滚动更新，但不会删除所有Pod或引起中断：</p>
<ol>
<li><strong>RollingUpdate字段</strong>：变更<code>rollingUpdate</code>策略（如<code>maxUnavailable</code>或<code>maxSurge</code>），不会直接重建Pod，而是影响Pod的更新速率和方式。</li>
<li>**Horizontal Pod Autoscaler (HPA)**：HPA的更新不会直接导致Pod重建，但可能会根据负载情况动态调整Pod数量。</li>
</ol>
<h3 id="不会导致Pod重建或重启的行为"><a href="#不会导致Pod重建或重启的行为" class="headerlink" title="不会导致Pod重建或重启的行为"></a>不会导致Pod重建或重启的行为</h3><p>以下行为仅影响控制层，不会直接对Pod产生重启或重建的影响：</p>
<ol>
<li><strong>Deployment注解和标签</strong>：在<code>Deployment</code>级别添加或修改注解和标签，不会影响Pod。</li>
<li><strong>HPA</strong>的目标值调整（如<code>minReplicas</code>和<code>maxReplicas</code>）：更改不会重建现有Pod，而是动态扩展或缩减。</li>
<li><strong>服务配置</strong>：更新Service或Ingress的配置不会影响已存在的Pod。</li>
</ol>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>可以使用以下命令验证某些更改是否触发了Pod重建：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl rollout status deployment &lt;deployment-name&gt;  <span class="comment"># 检查Deployment是否正在进行滚动更新</span></span><br><span class="line">kubectl get replicaset -l &lt;app-label&gt;                <span class="comment"># 查看ReplicaSet状态，观察新旧ReplicaSet</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment &lt;deployment-name&gt;  <span class="comment"># 查看变更历史</span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><strong>会重建Pod</strong>：更新镜像、资源限制、环境变量、亲和性规则、探针、卷挂载、initContainers、Pod标签、端口。</li>
<li><strong>不会重建Pod</strong>：变更HPA目标值、<code>rollingUpdate</code>策略、<code>Deployment</code>注解和标签、Service或Ingress配置。</li>
</ul>
<p>掌握这些更新行为有助于更灵活地管理Pod的生命周期。</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>pod优雅关闭与问题排查</title>
    <url>/2024/12/24/pod%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E7%A7%AF%E7%B4%AF/</url>
    <content><![CDATA[<h2 id="1-Linux-信号与服务优雅停止"><a href="#1-Linux-信号与服务优雅停止" class="headerlink" title="1. Linux 信号与服务优雅停止"></a><strong>1. Linux 信号与服务优雅停止</strong></h2><p>服务在停止前需要收到信号通知以进行资源释放、关闭连接等清理操作。以下是常见信号及其特性：</p>
<h3 id="常见信号"><a href="#常见信号" class="headerlink" title="常见信号"></a><strong>常见信号</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> -l</span><br><span class="line">HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM ...</span><br></pre></td></tr></table></figure>

<ul>
<li>**SIGKILL (9)**：<ul>
<li>强制结束程序，无法捕获、阻塞或忽略。</li>
<li><strong>退出状态码</strong>：<code>128 + 9 = 137</code>。</li>
</ul>
</li>
<li>**SIGTERM (15)**：<ul>
<li>可被程序捕获，用于优雅停止。</li>
<li><strong>退出状态码</strong>：<code>128 + 15 = 143</code>。</li>
</ul>
</li>
</ul>
<h3 id="退出状态码范围"><a href="#退出状态码范围" class="headerlink" title="退出状态码范围"></a><strong>退出状态码范围</strong></h3><ul>
<li><strong>0</strong>：正常退出。</li>
<li><strong>1-128</strong>：程序自身异常退出。</li>
<li><strong>129-255</strong>：外部信号导致退出。</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h3><ul>
<li><code>systemctl reload docker</code>：重新加载 Docker 配置文件，不中断运行中的容器。</li>
<li><code>systemctl restart docker</code>：重启 Docker 服务，会停止并重新启动所有容器。</li>
</ul>
<hr>
<h2 id="2-Pod-优雅关闭"><a href="#2-Pod-优雅关闭" class="headerlink" title="2. Pod 优雅关闭"></a><strong>2. Pod 优雅关闭</strong></h2><p>优雅关闭确保 Pod 在终止时不会中断服务、影响数据一致性或浪费资源。</p>
<h3 id="优雅关闭的作用"><a href="#优雅关闭的作用" class="headerlink" title="优雅关闭的作用"></a><strong>优雅关闭的作用</strong></h3><ol>
<li><strong>避免服务中断</strong>：完成当前请求后再终止。</li>
<li><strong>确保数据一致性</strong>：允许数据持久化或事务处理。</li>
<li><strong>最小化用户影响</strong>：避免流量路由到已删除的 Pod。</li>
<li><strong>提高资源利用率</strong>：释放资源，避免泄露。</li>
</ol>
<h3 id="优雅关闭时间线"><a href="#优雅关闭时间线" class="headerlink" title="优雅关闭时间线"></a><strong>优雅关闭时间线</strong></h3><h3 id="时间线-1：网络层面的优雅关闭"><a href="#时间线-1：网络层面的优雅关闭" class="headerlink" title="时间线 1：网络层面的优雅关闭"></a><strong>时间线 1：网络层面的优雅关闭</strong></h3><ol>
<li><p><strong>Service Endpoint 移除</strong>：</p>
<ul>
<li><p>Pod 进入 <code>Terminating</code> 状态后，从 Service 的 Endpoint 列表中移除。</p>
</li>
<li><p><strong>检查点</strong>：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get endpoints &lt;service-name&gt; -o yaml</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>NetworkPolicy 规则清理</strong>：</p>
<ul>
<li>清理与 Pod 相关的网络规则。</li>
<li><strong>检查点</strong>：CNI 插件日志（如 Calico、Cilium）。</li>
</ul>
</li>
<li><p><strong>负载均衡器更新</strong>：</p>
<ul>
<li><p>从后端池中移除 Pod 地址。</p>
</li>
<li><p><strong>检查点</strong>：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl describe ingress &lt;ingress-name&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="时间线-2：Pod-的关闭步骤"><a href="#时间线-2：Pod-的关闭步骤" class="headerlink" title="时间线 2：Pod 的关闭步骤"></a><strong>时间线 2：Pod 的关闭步骤</strong></h3><ol>
<li><p><strong>SIGTERM 信号发送</strong>：</p>
<ul>
<li><p>通知容器内应用进行清理。</p>
</li>
<li><p><strong>检查点</strong>：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl describe pod &lt;pod-name&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>PreStop Hook 执行</strong>：</p>
<ul>
<li>执行清理脚本。</li>
<li><strong>检查点</strong>：查看容器日志。</li>
</ul>
</li>
<li><p><strong>容器优雅退出</strong>：</p>
<ul>
<li>处理 SIGTERM 信号。</li>
<li><strong>检查点</strong>：确认长连接或挂起任务是否处理。</li>
</ul>
</li>
<li><p>**强制终止 (SIGKILL)**：</p>
<ul>
<li>超过 <code>terminationGracePeriodSeconds</code> 后，发送 SIGKILL。</li>
<li><strong>检查点</strong>：查看 kubelet 日志。</li>
</ul>
</li>
<li><p><strong>资源清理</strong>：</p>
<ul>
<li><p>卸载存储卷，释放网络资源。</p>
</li>
<li><p><strong>检查点</strong>：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pv,pvc</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<hr>
<h2 id="3-Pod-删除原理"><a href="#3-Pod-删除原理" class="headerlink" title="3. Pod 删除原理"></a><strong>3. Pod 删除原理</strong></h2><h3 id="触发-Pod-删除的场景"><a href="#触发-Pod-删除的场景" class="headerlink" title="触发 Pod 删除的场景"></a><strong>触发 Pod 删除的场景</strong></h3><ol>
<li><strong>手动删除</strong>：<code>kubectl delete pod</code>。</li>
<li><strong>控制器策略</strong>：如 Deployment 缩减副本数。</li>
<li><strong>节点故障</strong>：节点失效后重新调度。</li>
<li><strong>资源限制</strong>：节点资源不足时删除低优先级 Pod。</li>
<li><strong>健康检查失败</strong>：探针连续失败。</li>
<li><strong>优先级抢占</strong>：释放资源给高优先级 Pod。</li>
<li><strong>更新策略</strong>：滚动更新替换旧 Pod。</li>
<li><strong>自动缩放</strong>：集群缩小时删除 Pod。</li>
</ol>
<hr>
<h2 id="4-Pod-长时间处于-Terminating-状态的原因"><a href="#4-Pod-长时间处于-Terminating-状态的原因" class="headerlink" title="4. Pod 长时间处于 Terminating 状态的原因"></a><strong>4. Pod 长时间处于 Terminating 状态的原因</strong></h2><ol>
<li><strong>存储未卸载</strong>：持久卷未成功释放。</li>
<li><strong>容器未终止</strong>：未正确响应 SIGTERM。</li>
<li><strong>Finalizer 阻塞</strong>：清理任务未完成。</li>
<li><strong>网络或 API Server 问题</strong>：通信异常。</li>
<li><strong>节点异常</strong>：节点不可用。</li>
</ol>
<h3 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a><strong>排查思路</strong></h3><ol>
<li><p><strong>查看 Pod 信息</strong>：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl describe pod &lt;pod-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查 Pod 的 Finalizer</span></span><br><span class="line">kubectl get pod &lt;pod-name&gt; -n &lt;namespace&gt; -o jsonpath=<span class="string">&#x27;&#123;.metadata.finalizers&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>检查容器状态</strong>：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pod &lt;pod-name&gt; -o jsonpath=<span class="string">&#x27;&#123;.status.containerStatuses[*].state&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>检查节点状态</strong>：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>检查存储状态</strong>：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pvc</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>强制删除 Pod</strong>：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete pod &lt;pod-name&gt; --force --grace-period=0</span><br><span class="line"></span><br><span class="line"><span class="comment">#发送 SIGTERM 信号的几种方式</span></span><br><span class="line"><span class="built_in">kill</span> -15 &lt;container-id&gt;</span><br><span class="line">docker <span class="built_in">kill</span> --signal=SIGTERM &lt;container-id&gt;</span><br><span class="line"><span class="comment">#如果使用 crictl： crictl stop &lt;container-id&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#强制重新触发优雅终止,例如，将宽限期设置为 10 秒：</span></span><br><span class="line">kubectl delete pod &lt;pod-name&gt; -n &lt;namespace&gt; --grace-period=10</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="5-Docker-与-Containerd-的日志排查"><a href="#5-Docker-与-Containerd-的日志排查" class="headerlink" title="5. Docker 与 Containerd 的日志排查"></a><strong>5. Docker 与 Containerd 的日志排查</strong></h2><h3 id="检查-Docker-日志"><a href="#检查-Docker-日志" class="headerlink" title="检查 Docker 日志"></a><strong>检查 Docker 日志</strong></h3><ol>
<li><p>查看 Docker 守护进程日志：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">journalctl -u docker | grep &lt;docker_id&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查 kubelet 清理失败记录：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">journalctl -u kubelet | grep <span class="string">&quot;cleanup&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="清理-Docker-残留资源"><a href="#清理-Docker-残留资源" class="headerlink" title="清理 Docker 残留资源"></a><strong>清理 Docker 残留资源</strong></h3><ol>
<li><p>删除退出的容器：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container prune -f</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除未使用的镜像：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image prune -f</span><br></pre></td></tr></table></figure>
</li>
<li><p>清理未使用的网络和卷：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network prune -f</span><br><span class="line">docker volume prune -f</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="清理-Containerd-残留资源"><a href="#清理-Containerd-残留资源" class="headerlink" title="清理 Containerd 残留资源"></a><strong>清理 Containerd 残留资源</strong></h3><ol>
<li><p>删除残留容器：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crictl <span class="built_in">rm</span> $(crictl ps -a -q)</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除未使用的镜像：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crictl rmi &lt;image-id&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="6-最佳实践"><a href="#6-最佳实践" class="headerlink" title="6. 最佳实践"></a><strong>6. 最佳实践</strong></h2><ol>
<li><strong>配置优雅终止</strong>：<ul>
<li>设置 <code>terminationGracePeriodSeconds</code>。</li>
<li>配置 PreStop Hook。</li>
</ul>
</li>
<li><strong>监控和告警</strong>：<ul>
<li>使用 Prometheus 检测 <code>Terminating</code> 状态 Pod。</li>
</ul>
</li>
<li><strong>避免 Finalizer 阻塞</strong>：<ul>
<li>确保 Finalizer 正常完成任务。</li>
</ul>
</li>
<li><strong>定期清理残留资源</strong>：<ul>
<li>检查并清理未使用的容器、镜像和存储。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>promQL整理</title>
    <url>/2024/12/23/promQL%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="CPU维度统计集群资源碎片"><a href="#CPU维度统计集群资源碎片" class="headerlink" title="CPU维度统计集群资源碎片"></a>CPU维度统计集群资源碎片</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 根据需求定义变量：cluster、cores</span><br><span class="line">sum(</span><br><span class="line">  floor(</span><br><span class="line">    (</span><br><span class="line">      sum(</span><br><span class="line">        kube_node_status_allocatable&#123;cluster=~&quot;$cluster&quot;, resource=&quot;cpu&quot;, node=~&quot;^docker.*&quot;&#125; </span><br><span class="line">        * on(node) group_left() kube_node_labels&#123;cluster=~&quot;$cluster&quot;,label_node_role_kubernetes_io_worker=&quot;true&quot;&#125;</span><br><span class="line">      ) by (cluster, node)</span><br><span class="line">      -</span><br><span class="line">      sum(</span><br><span class="line">        kube_pod_container_resource_requests&#123;cluster=~&quot;$cluster&quot;, resource=&quot;cpu&quot;, node=~&quot;^docker.*&quot;&#125; </span><br><span class="line">        * on(node) group_left() kube_node_labels&#123;cluster=~&quot;$cluster&quot;,label_node_role_kubernetes_io_worker=&quot;true&quot;&#125;</span><br><span class="line">      ) by (cluster, node)</span><br><span class="line">    ) / $cores</span><br><span class="line">  ) &gt; 0</span><br><span class="line">) by (cluster)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>shell根据输入月份，遍历当月日期</title>
    <url>/2022/10/31/shell-date-%E6%89%93%E5%8D%B0%E6%9C%88%E6%97%A5%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="shell脚本详情"><a href="#shell脚本详情" class="headerlink" title="shell脚本详情"></a>shell脚本详情</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo &quot;年月格式：2022年5月，则输入2022-05&quot;</span><br><span class="line">read -p &quot;请输入年月份：&quot; VAR</span><br><span class="line"></span><br><span class="line">#VAR=&quot;2022-06&quot;</span><br><span class="line"></span><br><span class="line">#当月第一天</span><br><span class="line">firstDay=`date  -d &quot;$&#123;VAR&#125;-01&quot; +%Y-%m-%d`</span><br><span class="line">#当月最后一天</span><br><span class="line">lastDay=`date  -d &quot;+1month -1day $&#123;VAR&#125;-01&quot;  +%Y-%m-%d`</span><br><span class="line"></span><br><span class="line">#使用数组存储每一天</span><br><span class="line">array_date=()</span><br><span class="line"></span><br><span class="line">#遍历月分的每一天</span><br><span class="line">firstDayTimestamp=`date -d &quot;$firstDay&quot; +%s`</span><br><span class="line">lastDayTimestamp=`date -d &quot;$lastDay&quot; +%s`</span><br><span class="line"></span><br><span class="line">for((currentTimestamp=$firstDayTimestamp; currentTimestamp &lt;= lastDayTimestamp; ));</span><br><span class="line">do</span><br><span class="line">    currentDay=`date -d@$currentTimestamp +%Y-%m-%d`</span><br><span class="line">    array_date[$&#123;#array_date[@]&#125;]=$currentDay</span><br><span class="line">    currentTimestamp=`expr $currentTimestamp + 86400`</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo $&#123;#array_date[*]&#125;</span><br><span class="line">echo $&#123;array_date[*]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>swagger部署k8s open api</title>
    <url>/2024/09/27/swagger%E9%83%A8%E7%BD%B2k8s-open-api/</url>
    <content><![CDATA[<h3 id="一、导出k8s-API配置"><a href="#一、导出k8s-API配置" class="headerlink" title="一、导出k8s API配置"></a>一、导出k8s API配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#临时启动服务</span></span><br><span class="line">kubectl proxy --port=8082</span><br><span class="line"><span class="comment">#导出配置</span></span><br><span class="line">curl http://localhost:8082/openapi/v2 &gt; k8s-swagger.json</span><br></pre></td></tr></table></figure>

<h3 id="二、启动服务"><a href="#二、启动服务" class="headerlink" title="二、启动服务"></a>二、启动服务</h3><ul>
<li>docker启动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8999:8080 \</span><br><span class="line">    -e SWAGGER_JSON=/k8s-swagger.json \</span><br><span class="line">    -v $(<span class="built_in">pwd</span>)/k8s-swagger.json:/k8s-swagger.json \</span><br><span class="line">    swaggerapi/swagger-ui</span><br></pre></td></tr></table></figure>

<ul>
<li>docker-compose启动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#vim docker-compose.yaml</span></span><br><span class="line"></span><br><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line">  document:</span><br><span class="line">    environment:</span><br><span class="line">      - SWAGGER_JSON=/k8s-swagger.json</span><br><span class="line">    image: swaggerapi/swagger-ui</span><br><span class="line">    volumes:</span><br><span class="line">      - ./k8s-swagger.json:/k8s-swagger.json</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8899:8080&quot;</span></span><br><span class="line">  editor:</span><br><span class="line">    image: swaggerapi/swagger-editor</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;9988:8080&quot;</span></span><br><span class="line">      </span><br><span class="line"> </span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">docker-compose -f ./docker-compose.yaml up -d </span><br><span class="line"><span class="comment">#查看服务    </span></span><br><span class="line">docker-compose -f ./docker-compose.yaml ps</span><br><span class="line"><span class="comment">#停止服务</span></span><br><span class="line">docker-compose -f ./docker-compose.yaml down</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>k8s</category>
        <category>server</category>
      </categories>
  </entry>
  <entry>
    <title>terminating的pod排查思路</title>
    <url>/2024/12/23/terminating%E7%9A%84pod%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h3 id="Pod-处于-Terminating-状态的原因"><a href="#Pod-处于-Terminating-状态的原因" class="headerlink" title="Pod 处于 Terminating 状态的原因"></a><strong>Pod 处于 <code>Terminating</code> 状态的原因</strong></h3><p>Pod 长时间处于 <code>Terminating</code> 状态，通常是因为 Kubernetes 在删除 Pod 时未能正常完成某些清理操作。以下是可能的原因：</p>
<ol>
<li><strong>挂载的存储未能正常卸载</strong>：<ul>
<li>Pod 使用了持久卷（PV），但存储卸载失败，导致 Pod 资源无法释放。</li>
</ul>
</li>
<li><strong>容器未能正常终止</strong>：<ul>
<li>Pod 中的容器未能按预期响应 <code>SIGTERM</code> 信号。</li>
<li>容器运行时（如 containerd、CRI-O）可能出现问题，导致容器未能被删除。</li>
</ul>
</li>
<li><strong>Finalizer 阻塞</strong>：<ul>
<li>Pod 定义中包含了 <code>finalizer</code>，但未能按预期完成清理操作。</li>
</ul>
</li>
<li><strong>网络或 API Server 问题</strong>：<ul>
<li>Kubernetes API Server 无法与节点通信，导致删除指令未能执行。</li>
</ul>
</li>
<li><strong>节点异常</strong>：<ul>
<li>Pod 所在的节点已不可用，但 Kubernetes 仍尝试与该节点交互。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="Kubernetes-垃圾回收机制"><a href="#Kubernetes-垃圾回收机制" class="headerlink" title="Kubernetes 垃圾回收机制"></a><strong>Kubernetes 垃圾回收机制</strong></h3><ol>
<li><strong>默认行为</strong>：<ul>
<li>Kubernetes 的垃圾回收机制会尝试清理处于 <code>Terminating</code> 状态的 Pod，但这依赖于集群的健康状态和 Pod 的配置。</li>
</ul>
</li>
<li><strong>Finalizer 的影响</strong>：<ul>
<li>如果 Pod 含有未完成的 <code>finalizer</code>，垃圾回收机制不会自动删除 Pod。</li>
</ul>
</li>
<li><strong>节点不可用的情况</strong>：<ul>
<li>如果节点长时间不可用，Kubernetes 会将节点标记为 <code>NotReady</code>，并最终删除相关 Pod，但需要依赖 <code>node-ttl</code> 等配置。</li>
</ul>
</li>
</ol>
<p>因此，如果 Pod 长时间处于 <code>Terminating</code> 状态且无人干预，它可能会一直保留在集群中，特别是当某些资源清理失败时。</p>
<hr>
<h3 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a><strong>排查思路</strong></h3><ol>
<li><p><strong>查看 Pod 的详细信息</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl describe pod &lt;pod-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>检查 Events</strong>：<ul>
<li>查看是否有与存储、容器终止或 Finalizer 相关的错误。</li>
</ul>
</li>
<li><strong>检查 Finalizer</strong>：<ul>
<li>Pod 的 <code>metadata.finalizers</code> 是否未被清理。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>检查 Pod 的容器状态</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pod &lt;pod-name&gt; -n &lt;namespace&gt; -o jsonpath=<span class="string">&#x27;&#123;.status.containerStatuses[*].state&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>确认容器是否已经终止。</li>
<li>如果容器未能正常终止，可能需要进一步排查容器运行时。</li>
</ul>
</li>
<li><p><strong>检查节点状态</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>
<ul>
<li>Pod 所在节点是否处于 <code>Ready</code> 状态。</li>
<li>如果节点不可用，Pod 的删除可能被阻塞。</li>
</ul>
</li>
<li><p><strong>检查存储状态</strong>：</p>
<ul>
<li>如果 Pod 使用了存储卷，检查卷是否被成功卸载：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pvc -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure></li>
<li>查看相关 PV 和存储系统的状态。</li>
</ul>
</li>
<li><p><strong>检查网络和 API Server</strong>：</p>
<ul>
<li>查看 API Server 和 kubelet 的日志，确认是否存在通信问题：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">journalctl -u kubelet</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>强制删除 Pod</strong>：<br>如果问题无法解决，可以强制删除 Pod，但要谨慎：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete pod &lt;pod-name&gt; -n &lt;namespace&gt; --force --grace-period=0</span><br></pre></td></tr></table></figure>
<ul>
<li>此操作会跳过 Finalizer 和清理过程。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a><strong>最佳实践</strong></h3><ol>
<li><strong>设置合理的终止行为</strong>：<ul>
<li>在 Pod 的 <code>spec</code> 中设置 <code>terminationGracePeriodSeconds</code>，确保容器有足够时间完成清理。</li>
</ul>
</li>
<li><strong>监控和告警</strong>：<ul>
<li>配置监控工具（如 Prometheus 和 Grafana）以检测长时间处于 <code>Terminating</code> 状态的 Pod。</li>
</ul>
</li>
<li><strong>避免 Finalizer 阻塞</strong>：<ul>
<li>确保使用的 Finalizer 能正常完成清理任务。</li>
</ul>
</li>
<li><strong>定期检查节点状态</strong>：<ul>
<li>确保节点健康，及时清理不可用的节点。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>k8s</category>
        <category>pod</category>
      </categories>
  </entry>
  <entry>
    <title>vim基础配置</title>
    <url>/2024/12/10/vim%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="编辑-vimrc"><a href="#编辑-vimrc" class="headerlink" title="编辑.vimrc"></a>编辑.vimrc</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; .vimrc  &lt;&lt; EOF</span><br><span class="line"></span><br><span class="line">set nocompatible          &quot; 禁用与 Vi 的兼容模式</span><br><span class="line">set encoding=utf-8        &quot; 设置编码为 UTF-8</span><br><span class="line">set fileencodings=utf-8,gbk,iso-2022-jp,euc-jp,latin1 &quot; 文件编码自动检测</span><br><span class="line">set ruler                 &quot; 显示光标位置</span><br><span class="line"></span><br><span class="line">&quot; 自适应窗口大小</span><br><span class="line">autocmd VimEnter * let &amp;columns=system(&#x27;tput cols&#x27;) | let &amp;lines=system(&#x27;tput lines&#x27;)</span><br><span class="line">set display=lastline</span><br><span class="line"></span><br><span class="line">&quot; 代码编辑</span><br><span class="line">syntax on                 &quot; 启用语法高亮</span><br><span class="line">set autochdir             &quot; 自动切换到当前文件的目录</span><br><span class="line">set wildmenu              &quot; 增强命令补全菜单</span><br><span class="line">set wildmode=list:longest &quot; 补全时显示所有匹配项</span><br><span class="line">set foldmethod=indent     &quot; 根据缩进自动折叠代码</span><br><span class="line">set foldlevel=99          &quot; 默认展开所有代码</span><br><span class="line">set completeopt=menu,menuone,noselect &quot; 优化补全菜单</span><br><span class="line"></span><br><span class="line">&quot; 文本缩进</span><br><span class="line">set tabstop=4             &quot; 设置 Tab 长度为 4 个空格</span><br><span class="line">set shiftwidth=4          &quot; 自动缩进宽度为 4</span><br><span class="line">set expandtab             &quot; 用空格代替 Tab</span><br><span class="line">set smartindent           &quot; 智能缩进</span><br><span class="line">set autoindent            &quot; 自动继承上一行的缩进</span><br><span class="line"></span><br><span class="line">&quot; 显示相关</span><br><span class="line">set wrap                  &quot; 自动换行</span><br><span class="line">set linebreak             &quot; 单词边界处换行</span><br><span class="line">set showbreak=⮡          &quot; 换行提示符</span><br><span class="line"></span><br><span class="line">&quot; 搜索相关</span><br><span class="line">set hlsearch              &quot; 搜索高亮</span><br><span class="line">set incsearch             &quot; 边输入边搜索</span><br><span class="line">set ignorecase            &quot; 搜索忽略大小写</span><br><span class="line">set smartcase             &quot; 如果搜索中包含大写字母，则区分大小写</span><br><span class="line">set wrapscan              &quot; 搜索到文件结尾后从头继续</span><br><span class="line"></span><br><span class="line">&quot; 快捷键映射</span><br><span class="line">nnoremap &lt;Space&gt; :nohlsearch&lt;CR&gt; &quot; 空格键清除搜索高亮</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>vscode调试配置</title>
    <url>/2024/11/20/vscode%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://vscode.js.cn/docs/remote/ssh</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="远程主机配置go版本"><a href="#远程主机配置go版本" class="headerlink" title="远程主机配置go版本"></a>远程主机配置go版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装gvm</span><br><span class="line">bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</span><br><span class="line"></span><br><span class="line">#安装go1.23,设置默认</span><br><span class="line">gvm install go1.23</span><br><span class="line">gvm use go1.23 --default</span><br><span class="line"></span><br><span class="line">#配置GOROOT、GOPATH变量，vscode配置需要，go env 查看</span><br><span class="line">.....</span><br><span class="line">GO111MODULE=&quot;auto&quot;</span><br><span class="line">GOPROXY=&quot;https://proxy.golang.org,direct&quot;</span><br><span class="line">GOROOT=&quot;/home/xxx/.gvm/gos/go1.23&quot;</span><br><span class="line">GOPATH=&quot;/home/xxx/.gvm/pkgsets/go1.23/global&quot;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<h2 id="扩展及工具"><a href="#扩展及工具" class="headerlink" title="扩展及工具"></a>扩展及工具</h2><ul>
<li>Remote - SSH</li>
<li>Go</li>
<li>go tools</li>
</ul>
<h2 id="根路径下配置文件"><a href="#根路径下配置文件" class="headerlink" title="根路径下配置文件"></a>根路径下配置文件</h2><ul>
<li>新建.vscode文件夹</li>
<li>文件 extension.json 、launch.json 、 settings.json</li>
</ul>
<h3 id="extension-jon"><a href="#extension-jon" class="headerlink" title="extension.jon"></a>extension.jon</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;recommendations&quot;: [</span><br><span class="line">        &quot;vivaldy22.go-auto-struct-tag&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="lanuch-json"><a href="#lanuch-json" class="headerlink" title="lanuch.json"></a>lanuch.json</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;informer&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;go&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;mode&quot;: &quot;test&quot;, //test 或者 debug</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/xxx/xxx_test.go&quot;,</span><br><span class="line">            // &quot;mode&quot;: &quot;debug&quot;, </span><br><span class="line">            // &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/xxx/main.go&quot;,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;/xxx&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="settings-json文件内容"><a href="#settings-json文件内容" class="headerlink" title="settings.json文件内容"></a>settings.json文件内容</h3><ul>
<li>注意GOROOT 、GOPATH与远程主机设置一致<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 界面主题选择、图标选择（需要安装插件： Material Icon Theme ）</span><br><span class="line">    &quot;workbench.colorTheme&quot;: &quot;GitHub Dark&quot;,</span><br><span class="line">    &quot;workbench.iconTheme&quot;: &quot;material-icon-theme&quot;,</span><br><span class="line">    // ---编辑面板字体大小</span><br><span class="line">    &quot;editor.fontSize&quot;: 14,</span><br><span class="line">    // ---丝滑打字配置</span><br><span class="line">    &quot;editor.smoothScrolling&quot;: true,</span><br><span class="line">    &quot;editor.cursorBlinking&quot;: &quot;expand&quot;,</span><br><span class="line">    &quot;editor.cursorSmoothCaretAnimation&quot;: &quot;on&quot;,</span><br><span class="line">    &quot;workbench.list.smoothScrolling&quot;: true,</span><br><span class="line">    // ---鼠标控制大小,使用鼠标的可以尝试</span><br><span class="line">    // &quot;editor.mouseWheelZoom&quot;: true,</span><br><span class="line">    // ---彩虹括号与作用域块线条提示</span><br><span class="line">    &quot;editor.guides.bracketPairs&quot;: true,</span><br><span class="line">    &quot;editor.bracketPairColorization.enabled&quot;: true,</span><br><span class="line">    // ---更加智能的代码提示</span><br><span class="line">    // 控制活动代码段是否阻止快速建议</span><br><span class="line">    &quot;editor.suggest.snippetsPreventQuickSuggestions&quot;: false,</span><br><span class="line">    // 除了 `Tab` 键以外， `Enter` 键是否同样可以接受建议</span><br><span class="line">    // 这能减少“插入新行”和“接受建议”命令之间的歧义</span><br><span class="line">    &quot;editor.acceptSuggestionOnEnter&quot;: &quot;smart&quot;,</span><br><span class="line">    // 代码补全列表中，优先选择最近的建议</span><br><span class="line">    &quot;editor.suggestSelection&quot;: &quot;recentlyUsedByPrefix&quot;,</span><br><span class="line">    // ---自动补全括号、引号</span><br><span class="line">    &quot;editor.autoClosingBrackets&quot;: &quot;beforeWhitespace&quot;,</span><br><span class="line">    &quot;editor.autoClosingDelete&quot;: &quot;always&quot;,</span><br><span class="line">    &quot;editor.autoClosingOvertype&quot;: &quot;always&quot;,</span><br><span class="line">    &quot;editor.autoClosingQuotes&quot;: &quot;beforeWhitespace&quot;,</span><br><span class="line">    // ---自动换行和行高</span><br><span class="line">    &quot;editor.wordWrap&quot;: &quot;on&quot;,</span><br><span class="line">    &quot;editor.lineHeight&quot;: 1.5,</span><br><span class="line">    // ---保存自动删除末尾空格</span><br><span class="line">    &quot;files.trimTrailingWhitespace&quot;: false,</span><br><span class="line">    // ---保存自动格式化代码</span><br><span class="line">    &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">    // ---双击选中被截断的字符</span><br><span class="line">    &quot;editor.wordSeparators&quot;: &quot;`~!@%^&amp;*()=+[&#123;]&#125;\\|;:&#x27;\&quot;,.&lt;&gt;/?（），。；：&quot;,</span><br><span class="line">    // ---折行缩进策略和关闭右侧代码地图</span><br><span class="line">    &quot;editor.minimap.enabled&quot;: false,</span><br><span class="line">    &quot;editor.foldingStrategy&quot;: &quot;indentation&quot;,</span><br><span class="line">    &quot;go.toolsEnvVars&quot;: &#123;</span><br><span class="line">        &quot;GOFLAGS&quot;: &quot;-mod=mod&quot;, // -mod=vendor</span><br><span class="line">        &quot;GO111MODULE&quot;: &quot;on&quot;,</span><br><span class="line">        &quot;GOPATH&quot;: &quot;/home/xxx/.gvm/pkgsets/go1.23.0/global&quot;,</span><br><span class="line">        &quot;GOROOT&quot;: &quot;/home/xxx/.gvm/gos/go1.23.0&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;go.gopath&quot;: &quot;/home/xxx/.gvm/pkgsets/go1.23.0/global&quot;,</span><br><span class="line">    &quot;go.goroot&quot;: &quot;/home/xxx/.gvm/gos/go1.23.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 指定模块根目录(kubernetes/sample-controller项目引出)</span><br><span class="line">将 &quot;program&quot; 设置为项目的根目录（&quot;$&#123;workspaceFolder&#125;&quot;），确保调试器加载完整的模块。</span><br><span class="line">•当 launch.json 中指定 &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;&quot; 时，调试器会将整个工作目录（即包含 go.mod 文件的项目根目录）作为编译和调试的上下文。</span><br><span class="line">•如果指定为某个文件（如 main.go），调试器会将范围限制在该文件中，而可能忽略与该文件同目录下的其他文件。</span><br><span class="line"></span><br><span class="line">2. 检查 go.mod 和模块配置</span><br><span class="line">确保 go.mod 中的依赖和模块路径正确，避免调试时出错。</span><br><span class="line"></span><br><span class="line">3. 保持文件组织一致性</span><br><span class="line">将同一逻辑单元的 .go 文件保存在同一目录，并声明相同的包名。</span><br><span class="line"></span><br><span class="line">tips:</span><br><span class="line">1、如果本地升级了vscode版本</span><br><span class="line">① 需要清理远程 .vscode-server 文件夹</span><br><span class="line">② 本地清理vscode扩展 ：rm -fr ~/.vscode/extensions</span><br><span class="line"></span><br><span class="line">2、如果重新配置了.vscode/settings.json里go版本：可删除go扩展重新安装</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>vscode配置tips</title>
    <url>/2024/09/27/vscode%E9%85%8D%E7%BD%AEtips/</url>
    <content><![CDATA[<h3 id="配置文件差异"><a href="#配置文件差异" class="headerlink" title="配置文件差异"></a>配置文件差异</h3><p>远程开发时切换go版本，影响go tools安装。注意配置settings.json里的go root、path路径</p>
<ol>
<li>.vscode-server&#x2F;data&#x2F;Machine&#x2F;settings.json</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">这个配置文件包含了 <span class="title class_">VSCode</span> 服务器的全局设置，这些设置会影响所有打开的工作区。</span><br><span class="line">它通常不由用户直接编辑，而是由 <span class="title class_">VSCode</span> 根据用户在 <span class="variable constant_">UI</span> 中的操作自动管理。</span><br><span class="line">这些设置包括了对所有工作区都有效的配置，比如插件的启用、禁用状态等。</span><br><span class="line"></span><br><span class="line">#远程开发机路径：~<span class="regexp">/.vscode-server/</span>data/<span class="title class_">Machine</span>/settings.<span class="property">json</span></span><br><span class="line"><span class="string">&quot;go.goroot&quot;</span>: <span class="string">&quot;~/.gvm/gos/go1.23.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;go.gopath&quot;</span>: <span class="string">&quot;~/.gvm/pkgsets/go1.23.0/global&quot;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>.vscode&#x2F;settings.json</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">这个文件是特定于项目的，只影响当前项目的配置。</span><br><span class="line">用户可以在这个文件中自定义设置，比如自定义任务、调试配置、文件关联等。</span><br><span class="line">这些设置在工作区打开时会被应用，并且会覆盖 .<span class="property">vscode</span>-server/data/<span class="title class_">Machine</span>/settings.<span class="property">json</span> 中的同名设置。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="mac下快捷命令"><a href="#mac下快捷命令" class="headerlink" title="mac下快捷命令"></a>mac下快捷命令</h3><ul>
<li>打开终端：ctrl + &#96;</li>
<li>跳到具体行：ctrl + g</li>
<li>打开所有配置面板：cmd + ,</li>
<li>显示命令行面板：cmd + shift + p</li>
</ul>
<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Remote - SSH</span><br><span class="line">Go</span><br><span class="line"></span><br><span class="line">vscode-icons</span><br><span class="line">GitHub Theme</span><br><span class="line">Dracula Theme Officia</span><br><span class="line"></span><br><span class="line">Better Comments</span><br><span class="line">Comment Translate : 1、配置翻译源 2、配置翻译目标语言 （cmd + shift + p : 输入translate）</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
  </entry>
  <entry>
    <title>xorm应用测试</title>
    <url>/2023/08/09/xorm-test/</url>
    <content><![CDATA[<h2 id="xorm包应用测试"><a href="#xorm包应用测试" class="headerlink" title="xorm包应用测试"></a>xorm包应用测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	_ &quot;github.com/go-sql-driver/mysql&quot;</span><br><span class="line">	&quot;log&quot;</span><br><span class="line">	&quot;xorm.io/xorm&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type XormTest struct &#123;</span><br><span class="line">	Id        int64  `json:&quot;id&quot; xorm:&quot;autoincr pk&quot;`     </span><br><span class="line">	Username  string `json:&quot;username&quot;`                  //用户名</span><br><span class="line">	CreatedAt string `json:&quot;created_at&quot; xorm:&quot;created&quot;` //创建时间</span><br><span class="line">	UpdatedAt string `json:&quot;updated_at&quot; xorm:&quot;updated&quot;` //更新时间</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var engine *xorm.Engine</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	//mysql -h localhost -uroot -p  -P 3306 --default-character-set=utf8 -A</span><br><span class="line">	var err error</span><br><span class="line">	engine, err = xorm.NewEngine(&quot;mysql&quot;, &quot;root:xxx@tcp(127.0.0.1:3306)/yago_test?charset=utf8&quot;)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	s, _ := engine.IsTableEmpty(&quot;xorm_test&quot;)</span><br><span class="line">	fmt.Println(s)</span><br><span class="line"></span><br><span class="line">	//查询</span><br><span class="line">	//selectElement(&quot;zhangsan&quot;)</span><br><span class="line">	//使用sql查询</span><br><span class="line">	queryElement()</span><br><span class="line">	//执行sql命令</span><br><span class="line">	updateBySql()</span><br><span class="line">	//插入</span><br><span class="line">	//insertElement()</span><br><span class="line">	//修改</span><br><span class="line">	//updateElement()</span><br><span class="line">	//删除</span><br><span class="line">	//deleteElement()</span><br><span class="line">	//事务</span><br><span class="line">	//transTest()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func updateBySql() &#123;</span><br><span class="line">	sql := &quot;update xorm_test set username=? where id=?&quot;</span><br><span class="line">	updateRes, err := engine.Exec(sql, &quot;wangwu&quot;, 9)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(&quot;RowNumber ==&gt; &quot;, updateRes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func queryElement() &#123;</span><br><span class="line">	sql := &quot;select * from xorm_test where id = 8;&quot;</span><br><span class="line">	results, _ := engine.QueryString(sql)</span><br><span class="line">	fmt.Println(results)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func updateElement() &#123;</span><br><span class="line">	user := XormTest&#123;</span><br><span class="line">		Username: &quot;jpshi&quot;,</span><br><span class="line">	&#125;</span><br><span class="line">	if _, err := engine.Where(&quot;username = &#x27;wangwu&#x27;&quot;).Update(&amp;user); err != nil &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func deleteElement() &#123;</span><br><span class="line">	rowNumber, err := engine.ID(2).Delete(new(XormTest))</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(&quot;RowNumber ==&gt; &quot;, rowNumber)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func transTest() &#123;</span><br><span class="line">	session := engine.NewSession()</span><br><span class="line">	defer session.Close()</span><br><span class="line">	// 开启事务</span><br><span class="line">	if err := session.Begin(); err != nil &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	// 插入User</span><br><span class="line">	if _, err := session.Insert(XormTest&#123;</span><br><span class="line">		Username: &quot;zhangsan&quot;,</span><br><span class="line">	&#125;); err != nil &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	// 更新User</span><br><span class="line">	if _, err := session.Where(&quot;id = &#x27;7&#x27;&quot;).Update(XormTest&#123;</span><br><span class="line">		Username: &quot;lisi&quot;,</span><br><span class="line">	&#125;); err != nil &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	// 提交事务</span><br><span class="line">	session.Commit()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func insertElement() () &#123;</span><br><span class="line">	user := XormTest&#123;</span><br><span class="line">		Username: &quot;^_^&quot;,</span><br><span class="line">	&#125;</span><br><span class="line">	rowNumber, err := engine.Insert(&amp;user) // rowNumber 受影响的行数</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(&quot;RowNumber ==&gt; &quot;, rowNumber)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func selectElement(name string)  &#123;</span><br><span class="line">	users := make([]*XormTest, 0)</span><br><span class="line">	err := engine.Where(&quot;username regexp ? &quot;,name).Find(&amp;users)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	for _, v := range users &#123;</span><br><span class="line">		fmt.Printf(&quot;%v\n&quot;, v)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>yq</title>
    <url>/2024/11/18/yq/</url>
    <content><![CDATA[<h2 id="yq"><a href="#yq" class="headerlink" title="yq"></a>yq</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文档：https://github.com/mikefarah/yq/releases</span></span><br><span class="line">wget https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar vxf yq_linux_amd64.tar.gz ./</span><br><span class="line"><span class="built_in">mv</span> ./yq_linux_amd64 /usr/local/bin/yq</span><br><span class="line"></span><br><span class="line"><span class="comment">#k8s使用yq导出较为整洁的导出yaml</span></span><br><span class="line">kubectl get deployment &lt;deployment&gt; -n &lt;namespace&gt; -o yaml --ignore-not-found | \</span><br><span class="line">yq <span class="string">&#x27;del(.metadata.annotations, .metadata.creationTimestamp, .metadata.generation, .metadata.resourceVersion, .metadata.uid, .status, .spec.template.metadata.creationTimestamp)&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>使用github镜像加速安装pyenv</title>
    <url>/2024/08/22/%E4%BD%BF%E7%94%A8github%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%AE%89%E8%A3%85pyenv/</url>
    <content><![CDATA[<h1 id="使用github镜像加速安装pyenv"><a href="#使用github镜像加速安装pyenv" class="headerlink" title="使用github镜像加速安装pyenv"></a>使用github镜像加速安装pyenv</h1><h2 id="安装pyenv脚本"><a href="#安装pyenv脚本" class="headerlink" title="安装pyenv脚本"></a>安装pyenv脚本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line">[ -n &quot;$PYENV_DEBUG&quot; ] &amp;&amp; set -x</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$PYENV_ROOT&quot; ]; then</span><br><span class="line">  export PYENV_ROOT=&quot;$&#123;HOME&#125;/.pyenv&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">colorize() &#123;</span><br><span class="line">  if [ -t 1 ]; then printf &quot;\e[%sm%s\e[m&quot; &quot;$1&quot; &quot;$2&quot;</span><br><span class="line">  else echo -n &quot;$2&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Checks for `.pyenv` file, and suggests to remove it for installing</span><br><span class="line">if [ -d &quot;$&#123;PYENV_ROOT&#125;&quot; ]; then</span><br><span class="line">  &#123; echo</span><br><span class="line">    colorize 1 &quot;WARNING&quot;</span><br><span class="line">    echo &quot;: Can not proceed with installation. Kindly remove the &#x27;$&#123;PYENV_ROOT&#125;&#x27; directory first.&quot;</span><br><span class="line">    echo</span><br><span class="line">  &#125; &gt;&amp;2</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">failed_checkout() &#123;</span><br><span class="line">  echo &quot;Failed to git clone $1&quot;</span><br><span class="line">  exit -1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkout() &#123;</span><br><span class="line">  [ -d &quot;$2&quot; ] || git -c advice.detachedHead=0 clone --branch &quot;$3&quot; --depth 1 &quot;$1&quot; &quot;$2&quot; || failed_checkout &quot;$1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ! command -v git 1&gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">  echo &quot;pyenv: Git is not installed, can&#x27;t continue.&quot; &gt;&amp;2</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$&#123;USE_GIT_URI&#125;&quot; ]; then</span><br><span class="line">  GITHUB=&quot;git://github.com&quot;</span><br><span class="line">else</span><br><span class="line">  GITHUB=&quot;https://kkgithub.com&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">checkout &quot;$&#123;GITHUB&#125;/pyenv/pyenv.git&quot;            &quot;$&#123;PYENV_ROOT&#125;&quot;                           &quot;$&#123;PYENV_GIT_TAG:-master&#125;&quot;</span><br><span class="line">checkout &quot;$&#123;GITHUB&#125;/pyenv/pyenv-doctor.git&quot;     &quot;$&#123;PYENV_ROOT&#125;/plugins/pyenv-doctor&quot;      &quot;master&quot;</span><br><span class="line">checkout &quot;$&#123;GITHUB&#125;/pyenv/pyenv-installer.git&quot;  &quot;$&#123;PYENV_ROOT&#125;/plugins/pyenv-installer&quot;   &quot;master&quot;</span><br><span class="line">checkout &quot;$&#123;GITHUB&#125;/pyenv/pyenv-update.git&quot;     &quot;$&#123;PYENV_ROOT&#125;/plugins/pyenv-update&quot;      &quot;master&quot;</span><br><span class="line">checkout &quot;$&#123;GITHUB&#125;/pyenv/pyenv-virtualenv.git&quot; &quot;$&#123;PYENV_ROOT&#125;/plugins/pyenv-virtualenv&quot;  &quot;master&quot;</span><br><span class="line">checkout &quot;$&#123;GITHUB&#125;/pyenv/pyenv-which-ext.git&quot;  &quot;$&#123;PYENV_ROOT&#125;/plugins/pyenv-which-ext&quot;   &quot;master&quot;</span><br><span class="line"></span><br><span class="line">if ! command -v pyenv 1&gt;/dev/null; then</span><br><span class="line">  &#123; echo</span><br><span class="line">    colorize 1 &quot;WARNING&quot;</span><br><span class="line">    echo &quot;: seems you still have not added &#x27;pyenv&#x27; to the load path.&quot;</span><br><span class="line">    echo</span><br><span class="line">  &#125; &gt;&amp;2</span><br><span class="line"></span><br><span class="line">  &#123; # Without args, `init` commands print installation help</span><br><span class="line">    &quot;$&#123;PYENV_ROOT&#125;/bin/pyenv&quot; init || true</span><br><span class="line">    &quot;$&#123;PYENV_ROOT&#125;/bin/pyenv&quot; virtualenv-init || true</span><br><span class="line">  &#125; &gt;&amp;2</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><ul>
<li>vim .bash_profile<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PYENV_ROOT=&quot;$HOME/.pyenv&quot;</span><br><span class="line">command -v pyenv &gt;/dev/null || export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;</span><br><span class="line">eval &quot;$(pyenv init -)&quot;</span><br></pre></td></tr></table></figure></li>
<li>source .bash_profile</li>
</ul>
<h2 id="安装tips"><a href="#安装tips" class="headerlink" title="安装tips"></a>安装tips</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#方式一：因为pyenv会自动到github上下载，速度超慢，因此推荐第二种方式</span><br><span class="line">$ pyenv install 3.12.2 -v  #-v 以日志模式显示安装过程</span><br><span class="line"></span><br><span class="line">#方式二：使用curl或者wget下载到~/.pyenv/cache下，然后再用pyenv安装。软件源可以用自己熟悉的镜像源</span><br><span class="line">$ cd ~/.pyenv</span><br><span class="line">$ sudo mkdir cache</span><br><span class="line">$ sudo wget -c https://mirrors.huaweicloud.com/python/3.12.2/Python-3.12.2.tar.xz -P  ~/.pyenv/cache/</span><br><span class="line">$ pyenv install 3.12.2 -v</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看所有可用的Python版本</span><br><span class="line">pyenv install --list</span><br><span class="line"></span><br><span class="line">#列出本地可用的Python版本</span><br><span class="line">pyenv versions</span><br><span class="line"></span><br><span class="line">#生效范围不同，当前shell可用</span><br><span class="line">pyenv shell 3.12.2</span><br><span class="line">#当前目录</span><br><span class="line">pyenv local 3.12.2</span><br><span class="line">#全局</span><br><span class="line">pyenv global 3.12.2</span><br><span class="line"></span><br><span class="line">#查看当前Python版本</span><br><span class="line">python --version</span><br><span class="line"></span><br><span class="line">#删除指定Python版本</span><br><span class="line">pyenv uninstall 3.12.2</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>删除Terminatin状态的命名空间</title>
    <url>/2024/12/04/%E5%88%A0%E9%99%A4Terminatin%E7%8A%B6%E6%80%81%E7%9A%84%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<p>命名空间一直处于Terminating问题分析</p>
<pre><code>•	报错 Error from server (MethodNotAllowed) 表示某些资源类型的操作（如 GET 或 DELETE）在命名空间中不被支持，可能是某些残留的自定义资源（CRD）或特殊系统资源导致。
•	部分资源仍存在于命名空间中，但 Kubernetes 无法正确清理，命名空间因而停留在 Terminating 状态。
</code></pre>
<p>解决方案</p>
<p>方法 1：逐步清理残留资源</p>
<pre><code>1.	列出命名空间中的资源：
</code></pre>
<p>使用以下命令列出所有可能影响命名空间删除的资源：</p>
<p>kubectl api-resources –namespaced&#x3D;true -o name | xargs -n 1 kubectl -n jpshi-ca-test get –ignore-not-found</p>
<p>如果某些资源显示报错（如 MethodNotAllowed），需要针对这些资源进一步操作。</p>
<pre><code>2.	强制删除特定资源：
</code></pre>
<p>对于残留资源，可以手动清理：</p>
<p>kubectl delete <resource-type> <resource-name> -n jpshi-ca-test –force –grace-period&#x3D;0</p>
<p>如果资源类型无法直接删除，可能需要查看其定义并移除 finalizers。</p>
<pre><code>3.	编辑特定资源的 Finalizers：
</code></pre>
<p>kubectl edit <resource-type> <resource-name> -n jpshi-ca-test</p>
<p>在资源定义中删除类似以下内容：</p>
<p>metadata:<br>  finalizers:</p>
<ul>
<li>example.finalizer.kubernetes.io</li>
</ul>
<p>方法 2：强制移除命名空间 Finalizers</p>
<p>命名空间未删除的核心问题通常是 finalizers 阻止删除。以下命令会直接移除命名空间的 finalizers，强制删除：<br>    1.	编辑命名空间：</p>
<p>kubectl edit namespace jpshi-ca-test</p>
<p>删除以下字段：</p>
<p>spec:<br>  finalizers:</p>
<ul>
<li><p>kubernetes</p>
<ol start="2">
<li>   或通过命令强制移除 Finalizers：</li>
</ol>
</li>
</ul>
<p>kubectl patch namespace jpshi-ca-test -p ‘{“metadata”:{“finalizers”:[]}}’ –type&#x3D;merge</p>
<p>方法 3：彻底清理命名空间及其关联资源</p>
<pre><code>1.	使用 kubectl proxy 调试：
</code></pre>
<p>通过 Kubernetes API 调用直接操作命名空间：</p>
<p>curl -k -H “Content-Type: application&#x2F;json” -X PUT <br>–data ‘{“metadata”:{“finalizers”:[]}}’ <br><a href="http://localhost:8001/api/v1/namespaces/jpshi-ca-test/finalize">http://localhost:8001/api/v1/namespaces/jpshi-ca-test/finalize</a></p>
<pre><code>2.	删除命名空间及其资源：
</code></pre>
<p>如果仍无法删除，可以使用以下命令强制清理：</p>
<p>kubectl delete namespace jpshi-ca-test –force –grace-period&#x3D;0</p>
<p>方法 4：排查 CRD 资源问题</p>
<p>如果命名空间中涉及 CRD（CustomResourceDefinitions），需要特别检查这些资源类型是否存在问题。<br>    1.	列出所有 CRD 实例：</p>
<p>kubectl get crd</p>
<pre><code>2.	删除与命名空间相关的 CRD 实例：
</code></pre>
<p>kubectl delete <crd-name> -n jpshi-ca-test –force –grace-period&#x3D;0</p>
<pre><code>3.	检查并清理 CRD Finalizers：
</code></pre>
<p>kubectl patch <crd-name> -n jpshi-ca-test -p ‘{“metadata”:{“finalizers”:[]}}’ –type&#x3D;merge</p>
<p>验证命名空间删除</p>
<p>删除命名空间后，确认其状态：</p>
<p>kubectl get namespaces</p>
<p>注意事项</p>
<pre><code>•	强制删除命名空间可能会导致资源不一致或孤立资源，请谨慎操作。
•	如果问题持续未解决，可能需要检查 Kubernetes API Server 或 Controller Manager 的日志进行深入排查。
</code></pre>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>各层网络探测工具</title>
    <url>/2024/12/08/%E5%90%84%E5%B1%82%E7%BD%91%E7%BB%9C%E6%8E%A2%E6%B5%8B%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>探测网络连通性的方法和工具可以分为不同网络层次（OSI 模型）来讨论，涵盖从物理层到应用层的探测工具及其用途。以下是具体分类及工具：</p>
<ol>
<li>物理层 (Layer 1)</li>
</ol>
<p>主要检测物理连接是否正常。</p>
<p>工具与方法：<br>    •	电缆测试仪<br>    •	用于检查网线、光纤的连接和质量问题。<br>    •	网络接口卡 (NIC) 指示灯<br>    •	查看网卡指示灯是否正常闪烁。<br>    •	信号检测工具<br>    •	测试信号强度和干扰（如 Wi-Fi 信号分析仪）。</p>
<ol start="2">
<li>数据链路层 (Layer 2)</li>
</ol>
<p>检测交换机、MAC 地址、VLAN 配置问题。</p>
<p>工具与方法：<br>    •	ARP (Address Resolution Protocol)<br>    •	通过发送 ARP 请求检查目标主机是否在线。</p>
<p>arp -a</p>
<pre><code>•	Ethernet Sniffing (如 Wireshark)
•	捕获数据链路层帧，分析网络广播、交换机转发问题。
</code></pre>
<ol start="3">
<li>网络层 (Layer 3)</li>
</ol>
<p>主要用于检查 IP 地址是否可达。</p>
<p>工具与方法：<br>    •	ping<br>    •	发送 ICMP 回显请求，检测目标是否可达、往返时间及丢包情况。</p>
<p>ping &lt;目标IP&gt;</p>
<pre><code>•	traceroute / tracert
•	路径跟踪工具，显示从源到目标的每一跳。
</code></pre>
<p>traceroute &lt;目标IP&gt; (Linux)<br>tracert &lt;目标IP&gt; (Windows)</p>
<pre><code>•	mtr (My Traceroute)
•	结合 ping 和 traceroute 的功能，动态显示网络路径质量。
</code></pre>
<p>mtr &lt;目标IP&gt;</p>
<pre><code>•	iputils-tools
•	例如 ip link 和 ip addr 命令，用于检查网络接口和 IP 配置。
</code></pre>
<ol start="4">
<li>传输层 (Layer 4)</li>
</ol>
<p>检测端口和连接的状态。</p>
<p>工具与方法：<br>    •	tcping<br>    •	使用 TCP 连接检测目标主机的指定端口是否开放。</p>
<p>tcping &lt;目标IP&gt; &lt;端口&gt;</p>
<pre><code>•	telnet
•	连接到目标主机指定端口，检查服务是否响应。
</code></pre>
<p>telnet &lt;目标IP&gt; &lt;端口&gt;</p>
<pre><code>•	nc (Netcat)
•	多功能网络工具，可用于测试端口可达性和数据传输。
</code></pre>
<p>nc -zv &lt;目标IP&gt; &lt;端口&gt;</p>
<pre><code>•	ss / netstat
•	查看当前主机的端口状态和连接情况。
</code></pre>
<p>ss -tuln</p>
<ol start="5">
<li>应用层 (Layer 7)</li>
</ol>
<p>检测具体应用服务是否正常。</p>
<p>工具与方法：<br>    •	curl &#x2F; wget<br>    •	访问 HTTP&#x2F;HTTPS 服务，测试 Web 服务可用性。</p>
<p>curl -I http:&#x2F;&#x2F;&lt;目标地址&gt;</p>
<pre><code>•	httping
•	类似于 ping，但针对 HTTP/HTTPS 服务。
</code></pre>
<p>httping -h &lt;目标地址&gt;</p>
<pre><code>•	dig / nslookup
•	测试 DNS 解析是否正常。
</code></pre>
<p>dig &lt;域名&gt;<br>nslookup &lt;域名&gt;</p>
<pre><code>•	OpenSSL
•	测试 SSL/TLS 连接。
</code></pre>
<p>openssl s_client -connect &lt;目标IP&gt;:443</p>
<p>综合网络探测工具<br>    •	Wireshark<br>    •	捕获并分析各层流量，深入排查问题。<br>    •	Nmap<br>    •	网络扫描器，用于检测主机存活状态、端口开放情况及服务版本。</p>
<p>nmap -sP &lt;子网&gt;</p>
<pre><code>•	Zabbix / Nagios
•	网络监控系统，长期监测网络连接和服务状态。
</code></pre>
<p>选择合适的工具<br>    •	快速测试：ping、tcping、curl<br>    •	路由问题：traceroute、mtr<br>    •	端口问题：telnet、nc、nmap<br>    •	协议深入分析：Wireshark、OpenSSL<br>    •	服务监控：Zabbix、Nagios</p>
]]></content>
      <categories>
        <category>network</category>
      </categories>
  </entry>
  <entry>
    <title>学习方式</title>
    <url>/2024/11/13/%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="Bloom’s-Taxonomy"><a href="#Bloom’s-Taxonomy" class="headerlink" title="Bloom’s Taxonomy"></a>Bloom’s Taxonomy</h2><ul>
<li>1956 年布鲁姆分类法将知识分为六大类：知识、理解、应用、分析、综合和评价。</li>
<li>2001 年，一群认知心理学家、课程理论家、教学研究者和测试专家将布鲁姆分类法的类别名称从名词改为动词。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/shispring/picgo/master/Bloom's-Taxonomy.jpeg" alt="Bloom-pic1"><br><img src="https://raw.githubusercontent.com/shispring/picgo/master/17361731479986_.pic.jpg" alt="Bloom-pic2"><br><img src="https://raw.githubusercontent.com/shispring/picgo/master/17321731479764_.pic.jpg" alt="Bloom-pic3"></p>
<hr>
<table aria-describedby="chart-description">
<thead>
<tr><th id="Remembering">Remembering</th><th id="Understanding">Understanding</th><th id="Applying">Applying</th><th id="Analyzing">Analyzing</th><th id="Evaluating">Evaluating</th><th id="Creating">Creating</th></tr>
</thead>
<tbody>
<tr>
<td headers="Remembering">Recall specific facts.</td>
<td headers="Understanding">Grasp meaning of materials.</td>
<td headers="Applying">Use information in a new situation.&nbsp;</td>
<td headers="Analyzing">Identify schemas or relationships.&nbsp;</td>
<td headers="Evaluating">Use information to make judgments.&nbsp;</td>
<td headers="Creating">Create or develop something new.&nbsp;</td>
</tr>
<tr>
<td headers="Remembering">
<p>define<br>
describe<br>
examine<br>
identify<br>
label<br>
list<br>
locate<br>
match<br>
memorize<br>
recall<br>
recite<br>
recognize<br>
record<br>
reproduce<br>
retell<br>
select<br>
state<br>
tabulate<br>
tell<br>
visualize<br></p>
</td>
<td headers="Understanding">
<p>associate<br>
classify<br>
compare<br>
contrast<br>
convert<br>
describe<br>
discuss<br>
distinguish<br>
explain<br>
illustrate<br>
interpret<br>
order<br>
predict<br>
relate<br>
report<br>
represent<br>
restate<br>
select<br>
summarize<br>
trace<br>
transform<br>
translate<br></p>
</td>
<td headers="Applying">
<p>apply<br>
articulate<br>
calculate<br>
change<br>
chart<br>
compute<br>
construct<br>
develop<br>
employ<br>
examine<br>
experiment<br>
explain<br>
illustrate<br>
interpret<br>
manipulate<br>
modify<br>
operate<br>
predict<br>
produce<br>
relate<br>
solve<br>
transfer<br></p>
</td>
<td headers="Analyzing">
<p>analyze<br>
categorize<br>
compare<br>
connect<br>
contrast<br>
criticize<br>
deduce<br>
diagram<br>
differentiate<br>
discriminate<br>
dissect<br>
estimate<br>
evaluate<br>
experiment<br>
infer<br>
organize<br>
plan<br>
prioritize<br>
question<br>
separate<br>
survey<br>
test</p></td>
<td headers="Evaluating">
appraise<br>
argue<br>
assess<br>
choose<br>
convince<br>
critique<br>
debate<br>
defend<br>
editorialize<br>
estimate<br>
evaluate<br>
grade<br>
judge<br>
justify<br>
measure<br>
persuade<br>
predict<br>
rank<br>
rate<br>
reframe<br>
summarize<br>
support<br><p></p>
</td>
<td headers="Creating">
<p>adapt<br>
assemble<br>
compose<br>
construct<br>
create<br>
design<br>
develop<br>
facilitate<br>
hypothesize<br>
integrate<br>
invent<br>
modify<br>
negotiate<br>
plan<br>
propose<br>
revise<br>
role-play<br>
schematize<br>
simulate<br>
speculate<br>
support<br>
validate</p>
</td>
</tr>
</tbody>
</table>


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://citt.ufl.edu/resources/the-learning-process/designing-the-learning-experience/blooms-taxonomy">https://citt.ufl.edu/resources/the-learning-process/designing-the-learning-experience/blooms-taxonomy</a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>有意思的docker镜像服务</title>
    <url>/2024/12/19/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84docker%E9%95%9C%E5%83%8F%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="markdown-server服务"><a href="#markdown-server服务" class="headerlink" title="markdown server服务"></a>markdown server服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -d --name markdown-server -p 3000:3000 -v /root/markdown:/docs  dannyben/madness </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
  </entry>
  <entry>
    <title>火焰图</title>
    <url>/2024/11/04/%E7%81%AB%E7%84%B0%E5%9B%BE/</url>
    <content><![CDATA[<p>在 Linux 系统上可以通过 <code>perf</code> 工具结合 <code>FlameGraph</code> 进行程序性能分析，特别适用于 CPU 密集型应用。</p>
<h3 id="1-准备工具"><a href="#1-准备工具" class="headerlink" title="1. 准备工具"></a>1. 准备工具</h3><p>首先，确保系统安装了 <code>perf</code> 和 <code>FlameGraph</code>：</p>
<h3 id="安装-perf"><a href="#安装-perf" class="headerlink" title="安装 perf"></a>安装 <code>perf</code></h3><p>对于大多数 Linux 发行版，可以通过包管理器安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过系统包管理器安装 Perl 核心模块：</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y perf  perf-core </span><br></pre></td></tr></table></figure>

<h3 id="获取-FlameGraph"><a href="#获取-FlameGraph" class="headerlink" title="获取 FlameGraph"></a>获取 <code>FlameGraph</code></h3><p><code>FlameGraph</code> 是一个工具集，可以从 GitHub 上克隆：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/brendangregg/FlameGraph.git</span><br></pre></td></tr></table></figure>

<p>下载完成后，进入 <code>FlameGraph</code> 目录，确保其中有 <code>stackcollapse-perf.pl</code> 和 <code>flamegraph.pl</code> 等脚本。</p>
<h3 id="2-使用-perf-收集性能数据"><a href="#2-使用-perf-收集性能数据" class="headerlink" title="2. 使用 perf 收集性能数据"></a>2. 使用 <code>perf</code> 收集性能数据</h3><p>假设你想要分析一个进程的 CPU 使用情况。可以先使用 <code>top</code> 或 <code>htop</code> 来获取目标进程的 PID。</p>
<h3 id="记录目标进程的性能数据"><a href="#记录目标进程的性能数据" class="headerlink" title="记录目标进程的性能数据"></a>记录目标进程的性能数据</h3><p>假设 PID 为 <code>1234</code>，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> perf record -F 99 -p 1234 -g -- <span class="built_in">sleep</span> 30</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><code>F 99</code>：每秒采样 99 次，可根据需要调整采样频率。</li>
<li><code>p 1234</code>：指定要分析的进程 PID。</li>
<li><code>g</code>：记录调用栈信息。</li>
<li><code>- sleep 30</code>：采样时间为 30 秒。</li>
</ul>
<p>采样完成后会生成一个 <code>perf.data</code> 文件，包含采样数据。</p>
<h3 id="3-处理-perf-数据"><a href="#3-处理-perf-数据" class="headerlink" title="3. 处理 perf 数据"></a>3. 处理 <code>perf</code> 数据</h3><p>将 <code>perf.data</code> 转换为 FlameGraph 可以使用的堆栈信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> perf script &gt; out.perf</span><br></pre></td></tr></table></figure>

<p>这会将 <code>perf.data</code> 文件解析成 <code>out.perf</code>，便于生成火焰图。</p>
<h3 id="4-生成火焰图"><a href="#4-生成火焰图" class="headerlink" title="4. 生成火焰图"></a>4. 生成火焰图</h3><p>在 <code>FlameGraph</code> 目录下运行以下命令：</p>
<h3 id="折叠堆栈信息"><a href="#折叠堆栈信息" class="headerlink" title="折叠堆栈信息"></a>折叠堆栈信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./stackcollapse-perf.pl out.perf &gt; out.folded</span><br></pre></td></tr></table></figure>

<h3 id="生成火焰图"><a href="#生成火焰图" class="headerlink" title="生成火焰图"></a>生成火焰图</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./flamegraph.pl out.folded &gt; flamegraph.svg</span><br></pre></td></tr></table></figure>

<p>生成的 <code>flamegraph.svg</code> 文件是一个交互式火焰图，可以通过浏览器打开查看。</p>
<h3 id="5-分析火焰图"><a href="#5-分析火焰图" class="headerlink" title="5. 分析火焰图"></a>5. 分析火焰图</h3><p>火焰图中各个块的宽度表示 CPU 使用时间，占用时间越多，宽度越大。图层深度表示调用堆栈的深度。可以查看性能热点并根据需要进行优化。</p>
<h3 id="总结的命令流程"><a href="#总结的命令流程" class="headerlink" title="总结的命令流程"></a>总结的命令流程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> perf record -F 99 -p 1234 -g -- <span class="built_in">sleep</span> 30</span><br><span class="line"><span class="built_in">sudo</span> perf script &gt; out.perf</span><br><span class="line">./stackcollapse-perf.pl out.perf &gt; out.folded</span><br><span class="line">./flamegraph.pl out.folded &gt; flamegraph.svg</span><br></pre></td></tr></table></figure>

<p>通过上述步骤，你可以生成并查看程序的 CPU 性能火焰图，为性能瓶颈定位和优化提供参考。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>负载均衡</title>
    <url>/2024/11/18/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/shispring/picgo/master/lvs.svg" alt="lvs"></p>
]]></content>
  </entry>
  <entry>
    <title>龙蜥安装docker</title>
    <url>/2024/09/27/%E9%BE%99%E8%9C%A5%E5%AE%89%E8%A3%85docker/</url>
    <content><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用root用户</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可以安装的版本</span></span><br><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line"></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动docker</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="配置docker镜像源"><a href="#配置docker镜像源" class="headerlink" title="配置docker镜像源"></a>配置docker镜像源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置docker镜像源</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/docker  </span><br><span class="line"><span class="comment">#创建添加/更新 daemon.josn文件</span></span><br><span class="line"><span class="built_in">touch</span> /etc/docker/daemon.json            </span><br><span class="line"><span class="comment">#更换腾讯镜像源                         </span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /etc/docker/daemon.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">	&quot;https://dockerproxy.com&quot;,</span></span><br><span class="line"><span class="string">        &quot;https://fw92oidw.mirror.aliyuncs.com&quot;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#由于更新了daemon.json文件 需要重新加载daemon.json</span></span><br><span class="line">systemctl daemon-reload   </span><br><span class="line"><span class="comment">#重新启动docker</span></span><br><span class="line">systemctl restart docker  </span><br><span class="line"><span class="comment">#查看docker运行状态</span></span><br><span class="line">docker info  </span><br></pre></td></tr></table></figure>

<h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装Docker-compose</span><br><span class="line">Docker-compose 要求docker的内核版本高于所对应的docker最低版本 。</span><br><span class="line">1.查看当前docker的内核版本</span><br><span class="line">docker version</span><br><span class="line">2.进入docker-compose的github官方release页面</span><br><span class="line">https://github.com/docker/compose/releases</span><br><span class="line">3.下载docker-compose-Linux-x86_64</span><br><span class="line">wget https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-linux-x86_64</span><br><span class="line">4.上传并移动到到 /usr/local/bin 目录下，然后重命名为 docker-compose</span><br><span class="line">mv docker-compose-linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">5.赋予 docker-compose 文件root权限</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">6.查看 docker-compose 版本</span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>rsync用法小记</title>
    <url>/2024/12/25/rsync%E7%94%A8%E6%B3%95%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="rsync-命令的参数含义"><a href="#rsync-命令的参数含义" class="headerlink" title="rsync 命令的参数含义"></a><strong>rsync 命令的参数含义</strong></h3><p>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -avzP -e <span class="string">&#x27;ssh -p2222&#x27;</span> test.tar.gz root@192.168.1.100:/data</span><br></pre></td></tr></table></figure>

<h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a><strong>参数解释</strong></h4><ol>
<li><p><strong><code>-a</code> (archive mode)</strong>  </p>
<ul>
<li>归档模式，表示递归同步目录并保留文件属性（如权限、时间戳、符号链接等）。  </li>
<li>常用于完整备份。</li>
</ul>
</li>
<li><p><strong><code>-v</code> (verbose)</strong>  </p>
<ul>
<li>显示详细信息，输出同步过程中的文件名和进度。</li>
</ul>
</li>
<li><p><strong><code>-z</code> (compress)</strong>  </p>
<ul>
<li>启用压缩，在传输过程中压缩数据以减少带宽使用。</li>
</ul>
</li>
<li><p><strong><code>-P</code> (progress + partial)</strong>  </p>
<ul>
<li>显示传输进度条（<code>--progress</code>）。</li>
<li>保留部分传输的文件（<code>--partial</code>），如果传输中断，可以继续。</li>
</ul>
</li>
<li><p><strong><code>-e &#39;ssh -p2222&#39;</code></strong>  </p>
<ul>
<li>指定使用 <code>ssh</code> 作为远程传输协议，并通过 <code>-p2222</code> 指定 SSH 使用的端口号为 <code>2222</code>。</li>
</ul>
</li>
<li><p><strong><code>test.tar.gz</code></strong>  </p>
<ul>
<li>要同步的源文件。</li>
</ul>
</li>
<li><p><strong><code>root@192.169.1.100:/data</code></strong>  </p>
<ul>
<li>目标地址：<ul>
<li><code>root</code> 是远程服务器的用户名。</li>
<li><code>1.95.89.84</code> 是远程服务器的 IP 地址。</li>
<li><code>/data</code> 是目标路径，表示文件将被传输到该目录。</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="常用-rsync-命令参数总结"><a href="#常用-rsync-命令参数总结" class="headerlink" title="常用 rsync 命令参数总结"></a><strong>常用 rsync 命令参数总结</strong></h3><h4 id="基础功能"><a href="#基础功能" class="headerlink" title="基础功能"></a><strong>基础功能</strong></h4><ul>
<li><strong><code>-a</code></strong>: 归档模式（保留权限、时间戳、符号链接等）。</li>
<li><strong><code>-r</code></strong>: 递归复制子目录（仅递归，不保留属性）。</li>
<li><strong><code>-v</code></strong>: 显示详细信息。</li>
<li><strong><code>-z</code></strong>: 压缩传输。</li>
<li><strong><code>-P</code></strong>: 显示进度条并支持断点续传。</li>
</ul>
<h4 id="进阶选项"><a href="#进阶选项" class="headerlink" title="进阶选项"></a><strong>进阶选项</strong></h4><ul>
<li><strong><code>--delete</code></strong>: 在目标中删除源中不存在的文件，保持两端一致。</li>
<li><strong><code>--exclude=PATTERN</code></strong>: 排除匹配指定模式的文件或目录。</li>
<li><strong><code>--include=PATTERN</code></strong>: 包括匹配指定模式的文件或目录。</li>
<li><strong><code>--progress</code></strong>: 显示详细的传输进度信息。</li>
<li><strong><code>--partial</code></strong>: 断点续传，保留部分传输的文件。</li>
<li><strong><code>--bwlimit=RATE</code></strong>: 限制带宽（以 KB&#x2F;s 为单位）。</li>
</ul>
<h4 id="远程传输"><a href="#远程传输" class="headerlink" title="远程传输"></a><strong>远程传输</strong></h4><ul>
<li><strong><code>-e ssh</code></strong>: 指定使用 SSH 作为传输协议。</li>
<li><strong><code>-e &#39;ssh -pPORT&#39;</code></strong>: 使用特定的 SSH 端口。</li>
<li><strong><code>--rsync-path=PATH</code></strong>: 指定远程服务器上的 rsync 路径。</li>
</ul>
<h4 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a><strong>同步模式</strong></h4><ul>
<li><strong>本地到本地</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -av /src/dir /dest/dir</span><br></pre></td></tr></table></figure></li>
<li><strong>本地到远程</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -av /src/dir user@remote:/dest/dir</span><br></pre></td></tr></table></figure></li>
<li><strong>远程到本地</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -av user@remote:/src/dir /dest/dir</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h4><ol>
<li><p><strong>同步文件并显示进度</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -avzP file.txt user@remote:/path/to/destination</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>排除某些文件或目录</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -av --exclude <span class="string">&#x27;*.log&#x27;</span> /src/dir user@remote:/dest/dir</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>同步并删除目标多余文件</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -av --delete /src/dir user@remote:/dest/dir</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>限制带宽</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -avz --bwlimit=1000 /src/dir user@remote:/dest/dir</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用特定 SSH 端口</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -avz -e <span class="string">&#x27;ssh -p2222&#x27;</span> /src/dir user@remote:/dest/dir</span><br></pre></td></tr></table></figure></li>
</ol>
<p>通过这些参数和命令，可以高效地实现文件同步和备份。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>create pod and state</title>
    <url>/2024/12/26/create-pod-and-state/</url>
    <content><![CDATA[<h2 id="pod状态"><a href="#pod状态" class="headerlink" title="pod状态"></a>pod状态</h2><ul>
<li>CrashLoopBackOff : 容器退出，kubelet正在将它重启</li>
<li>InvalidImageName : 无法解析镜像名称</li>
<li>ImageInspectError : 无法校验镜像</li>
<li>ErrImageNeverPull : 策略禁止拉取镜像</li>
<li>ImagePullBackOff : 正在重试拉取</li>
<li>RegistryUnavailable : 连接不到镜像中心</li>
<li>ErrImagePull : 通用的拉取镜像出错</li>
<li>CreateContainerConfigError : 不能创建kubelet使用的容器配置</li>
<li>CreateContainerError : 创建容器失败</li>
<li>m.internalLifecycle.PreStartContainer : 执行hook报错</li>
<li>RunContainerError : 启动容器失败</li>
<li>PostStartHookError : 执行hook报错</li>
<li>ContainersNotInitialized : 容器没有初始化完毕</li>
<li>ContainersNotRead : 容器没有准备完毕</li>
<li>ContainerCreating : 容器创建中</li>
<li>PodInitializing : pod : 初始化中</li>
<li>DockerDaemonNotReady : docker还没有完全启动</li>
<li>NetworkPluginNotReady : 网络插件还没有完全启动</li>
<li>Evicted : Pod被驱逐</li>
</ul>
<h2 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h2><p><img src="https://raw.githubusercontent.com/shispring/picgo/master/pod-create.png" alt="create pod"></p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>useful tools</title>
    <url>/2024/12/26/useful-tools/</url>
    <content><![CDATA[<h2 id="termtosvg-录制终端会话"><a href="#termtosvg-录制终端会话" class="headerlink" title="termtosvg : 录制终端会话"></a>termtosvg : 录制终端会话</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#使用pyenv安装多版本python</span><br><span class="line">which python</span><br><span class="line"></span><br><span class="line">pip3 install termtosvg</span><br><span class="line"></span><br><span class="line">#使用</span><br><span class="line">termtosvg</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">#可以使用浏览器打开生成的svg</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="asciinema-录制终端会话"><a href="#asciinema-录制终端会话" class="headerlink" title="asciinema : 录制终端会话"></a>asciinema : 录制终端会话</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install asciinema </span><br><span class="line"></span><br><span class="line">asciinema rec session.cast</span><br><span class="line">asciinema play session.cast</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#brew install agg</span><br><span class="line">agg session.cast first.gif</span><br></pre></td></tr></table></figure>

<h2 id="lolcat"><a href="#lolcat" class="headerlink" title="lolcat"></a>lolcat</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install lolcat</span><br><span class="line"></span><br><span class="line">#lolcat --help</span><br></pre></td></tr></table></figure>

<h2 id="inkscape-：-svg转png"><a href="#inkscape-：-svg转png" class="headerlink" title="inkscape ： svg转png"></a>inkscape ： svg转png</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install --cask inkscape</span><br><span class="line">#或者</span><br><span class="line">#brew install librsvg</span><br><span class="line"></span><br><span class="line">inkscape 1.svg --export-type=png --export-filename=1.png</span><br><span class="line">inkscape 2.svg --export-type=png --export-filename=2.png</span><br><span class="line">inkscape 3.svg --export-type=png --export-filename=3.png</span><br><span class="line"></span><br><span class="line">#rsvg-convert 1.svg -o 1.png</span><br><span class="line">#rsvg-convert 2.svg -o 2.png</span><br><span class="line">#rsvg-convert 3.svg -o 3.png</span><br><span class="line"></span><br><span class="line">#svg转gif</span><br><span class="line">magick -delay 100 1.png 2.png 3.png output.gif</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="cloc-统计代码"><a href="#cloc-统计代码" class="headerlink" title="cloc 统计代码"></a>cloc 统计代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#github地址</span><br><span class="line">https://github.com/AlDanial/cloc</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>openstack一些命令</title>
    <url>/2024/12/27/openstack%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="常规操作命令"><a href="#常规操作命令" class="headerlink" title="常规操作命令"></a>常规操作命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#计算</span><br><span class="line">openstack compute service list</span><br><span class="line"></span><br><span class="line">#网络</span><br><span class="line">openstack network agent list</span><br><span class="line">openstack network list</span><br><span class="line">openstack subnet list</span><br><span class="line">openstack router list</span><br><span class="line"></span><br><span class="line">#存储</span><br><span class="line">openstack volume list</span><br><span class="line">openstack volume snapshot list</span><br><span class="line"></span><br><span class="line">#安全组</span><br><span class="line">openstack security group list</span><br><span class="line"></span><br><span class="line">#配额</span><br><span class="line">openstack quota show --all-projects</span><br><span class="line"></span><br><span class="line">#项目</span><br><span class="line">openstack project list</span><br><span class="line"></span><br><span class="line">#镜像</span><br><span class="line">openstack image list</span><br><span class="line"></span><br><span class="line">#主机</span><br><span class="line">openstack host list</span><br><span class="line"></span><br><span class="line">#主机操作</span><br><span class="line">openstack server list</span><br><span class="line">openstack server create</span><br><span class="line">openstack server show</span><br><span class="line"></span><br><span class="line">#主机规格</span><br><span class="line">openstack flavor</span><br><span class="line"></span><br><span class="line">#端口</span><br><span class="line">openstack port list</span><br><span class="line"></span><br><span class="line">#路由</span><br><span class="line">openstack router</span><br><span class="line"></span><br><span class="line">#登录地址</span><br><span class="line">openstack console url show INSTANCE_UUID</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
</search>
